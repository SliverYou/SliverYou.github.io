<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青柚</title>
  
  <subtitle>琴瑟在御 莫不静好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://home.junyouxiaowu.top/"/>
  <updated>2018-05-16T13:54:45.039Z</updated>
  <id>http://home.junyouxiaowu.top/</id>
  
  <author>
    <name>Sliver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go详尽笔记</title>
    <link href="http://home.junyouxiaowu.top/2018/05/08/just-to-go/"/>
    <id>http://home.junyouxiaowu.top/2018/05/08/just-to-go/</id>
    <published>2018-05-08T11:37:29.000Z</published>
    <updated>2018-05-16T13:54:45.039Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“I just wanna go.”</p></blockquote><a id="more"></a><h2 id="什么是-Go？"><a href="#什么是-Go？" class="headerlink" title="什么是 Go？"></a>什么是 Go？</h2><p>Go 是一门<code>并发支持</code>、<code>垃圾回收</code>的<code>编译型</code>系统编程语言，旨在创造一门具有在静态编译语言的高性能和动态语言的高效开发之间拥有良好平衡点的一门编程语言。</p><h2 id="Go-的主要特点有哪些？"><a href="#Go-的主要特点有哪些？" class="headerlink" title="Go 的主要特点有哪些？"></a>Go 的主要特点有哪些？</h2><ul><li>类型安全和内存安全</li><li>以非常直观和极低代价的方案实现高并发</li><li>高效的垃圾回收机制</li><li>快速编译（同时解决 C 语言中头文件太多的问题）</li><li>为多核计算机提供性能提升的方案</li><li>UTF-8 编码支持</li></ul><h2 id="如何安装-Go？"><a href="#如何安装-Go？" class="headerlink" title="如何安装 Go？"></a>如何安装 Go？</h2><p>Mac 下使用 brew 即可安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install go</div></pre></td></tr></table></figure><p>根据约定，GOPATH 下需要建立3个目录：</p><ul><li>bin（存放编译后生成的可执行文件）</li><li>pkg（存放编译后生成的包文件）</li><li>src（存放项目源码）</li></ul><p>在用户目录下创建 go 文件夹，并在其中再创建 bin, pkg, src 文件夹，将以下参数添加到 .zshrc 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</div><div class="line"><span class="built_in">export</span> GOBIN=<span class="variable">$GOPATH</span>/bin</div></pre></td></tr></table></figure><p><img src="/2018/05/08/just-to-go/go.png" alt="创建需要的文件夹"></p><p>创建 hello.go 文件，并写入：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"Hello, world!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用 go run hello.go 可以看到显示的结果：</p><p><img src="/2018/05/08/just-to-go/hello.png" alt="hello"></p><h2 id="Go-常用命令简介"><a href="#Go-常用命令简介" class="headerlink" title="Go 常用命令简介"></a>Go 常用命令简介</h2><ul><li>go get：获取远程包（需提前安装 git 或 hg）</li><li>go run：直接运行程序</li><li>go build：测试编译，检查是否有编译错误</li><li>go fmt：格式化源码（部分 IDE 在保存时自动调用）</li><li>go install：编译包文件并编译整个程序</li><li>go test：运行测试文件</li><li>go doc：查看文档（CHM 手册）</li></ul><h2 id="Go-基础"><a href="#Go-基础" class="headerlink" title="Go 基础"></a>Go 基础</h2><h3 id="关键字和注释"><a href="#关键字和注释" class="headerlink" title="关键字和注释"></a>关键字和注释</h3><p>25 个内置关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">break</span>       <span class="keyword">default</span>        <span class="function"><span class="keyword">func</span>      <span class="title">interface</span>    <span class="title">select</span></span></div><div class="line"><span class="function"><span class="title">case</span>        <span class="title">defer</span>          <span class="title">go</span>        <span class="title">map</span>          <span class="title">struct</span></span></div><div class="line"><span class="function"><span class="title">chan</span>        <span class="title">else</span>           <span class="title">goto</span>      <span class="title">package</span>      <span class="title">switch</span></span></div><div class="line"><span class="function"><span class="title">const</span>       <span class="title">fallthrough</span>    <span class="title">if</span>        <span class="title">range</span>        <span class="title">type</span></span></div><div class="line"><span class="function"><span class="title">continue</span>    <span class="title">for</span>            <span class="title">import</span>    <span class="title">return</span>       <span class="title">var</span></span></div></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">内建常量：<span class="literal">true</span> <span class="literal">false</span> <span class="literal">iota</span> <span class="literal">nil</span></div><div class="line"></div><div class="line">内建类型：<span class="keyword">int</span> <span class="keyword">int8</span> <span class="keyword">int16</span> <span class="keyword">int32</span> <span class="keyword">int64</span></div><div class="line">         <span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></div><div class="line">         <span class="keyword">float32</span> <span class="keyword">float64</span> <span class="keyword">complex128</span> <span class="keyword">complex64</span></div><div class="line">         <span class="keyword">bool</span> <span class="keyword">byte</span> <span class="keyword">rune</span> <span class="keyword">string</span> error</div><div class="line">         </div><div class="line">内建函数：<span class="built_in">make</span> <span class="built_in">len</span> <span class="built_in">cap</span> <span class="built_in">new</span> <span class="built_in">append</span> <span class="built_in">copy</span> <span class="built_in">close</span> <span class="built_in">delete</span></div><div class="line">         <span class="built_in">complex</span> <span class="built_in">real</span> <span class="built_in">imag</span></div><div class="line">         <span class="built_in">panic</span> <span class="built_in">recover</span></div></pre></td></tr></table></figure><ul><li>Go 语言中，使用大小写来决定该常量、变量、类型、接口、结构或函数是否可以被外部包所调用，如果一个名字是大写开头的，那么它将是可导出的，也就是可以被外部的包所访问</li><li>在习惯上，Go 语言程序员推荐使用驼峰式命名，如：<code>parseRequestLine</code>等。</li></ul><p>注释方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 单行注释</span></div><div class="line"><span class="comment">/* 多行注释 */</span></div></pre></td></tr></table></figure><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><ul><li>Go 程序是通过 package 来组织的（这与 Python 类似）</li><li>只有 package 名称为 main 的包可以包含 main 函数</li><li>一个可执行程序有且仅有一个 main 包</li><li>通过 import 关键字来导入其它非 main 包</li><li>通过 const 关键字来进行常量的定义</li><li>通过在函数体外部使用 var 关键字来进行全局变量的声明与赋值</li><li>通过 type 关键字来进行结构（struct）或接口（interface）的声明</li><li>通过 func 关键字来进行函数的声明</li></ul><p>导入 package：</p><ul><li>分批导入</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"os"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"strings"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"time"</span></div></pre></td></tr></table></figure><ul><li>集中式导入</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"os"</span></div><div class="line"><span class="string">"strings"</span></div><div class="line"><span class="string">"strconv"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>导入具有别名的 package：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">io <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 别名调用</span></div><div class="line">io.Println(<span class="string">"Hello, world!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>省略 package 名称导入（不推荐）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">. <span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 省略调用</span></div><div class="line">Println(<span class="string">"Hello, world!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>声明常量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> (</div><div class="line">pi = <span class="number">3.14</span></div><div class="line">a  = <span class="string">"a"</span></div><div class="line">b  = <span class="number">66</span></div><div class="line">c  = <span class="string">"C"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>声明全局变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">a = <span class="string">"a"</span></div><div class="line">b = <span class="number">66</span></div><div class="line">c = <span class="string">"C"</span></div><div class="line">)</div></pre></td></tr></table></figure><p>声明类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> (</div><div class="line">t1 <span class="keyword">float64</span></div><div class="line">t2 <span class="keyword">string</span></div><div class="line">t3 <span class="keyword">int64</span></div><div class="line">)</div></pre></td></tr></table></figure><h2 id="Go-基本类型"><a href="#Go-基本类型" class="headerlink" title="Go 基本类型"></a>Go 基本类型</h2><h3 id="类型介绍"><a href="#类型介绍" class="headerlink" title="类型介绍"></a>类型介绍</h3><ul><li>布尔型：bool<ul><li>长度：1字节</li><li>取值范围：true, false</li><li>注意事项：不可以用数字代表 true 或 false</li></ul></li></ul><ul><li>整型：int/uint<ul><li>根据运行平台可能为32或64位</li></ul></li></ul><ul><li>8位整型：int8/uint8<ul><li>长度：1字节</li><li>取值范围：-128~127/0~255</li><li>字节型：byte（uint8的别名）</li></ul></li></ul><ul><li>16位整型：int16/uint16<ul><li>长度：2字节</li><li>取值范围：-32768~32767/0~65535</li></ul></li></ul><ul><li>32位整型：int32（rune）/uint32<ul><li>长度：4字节</li><li>取值范围：-2^32/2~2^32/2-1/0~2^32-1</li></ul></li></ul><ul><li>64位整型：int64/uint64<ul><li>长度：8字节</li><li>取值范围：-2^64/2~2^64/2-1/0~2^64-1</li></ul></li></ul><ul><li>浮点型：float32/float64<ul><li>长度：4/8字节</li><li>小数位：精确到7/15小数位</li></ul></li></ul><ul><li>复数：complex64/complex128<ul><li>长度：8/16字节</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"math"</span></div><div class="line"><span class="string">"math/cmplx"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">3</span> + <span class="number">4i</span></div><div class="line"><span class="keyword">var</span> b = <span class="built_in">complex</span>(<span class="number">4</span>, <span class="number">3</span>)</div><div class="line"><span class="comment">// 输出一个复数</span></div><div class="line">fmt.Printf(<span class="string">"%g, %[1]T\n"</span>, a)</div><div class="line"><span class="comment">// 欧拉公式：e ^ iπ + 1 = 0</span></div><div class="line">fmt.Println(cmplx.Exp(<span class="number">1i</span>*math.Pi) + <span class="number">1</span>)</div><div class="line"><span class="comment">// 计算复数的模</span></div><div class="line">fmt.Println(cmplx.Abs(a), cmplx.Abs(b))</div><div class="line"></div><div class="line"><span class="comment">// 输出结果为：</span></div><div class="line"><span class="comment">// (3+4i), complex128</span></div><div class="line"><span class="comment">// (0+1.2246467991473515e-16i)</span></div><div class="line"><span class="comment">// 5 5</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>足够保存指针的 32 位或 64 位整数型：uintptr</li></ul><ul><li>其它值类型：<ul><li>array、struct、string</li></ul></li></ul><ul><li>引用类型：<ul><li>slice、map、chan</li></ul></li></ul><ul><li>接口类型：inteface</li></ul><ul><li>函数类型：func</li></ul><h3 id="类型零值"><a href="#类型零值" class="headerlink" title="类型零值"></a>类型零值</h3><p>零值并不等于空值，而是当变量被声明为某种类型后的默认值，通常情况下数值类型的默认值为0，bool 为 false，string 为空字符串：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> a <span class="keyword">string</span></div><div class="line"><span class="keyword">var</span> b <span class="keyword">int</span></div><div class="line"><span class="keyword">var</span> c <span class="keyword">bool</span></div><div class="line">fmt.Println(a, b, c)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span> <span class="literal">false</span></div></pre></td></tr></table></figure><h3 id="类型名称"><a href="#类型名称" class="headerlink" title="类型名称"></a>类型名称</h3><p>一个类型声明语句创建了一个新的类型名称，和现有类型具有相同的底层结构。新命名的类型提供了一个方法，用来分隔不同概念的类型，这样即使它们底层类型相同也是不兼容的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> (</div><div class="line">newType <span class="keyword">int64</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> a newType</div><div class="line">a = <span class="number">666</span></div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">666</span></div></pre></td></tr></table></figure><h2 id="Go-变量声明"><a href="#Go-变量声明" class="headerlink" title="Go 变量声明"></a>Go 变量声明</h2><ul><li>变量类型写在变量名之后</li><li>编译器可以推断变量类型</li><li>没有 char，只有 rune</li><li>原生支持复数类型</li></ul><h3 id="单个变量的声明与赋值"><a href="#单个变量的声明与赋值" class="headerlink" title="单个变量的声明与赋值"></a>单个变量的声明与赋值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">变量的声明格式：<span class="keyword">var</span> &lt;变量名称&gt; &lt;变量类型&gt;</div><div class="line">变量的赋值格式：&lt;变量名称&gt; = &lt;表达式&gt;</div><div class="line">声明的同时赋值：<span class="keyword">var</span> &lt;变量名称&gt; [变量类型] = &lt;表达式&gt; / &lt;变量名称&gt; := &lt;表达式&gt;</div></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 单个变量声明</span></div><div class="line"><span class="keyword">var</span> a <span class="keyword">string</span></div><div class="line"><span class="comment">// 单个变量赋值</span></div><div class="line">a = <span class="string">"hello"</span></div><div class="line"></div><div class="line"><span class="comment">// 单个变量声明并赋值</span></div><div class="line"><span class="keyword">var</span> b = <span class="string">"world"</span></div><div class="line"></div><div class="line"><span class="comment">// 简短变量声明并赋值</span></div><div class="line">c := <span class="string">"!"</span></div><div class="line">fmt.Println(a, b, c)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello world !</div></pre></td></tr></table></figure><h3 id="多个变量的声明与赋值"><a href="#多个变量的声明与赋值" class="headerlink" title="多个变量的声明与赋值"></a>多个变量的声明与赋值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">全局变量的声明可使用 <span class="keyword">var</span>() 的方式进行简写</div><div class="line">全局变量的声明不可以省略 <span class="keyword">var</span>，但可使用并行方式</div><div class="line">所有变量都可以使用类型推断</div><div class="line">局部变量不可以使用 <span class="keyword">var</span>() 的方式简写，只能使用并行方式</div></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 多个变量的声明</span></div><div class="line"><span class="keyword">var</span> a, b, c <span class="keyword">int</span></div><div class="line"><span class="comment">// 多个变量的赋值</span></div><div class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></div><div class="line">fmt.Println(a, b, c)</div><div class="line"></div><div class="line"><span class="comment">// 多个变量声明并赋值</span></div><div class="line"><span class="keyword">var</span> d, e, f <span class="keyword">int</span> = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span></div><div class="line">fmt.Println(d, e, f)</div><div class="line"></div><div class="line"><span class="comment">// 使用类型推断声明多个变量并赋值</span></div><div class="line"><span class="keyword">var</span> g, h, i = <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></div><div class="line">fmt.Println(g, h, i)</div><div class="line"></div><div class="line"><span class="comment">// 简短变量声明并赋值</span></div><div class="line">j, k, l := <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span></div><div class="line">fmt.Println(j, k, l)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>简短变量声明语句只有对已经在同级词法域声明过的变量才和赋值操作语句等价，如果变量是在外部词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量。</p><h3 id="变量的类型转换"><a href="#变量的类型转换" class="headerlink" title="变量的类型转换"></a>变量的类型转换</h3><ul><li>Go 中不存在隐式转换，所有类型转换必须显式声明</li><li>转换只能发生在两种相互兼容的类型之间</li><li>类型转换的格式：<code>&lt;ValueA&gt; [:]= &lt;TypeOfValueA&gt;(&lt;ValueB&gt;)</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 相互兼容的类型才能相互转换</span></div><div class="line"><span class="keyword">var</span> a <span class="keyword">float32</span> = <span class="number">3.14</span></div><div class="line">b := <span class="keyword">int</span>(a)</div><div class="line">fmt.Println(a, b)</div><div class="line"></div><div class="line"><span class="comment">// 浮点数类型不能直接转换成字符串类型</span></div><div class="line"><span class="comment">// c := string(a)</span></div><div class="line"><span class="comment">// fmt.Println(a, c)</span></div><div class="line"></div><div class="line"><span class="comment">// 整数类型可以转化成字符串类型</span></div><div class="line">d := <span class="keyword">string</span>(b)</div><div class="line">fmt.Printf(<span class="string">"%d, %q\n"</span>, b, d)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">3.14</span> <span class="number">3</span></div><div class="line"><span class="number">3</span>, <span class="string">"\x03"</span></div></pre></td></tr></table></figure><p>若要完成数值和数值字符串的转化，可以使用 strconv 包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"strconv"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := strconv.Itoa(<span class="number">66</span>)</div><div class="line">fmt.Printf(<span class="string">"%T\n"</span>, a)</div><div class="line">b, _ := strconv.Atoi(<span class="string">"67"</span>)</div><div class="line">fmt.Printf(<span class="string">"%T\n"</span>, b)</div><div class="line">fmt.Printf(<span class="string">"%q, %d\n"</span>, a, b)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">string</span></div><div class="line"><span class="keyword">int</span></div><div class="line"><span class="string">"66"</span>, <span class="number">67</span></div></pre></td></tr></table></figure><h2 id="Go-常量定义"><a href="#Go-常量定义" class="headerlink" title="Go 常量定义"></a>Go 常量定义</h2><h3 id="常量摘要"><a href="#常量摘要" class="headerlink" title="常量摘要"></a>常量摘要</h3><ul><li>常量的值在编译时就已经确定</li><li>常量的定义格式与变量基本相同</li><li>等号右侧必须是常量或者常量表达式</li><li>常量表达式中的函数必须是内置函数</li></ul><p>如果是批量声明的常量，除了第一个外其它的常量右边的初始化表达式都可以省略，如果省<br>略初始化表达式则表示使用前面常量的初始化表达式写法，对应的常量类型也一样的：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">a = <span class="number">1</span></div><div class="line">b</div><div class="line">c = <span class="number">2</span></div><div class="line">d</div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(a, b, c, d)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></div></pre></td></tr></table></figure><h3 id="iota-常量生成器"><a href="#iota-常量生成器" class="headerlink" title="iota 常量生成器"></a>iota 常量生成器</h3><p>常量声明可以使用 iota 常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不<br>用每行都写一遍初始化表达式。在一个 const 声明语句中，在第一个声明的常量所在的行，<br>iota 将会被置为0，然后在每一个有常量声明的行加一。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Weekday <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">Sunday Weekday = <span class="literal">iota</span></div><div class="line">Monday</div><div class="line">Tuesday</div><div class="line">Wednesday</div><div class="line">Thursday</div><div class="line">Friday</div><div class="line">Saturday</div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(Sunday,</div><div class="line">Monday, Tuesday,</div><div class="line">Wednesday, Thursday,</div><div class="line">Friday, Saturday)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></div></pre></td></tr></table></figure><p>iota 的值与这组常量的行索引有关：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Weekday <span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">Sunday Weekday = <span class="number">666</span></div><div class="line">Monday</div><div class="line">Tuesday</div><div class="line">Wednesday = <span class="literal">iota</span></div><div class="line">Thursday</div><div class="line">Friday</div><div class="line">Saturday</div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(Sunday,</div><div class="line">Monday, Tuesday,</div><div class="line">Wednesday, Thursday,</div><div class="line">Friday, Saturday)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">666</span> <span class="number">666</span> <span class="number">666</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></div></pre></td></tr></table></figure><p>iota 组合结果：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">_  = <span class="literal">iota</span></div><div class="line">KB = <span class="number">1</span> &lt;&lt; (<span class="literal">iota</span> * <span class="number">10</span>)</div><div class="line">MB</div><div class="line">GB</div><div class="line">TB</div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(KB, MB, GB, TB)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">1024</span> <span class="number">1048576</span> <span class="number">1073741824</span> <span class="number">1099511627776</span></div></pre></td></tr></table></figure><h3 id="无类型常量"><a href="#无类型常量" class="headerlink" title="无类型常量"></a>无类型常量</h3><p>一般定义常量时可以不确定常量的基础类型，编译器往往会为这些没有明确的基础类型的数字常量提供比基础类型更高精度的算术运算，并且在具体使用时不需要显示的类型转换；也就是说，常量可以作为各种类型使用。</p><h2 id="Go-指针"><a href="#Go-指针" class="headerlink" title="Go 指针"></a>Go 指针</h2><p>Go 虽然保留了指针，但与其它编程语言不同的是，在 Go 当中不支持指针运算以及”-&gt;”运算符，而直接采用”.”选择符来操作指针目标对象的成员。</p><ul><li>操作符”&amp;”取变量地址，使用”*“通过指针间接访问目标对象</li><li>默认值为 nil 而非 NULL</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">x := <span class="number">1</span></div><div class="line">p := &amp;x</div><div class="line">fmt.Println(*p)</div><div class="line">*p++</div><div class="line">fmt.Println(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure><p>使用指针来交换数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a, b := <span class="number">3</span>, <span class="number">4</span></div><div class="line">fmt.Println(a, b)</div><div class="line">swap(&amp;a, &amp;b)</div><div class="line">fmt.Println(a, b)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a, b *<span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="comment">// 通过指针交换数据</span></div><div class="line">*a, *b = *b, *a</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span> <span class="number">4</span></div><div class="line"><span class="number">4</span> <span class="number">3</span></div></pre></td></tr></table></figure><p>使用 new 函数可以初始化相应类型的零值并返回创建类型的地址：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">p := <span class="built_in">new</span>(<span class="keyword">int</span>)</div><div class="line">fmt.Println(p, *p)</div><div class="line">*p += <span class="number">2</span></div><div class="line">fmt.Println(*p)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>返回结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">0xc420080010</span> <span class="number">0</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure><h2 id="Go-运算符"><a href="#Go-运算符" class="headerlink" title="Go 运算符"></a>Go 运算符</h2><ul><li>Go 中的运算符均是从左至右结合</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 优先级（从高到低）</span></div><div class="line"></div><div class="line">^    !                                 （一元运算符）</div><div class="line">*    /    %    &lt;&lt;    &gt;&gt;    &amp;    &amp;^</div><div class="line">+    -    |    ^                       （二元运算符）</div><div class="line">==   !=   &lt;    &lt;=    &gt;=    &gt;</div><div class="line">&lt;-                                     （专门用于 channel）</div><div class="line">&amp;&amp;</div><div class="line">||</div></pre></td></tr></table></figure><ul><li>其中一元运算符中的 ^ 代表将数值按位取反，二元运算符中的 &amp;^ 代表 a &amp; (^b)</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">//  a = 00000001, b = 00000010</span></div><div class="line"><span class="keyword">var</span> a, b <span class="keyword">uint8</span> = <span class="number">1</span>, <span class="number">2</span></div><div class="line"><span class="comment">// ^a = 11111110</span></div><div class="line">fmt.Println(^a)</div><div class="line"><span class="comment">//      a = 00000001</span></div><div class="line"><span class="comment">//     ^b = 11111101</span></div><div class="line"><span class="comment">// a &amp;^ b = 00000001</span></div><div class="line">fmt.Println(a &amp;^ b)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">254</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure><ul><li>在 Go 当中，++ 与 – 是作为语句而并不是作为表达式，即 i++ 与 i = i + 1 或 i += 1 等效</li></ul><h2 id="Go-逻辑语句"><a href="#Go-逻辑语句" class="headerlink" title="Go 逻辑语句"></a>Go 逻辑语句</h2><h3 id="判断语句-if"><a href="#判断语句-if" class="headerlink" title="判断语句 if"></a>判断语句 if</h3><ul><li>条件表达式没有括号</li><li>支持一个初始化表达式（可以是并行方式）</li><li>左大括号必须和条件语句或 else 在同一行</li><li>支持单行模式</li><li>初始化语句中的变量为 block 级别，同时隐藏外部同名变量</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="string">"ok"</span></div><div class="line"><span class="keyword">if</span> a, b, c := <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>; a+b+c &gt; <span class="number">6</span> &#123;</div><div class="line">fmt.Println(a)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">fmt.Println(a, b, c)</div><div class="line">a := <span class="string">"hello"</span></div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></div><div class="line">hello</div><div class="line">ok</div></pre></td></tr></table></figure><p>可以看到，if 语句中新初始化的变量 a 会屏蔽前面已经存在变量 a，当语句判断结束后，被屏蔽的 a 变量才会显现。</p><p>Go 支持在进行 if 判断的时候对变量进行初始化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"io/ioutil"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">const</span> filename = <span class="string">"test.txt"</span></div><div class="line"><span class="comment">// 读取一个 test.txt 文件夹，里面包含内容：Hello, world!</span></div><div class="line"><span class="keyword">if</span> content, err := ioutil.ReadFile(filename); err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="comment">// 打印读取文件时的错误</span></div><div class="line">fmt.Println(err)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">fmt.Println(content)</div><div class="line">fmt.Printf(<span class="string">"%s\n"</span>, content)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">72</span> <span class="number">101</span> <span class="number">108</span> <span class="number">108</span> <span class="number">111</span> <span class="number">44</span> <span class="number">32</span> <span class="number">119</span> <span class="number">111</span> <span class="number">114</span> <span class="number">108</span> <span class="number">100</span> <span class="number">33</span>]</div><div class="line">Hello, world!</div></pre></td></tr></table></figure><h3 id="循环语句-for"><a href="#循环语句-for" class="headerlink" title="循环语句 for"></a>循环语句 for</h3><ul><li>Go 只有 for 一个循环语句关键字，但支持3种形式</li><li>初始化和步进表达式可以是多个值</li><li>条件语句每次循环都会被重新检查，因此不建议在条件语句中使用函数，应尽量提前计算好条件并以变量或常量代替</li><li><p>左大括号必须和条件语句在同一行</p></li><li><p>无限循环形式：</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">1</span></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">a++</div><div class="line"><span class="keyword">if</span> a == <span class="number">3</span> &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure><ul><li>充当 while 循环：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">1</span></div><div class="line"><span class="keyword">for</span> a &lt;= <span class="number">3</span> &#123;</div><div class="line">a++</div><div class="line">&#125;</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure><p>利用 if 和 for 实现一个十进制转二进制函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"strconv"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(conventToBin(<span class="number">13</span>))</div><div class="line">fmt.Println(conventToBin(<span class="number">255</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">conventToBin</span><span class="params">(num <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</div><div class="line">result := <span class="string">""</span></div><div class="line"><span class="keyword">if</span> num == <span class="number">0</span> &#123;</div><div class="line"><span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> num &gt; <span class="number">0</span> &#123;</div><div class="line">result += strconv.Itoa(num % <span class="number">2</span>)</div><div class="line">num /= <span class="number">2</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> result</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1011</span></div><div class="line"><span class="number">11111111</span></div></pre></td></tr></table></figure><ul><li>常规 for 循环：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">1</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</div><div class="line">a++</div><div class="line">&#125;</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span></div></pre></td></tr></table></figure><ul><li>同理，在 for 循环中，初始化的变量也是 block 级别的：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">1</span></div><div class="line"><span class="keyword">for</span> a := <span class="number">0</span>; a &lt; <span class="number">3</span>; a++ &#123;</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure><h3 id="选择语句-switch"><a href="#选择语句-switch" class="headerlink" title="选择语句 switch"></a>选择语句 switch</h3><ul><li>可以使用任何类型或表达式作为条件语句</li><li>case 的结尾不需要写 break，一旦条件符合将自动终止</li><li>如希望继续执行下一个 case，需使用 fallthrough 语句</li><li>支持一个初始化表达式（可以是并行方式），右侧需跟分号</li><li><p>左大括号必须和条件语句在同一行</p></li><li><p>常规 switch：</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">1</span></div><div class="line"><span class="keyword">switch</span> a &#123;</div><div class="line"><span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">fmt.Println(<span class="string">"a = 0"</span>)</div><div class="line"><span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">fmt.Println(<span class="string">"a = 1"</span>)</div><div class="line">&#125;</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure><ul><li>在 case 中进行判断：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := <span class="number">1</span></div><div class="line"><span class="keyword">switch</span> &#123;</div><div class="line"><span class="keyword">case</span> a &gt;= <span class="number">0</span>:</div><div class="line">fmt.Println(<span class="string">"a &gt;= 0"</span>)</div><div class="line"><span class="keyword">case</span> a &gt;= <span class="number">1</span>:</div><div class="line">fmt.Println(<span class="string">"a &gt;= 1"</span>)</div><div class="line">&#125;</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">输出结果为：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">`</span><span class="string">``</span>Go</div><div class="line">a &gt;= <span class="number">0</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure><ul><li>使用 fallthrough 防止 break：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">switch</span> a := <span class="number">1</span>; &#123;</div><div class="line"><span class="keyword">case</span> a &gt;= <span class="number">0</span>:</div><div class="line">fmt.Println(<span class="string">"a &gt;= 0"</span>)</div><div class="line"><span class="keyword">fallthrough</span></div><div class="line"><span class="keyword">case</span> a &gt;= <span class="number">1</span>:</div><div class="line">fmt.Println(<span class="string">"a &gt;= 1"</span>)</div><div class="line"><span class="keyword">fallthrough</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">fmt.Println(<span class="string">"else"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a &gt;= <span class="number">0</span></div><div class="line">a &gt;= <span class="number">1</span></div><div class="line"><span class="keyword">else</span></div></pre></td></tr></table></figure><h3 id="跳转语句-goto，break，continue"><a href="#跳转语句-goto，break，continue" class="headerlink" title="跳转语句 goto，break，continue"></a>跳转语句 goto，break，continue</h3><ul><li>三个语句都可以配合标签使用</li><li>标签名区分大小写，若不使用会造成编译错误</li><li>break 与 continue 配合标签可用于多层循环的跳出</li><li><p>goto 是调整执行位置，与其它2个语句配合标签的结果并不相同</p></li><li><p>通过标签使用 break：</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">Label:</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ &#123;</div><div class="line"><span class="keyword">if</span> i == <span class="number">3</span> &#123;</div><div class="line"><span class="keyword">break</span> Label</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"ok"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ok</div></pre></td></tr></table></figure><ul><li>通过标签使用 continue</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">Label:</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"%d "</span>, i)</div><div class="line"><span class="keyword">continue</span> Label</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"ok"</span>)</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">输出结果为：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">`</span><span class="string">``</span>Go</div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> ok</div></pre></td></tr></table></figure><ul><li>通过标签使用 goto</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"%d "</span>, i)</div><div class="line"><span class="keyword">goto</span> Label</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">Label:</div><div class="line">fmt.Println(<span class="string">"ok"</span>)</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">输出结果为：</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">`</span><span class="string">``</span>Go</div><div class="line"><span class="number">0</span> ok</div></pre></td></tr></table></figure><h2 id="Go-数组类型"><a href="#Go-数组类型" class="headerlink" title="Go 数组类型"></a>Go 数组类型</h2><ul><li>定义数组的格式：var <varname> [n]<type>，n &gt;= 0</type></varname></li><li>数组长度也是类型的一部分，因此具有不同长度的数组为不同类型</li><li>注意区分指向数组的指针和指针数组</li><li>数组在 Go 中为值类型，在函数或方法中传递数组时，传递的关于数组的整个拷贝</li><li>数组之间可以使用 == 或 != 进行比较，但不可以使用 &lt; 或 &gt;</li><li>可以使用 new 来创建数组，此方法返回一个指向数组的指针</li><li>Go 支持多维数组</li></ul><h3 id="数组声明与创建"><a href="#数组声明与创建" class="headerlink" title="数组声明与创建"></a>数组声明与创建</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 通过 var 来声明数组</span></div><div class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span></div><div class="line"><span class="keyword">var</span> b [<span class="number">3</span>]<span class="keyword">int</span></div><div class="line">fmt.Println(a, b)</div><div class="line">fmt.Println(a == b)</div><div class="line"></div><div class="line"><span class="comment">// 使用短变量声明方式声明数组</span></div><div class="line">c := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">fmt.Println(c)</div><div class="line"></div><div class="line"><span class="comment">// 按顺序对数组赋值，为赋值的索引将分配零值</span></div><div class="line">d := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">fmt.Println(d)</div><div class="line"></div><div class="line"><span class="comment">// 指定索引赋值</span></div><div class="line">e := [<span class="number">20</span>]<span class="keyword">int</span>&#123;<span class="number">19</span>: <span class="number">100</span>&#125;</div><div class="line">fmt.Println(e)</div><div class="line"></div><div class="line"><span class="comment">// 由编译器分配数组长度</span></div><div class="line">f := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</div><div class="line">fmt.Println(f)</div><div class="line"></div><div class="line">g := [...]<span class="keyword">int</span>&#123;<span class="number">29</span>: <span class="number">100</span>&#125;</div><div class="line">fmt.Println(g)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</div><div class="line"><span class="literal">true</span></div><div class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">0</span>]</div><div class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100</span>]</div><div class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</div><div class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100</span>]</div></pre></td></tr></table></figure><h3 id="指向数组的指针的使用"><a href="#指向数组的指针的使用" class="headerlink" title="指向数组的指针的使用"></a>指向数组的指针的使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := [<span class="number">10</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</div><div class="line"><span class="comment">// 声明指向数组的指针</span></div><div class="line"><span class="keyword">var</span> p *[<span class="number">10</span>]<span class="keyword">int</span></div><div class="line">p = &amp;a</div><div class="line">fmt.Println(a)</div><div class="line">a[<span class="number">5</span>] = <span class="number">60</span></div><div class="line">fmt.Println(a)</div><div class="line">fmt.Println(p)</div><div class="line"></div><div class="line"><span class="comment">// 使用 new 关键词来创建指向数组的指针</span></div><div class="line">q := <span class="built_in">new</span>([<span class="number">10</span>]<span class="keyword">int</span>)</div><div class="line">fmt.Println(q)</div><div class="line"></div><div class="line"><span class="comment">// 直接通过指针括号索引赋值即可对数组相应索引赋值</span></div><div class="line">q[<span class="number">2</span>] = <span class="number">5</span></div><div class="line">fmt.Println(q)</div><div class="line">fmt.Println(*q)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>]</div><div class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">60</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>]</div><div class="line">&amp;[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">60</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>]</div><div class="line">&amp;[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</div><div class="line">&amp;[<span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</div><div class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">5</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</div></pre></td></tr></table></figure><h3 id="多维数组的声明和使用"><a href="#多维数组的声明和使用" class="headerlink" title="多维数组的声明和使用"></a>多维数组的声明和使用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := [<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span>&#123;</div><div class="line">&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</div><div class="line">&#123;<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>&#125;&#125;</div><div class="line">fmt.Println(a)</div><div class="line">p := <span class="built_in">new</span>([<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">int</span>)</div><div class="line">p = &amp;a</div><div class="line">fmt.Println(p)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>] [<span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]]</div><div class="line">&amp;[[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>] [<span class="number">2</span> <span class="number">2</span> <span class="number">2</span>]]</div></pre></td></tr></table></figure><p>实现一个冒泡排序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := [...]<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">7</span>&#125;</div><div class="line">fmt.Println(<span class="string">"Before sort:"</span>, a)</div><div class="line">length := <span class="built_in">len</span>(a)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; length; i++ &#123;</div><div class="line"><span class="keyword">for</span> j := i + <span class="number">1</span>; j &lt; length; j++ &#123;</div><div class="line"><span class="keyword">if</span> a[i] &gt; a[j] &#123;</div><div class="line">a[i], a[j] = a[j], a[i]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">" After sort:"</span>, a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Before sort: [<span class="number">10</span> <span class="number">8</span> <span class="number">3</span> <span class="number">1</span> <span class="number">9</span> <span class="number">7</span>]</div><div class="line"> After sort: [<span class="number">1</span> <span class="number">3</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span>]</div></pre></td></tr></table></figure><h2 id="Go-切片类型"><a href="#Go-切片类型" class="headerlink" title="Go 切片类型"></a>Go 切片类型</h2><ul><li>其本身并不是数组，但它指向底层的数组</li><li>作为变长数组的替代方案，可以关联底层数组的局部或全部为引用类型</li><li>可以直接创建或从底层数组获取生成</li><li>使用 len() 获取元素个数，cap() 获取容量</li><li>一般使用 make() 创建</li><li>如果多个 slice 指向相同底层数组，其中一个的值改变会影响全部</li></ul><h3 id="根据数组创建切片"><a href="#根据数组创建切片" class="headerlink" title="根据数组创建切片"></a>根据数组创建切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 声明切片时，方括号内不需要填任何数</span></div><div class="line"><span class="keyword">var</span> s1 []<span class="keyword">int</span></div><div class="line">fmt.Println(<span class="string">"    s1:"</span>, s1)</div><div class="line">a := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</div><div class="line">fmt.Println(<span class="string">"     a:"</span>, a)</div><div class="line">s2 := a[<span class="number">2</span>:<span class="number">5</span>]</div><div class="line">fmt.Println(<span class="string">"a[2:5]:"</span>, s2)</div><div class="line">s3 := a[<span class="number">3</span>:]</div><div class="line">fmt.Println(<span class="string">"a[3: ]:"</span>, s3)</div><div class="line">s4 := a[:<span class="number">3</span>]</div><div class="line">fmt.Println(<span class="string">"a[ :3]:"</span>, s4)</div><div class="line">s5 := a[:]</div><div class="line">fmt.Println(<span class="string">"a[ : ]:"</span>, s5)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">    s1: []</div><div class="line">     a: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</div><div class="line">a[<span class="number">2</span>:<span class="number">5</span>]: [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</div><div class="line">a[<span class="number">3</span>: ]: [<span class="number">4</span> <span class="number">5</span>]</div><div class="line">a[ :<span class="number">3</span>]: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line">a[ : ]: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</div></pre></td></tr></table></figure><h3 id="使用-make-创建切片"><a href="#使用-make-创建切片" class="headerlink" title="使用 make 创建切片"></a>使用 make 创建切片</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 使用 make 创建一个长度为3，容量为10的切片</span></div><div class="line">s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">10</span>)</div><div class="line">fmt.Println(<span class="string">"s1:"</span>, s1)</div><div class="line">fmt.Printf(<span class="string">"len: %d, cap: %d\n"</span>, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s1: [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</div><div class="line"><span class="built_in">len</span>: <span class="number">3</span>, <span class="built_in">cap</span>: <span class="number">10</span></div></pre></td></tr></table></figure><h3 id="切片和数组的关系"><a href="#切片和数组的关系" class="headerlink" title="切片和数组的关系"></a>切片和数组的关系</h3><p><img src="/2018/05/08/just-to-go/slice.png" alt="切片和数组的关系"></p><ul><li>切片实际上是对底层数组的引用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 创建包含 a~k 字符 ascii 码的数组</span></div><div class="line">a := []<span class="keyword">byte</span>&#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>&#125;</div><div class="line">fmt.Println(<span class="string">"a:"</span>, a)</div><div class="line">sa := a[<span class="number">2</span>:<span class="number">5</span>] <span class="comment">// 对 a 数组索引[2，4]的数据进行应用</span></div><div class="line">sb := a[<span class="number">3</span>:<span class="number">5</span>] <span class="comment">// 对 a 数组索引[3，4]的数据进行应用</span></div><div class="line">fmt.Println(<span class="string">"a[2:5]:"</span>, <span class="keyword">string</span>(sa), <span class="string">"a[3:5]:"</span>, <span class="keyword">string</span>(sb))</div><div class="line"><span class="comment">// 因为是对数组的引用，某个切片对相关数据的修改也会影响其他切片</span></div><div class="line">fmt.Println(<span class="string">"Change sa[2] = 'z':"</span>)</div><div class="line">sa[<span class="number">2</span>] = <span class="string">'z'</span></div><div class="line">fmt.Println(<span class="string">"a[2:5]:"</span>, <span class="keyword">string</span>(sa), <span class="string">"a[3:5]:"</span>, <span class="keyword">string</span>(sb), <span class="string">"a:"</span>, <span class="keyword">string</span>(a))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a: [<span class="number">97</span> <span class="number">98</span> <span class="number">99</span> <span class="number">100</span> <span class="number">101</span> <span class="number">102</span> <span class="number">103</span> <span class="number">104</span> <span class="number">105</span> <span class="number">106</span> <span class="number">107</span>]</div><div class="line">a[<span class="number">2</span>:<span class="number">5</span>]: cde a[<span class="number">3</span>:<span class="number">5</span>]: de</div><div class="line">Change sa[<span class="number">2</span>] = <span class="string">'z'</span>:</div><div class="line">a[<span class="number">2</span>:<span class="number">5</span>]: cdz a[<span class="number">3</span>:<span class="number">5</span>]: dz a: abcdzfghijk</div></pre></td></tr></table></figure><ul><li>append 函数对切片的内存处理机制</li></ul><p>使用 append 为 slice 增加数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 创建一个长度为3，容量为6的 int 型切片</span></div><div class="line">s1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>, <span class="number">6</span>)</div><div class="line"><span class="comment">// 打印它的地址、数据形式，长度和容量</span></div><div class="line">fmt.Println(<span class="string">"Init s1:"</span>)</div><div class="line">fmt.Printf(<span class="string">"s1: %p, %[1]v, len: %d, cap: %d\n"</span>, s1, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</div><div class="line"><span class="comment">// 使用内置函数 append 向其尾部添加数据</span></div><div class="line">s1 = <span class="built_in">append</span>(s1, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">fmt.Println(<span class="string">"Append s1 1, 2, 3:"</span>)</div><div class="line">fmt.Printf(<span class="string">"s1: %p, %[1]v, len: %d, cap: %d\n"</span>, s1, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</div><div class="line"><span class="comment">// 当容量不够时，append 会将原始容量翻倍，并重新分配地址，原始数据拷贝一份至新地址</span></div><div class="line">fmt.Println(<span class="string">"Append s1 4, 5, 6:"</span>)</div><div class="line">s1 = <span class="built_in">append</span>(s1, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">fmt.Printf(<span class="string">"s1: %p, %[1]v, len: %d, cap: %d\n"</span>, s1, <span class="built_in">len</span>(s1), <span class="built_in">cap</span>(s1))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Init s1:</div><div class="line">s1: <span class="number">0xc420012090</span>, [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>], <span class="built_in">len</span>: <span class="number">3</span>, <span class="built_in">cap</span>: <span class="number">6</span></div><div class="line">Append s1 <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>:</div><div class="line">s1: <span class="number">0xc420012090</span>, [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>], <span class="built_in">len</span>: <span class="number">6</span>, <span class="built_in">cap</span>: <span class="number">6</span></div><div class="line">Append s1 <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>:</div><div class="line">s1: <span class="number">0xc420072060</span>, [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>], <span class="built_in">len</span>: <span class="number">9</span>, <span class="built_in">cap</span>: <span class="number">12</span></div></pre></td></tr></table></figure><p>使用 append 删除 slice 指定索引的元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</div><div class="line"><span class="built_in">println</span>(<span class="string">"Init slice:"</span>)</div><div class="line">printSlice(s1)</div><div class="line">s1 = del(s1, <span class="number">2</span>)</div><div class="line">fmt.Println(<span class="string">"Del elements from slice: "</span>)</div><div class="line">printSlice(s1)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">del</span><span class="params">(s []<span class="keyword">int</span>, index <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</div><div class="line"><span class="comment">// 将 slice 展开</span></div><div class="line"><span class="keyword">return</span> <span class="built_in">append</span>(s[:index], s[index+<span class="number">1</span>:]...)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="comment">// 打印 slice 的有关信息</span></div><div class="line">fmt.Printf(<span class="string">"slice: %v, len: %d, cap: %d, add: %p\n"</span>, s, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Init slice:</div><div class="line">slice: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>], <span class="built_in">len</span>: <span class="number">6</span>, <span class="built_in">cap</span>: <span class="number">6</span>, add: <span class="number">0xc420012090</span></div><div class="line">Del elements from slice:</div><div class="line">slice: [<span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>], <span class="built_in">len</span>: <span class="number">5</span>, <span class="built_in">cap</span>: <span class="number">6</span>, add: <span class="number">0xc420012090</span></div></pre></td></tr></table></figure><ul><li>copy 函数对切片的复制</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">s1 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</div><div class="line">s2 := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</div><div class="line">s3 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</div><div class="line">fmt.Println(<span class="string">"s1:"</span>, s1, <span class="string">"s2:"</span>, s2, <span class="string">"s3:"</span>, s3)</div><div class="line">fmt.Printf(<span class="string">"s1.address: %p, s2.address: %p, s3.address: %p\n\n"</span>, s1, s2, s3)</div><div class="line"></div><div class="line"><span class="comment">// 将 s2 中数据 copy 到 s1</span></div><div class="line">fmt.Println(<span class="string">"Copy s2 to s1:"</span>)</div><div class="line"><span class="built_in">copy</span>(s1, s2)</div><div class="line">fmt.Println(<span class="string">"s1:"</span>, s1, <span class="string">"s2:"</span>, s2)</div><div class="line"></div><div class="line"><span class="comment">// 将 s3 中数据 copy 到 s2</span></div><div class="line">fmt.Println(<span class="string">"Copy s3 to s2:"</span>)</div><div class="line"><span class="built_in">copy</span>(s2, s3)</div><div class="line">fmt.Println(<span class="string">"s3:"</span>, s3, <span class="string">"s2:"</span>, s2)</div><div class="line"></div><div class="line"><span class="comment">// copy 不会改变切片容量及相关地址</span></div><div class="line">fmt.Println(<span class="string">"After copy:"</span>)</div><div class="line">fmt.Printf(<span class="string">"s1.cap: %d, s2.cap: %d, s3.cap: %d\n"</span>, <span class="built_in">cap</span>(s1), <span class="built_in">cap</span>(s2), <span class="built_in">cap</span>(s3))</div><div class="line">fmt.Printf(<span class="string">"s1.address: %p, s2.address: %p, s3.address: %p\n"</span>, s1, s2, s3)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">s1: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>] s2: [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>] s3: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</div><div class="line">s1.address: <span class="number">0xc420012090</span>, s2.address: <span class="number">0xc420016200</span>, s3.address: <span class="number">0xc4200120c0</span></div><div class="line"></div><div class="line">Copy s2 to s1:</div><div class="line">s1: [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>] s2: [<span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</div><div class="line">Copy s3 to s2:</div><div class="line">s3: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>] s2: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line">After <span class="built_in">copy</span>:</div><div class="line">s1.<span class="built_in">cap</span>: <span class="number">6</span>, s2.<span class="built_in">cap</span>: <span class="number">3</span>, s3.<span class="built_in">cap</span>: <span class="number">6</span></div><div class="line">s1.address: <span class="number">0xc420012090</span>, s2.address: <span class="number">0xc420016200</span>, s3.address: <span class="number">0xc4200120c0</span></div></pre></td></tr></table></figure><ul><li>切片的 reslice 和 extend</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">arr := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>&#125;</div><div class="line">printSlice(arr)</div><div class="line">s1 := arr[<span class="number">2</span>:<span class="number">6</span>] <span class="comment">// reslice，获得原始切片的[2:6]部分，即 3，4，5，6</span></div><div class="line">printSlice(s1)</div><div class="line">s2 := s1[<span class="number">3</span>:<span class="number">5</span>] <span class="comment">// extend，尽管超出了 s1 的索引范围，但仍能指向最底层的数组，所以将自动拓展出去</span></div><div class="line">printSlice(s2)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(s []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="comment">// 打印 slice 的有关信息</span></div><div class="line">fmt.Printf(<span class="string">"slice: %v, len: %d, cap: %d, add: %p\n"</span>, s, <span class="built_in">len</span>(s), <span class="built_in">cap</span>(s), s)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">slice: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>], <span class="built_in">len</span>: <span class="number">7</span>, <span class="built_in">cap</span>: <span class="number">7</span>, add: <span class="number">0xc420014040</span></div><div class="line">slice: [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>], <span class="built_in">len</span>: <span class="number">4</span>, <span class="built_in">cap</span>: <span class="number">5</span>, add: <span class="number">0xc420014050</span></div><div class="line">slice: [<span class="number">6</span> <span class="number">7</span>], <span class="built_in">len</span>: <span class="number">2</span>, <span class="built_in">cap</span>: <span class="number">2</span>, add: <span class="number">0xc420014068</span></div></pre></td></tr></table></figure><p><img src="/2018/05/08/just-to-go/extend1.jpg" alt="切片和数组的关系"><br><img src="/2018/05/08/just-to-go/extend2.jpg" alt="切片和数组的关系"></p><p>根据代码和图解可以知道：slice 不可以向前拓展，但可以向后拓展；且 s[i] 不能超越 len(s)，拓展不能超越底层数组 cap(s)。</p><h2 id="Go-map-类型"><a href="#Go-map-类型" class="headerlink" title="Go map 类型"></a>Go map 类型</h2><ul><li>Go 中的 map 类似其它语言中的哈希表或者字典，以 key-value 形式存储数据</li><li>key 必须是支持 == 或 != 比较运算的类型，不可以是函数、map 或 slice</li><li>map 查找比线性搜索快很多，但比使用索引访问数据的类型慢100倍</li><li>map 使用 make() 创建，支持 := 这种简写方式</li><li>make([keyType]valueType, cap)，cap 表示容量，可省略</li><li>超出容量时会自动扩容，但尽量提供一个合理的初始值</li><li>使用 len() 获取元素个数</li><li>键值对不存在时，map 会自动添加，使用 delete() 删除某键值对</li><li>使用 for range 可以对 map 和 slice 进行迭代操作</li></ul><h3 id="声明并创建一个-map"><a href="#声明并创建一个-map" class="headerlink" title="声明并创建一个 map"></a>声明并创建一个 map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 显式声明创建 map</span></div><div class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span></div><div class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</div><div class="line">m[<span class="number">1</span>] = <span class="string">"hello"</span></div><div class="line">m[<span class="number">2</span>] = <span class="string">"world"</span></div><div class="line">m[<span class="number">3</span>] = <span class="string">"!"</span></div><div class="line">fmt.Println(m)</div><div class="line"></div><div class="line"><span class="comment">// 简短声明创建 map</span></div><div class="line">a := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</div><div class="line">a[i] = <span class="keyword">string</span>(i + <span class="number">65</span>)</div><div class="line">&#125;</div><div class="line">fmt.Println(a)</div><div class="line"></div><div class="line"><span class="comment">// 删除一个键值对</span></div><div class="line"><span class="built_in">delete</span>(a, <span class="number">2</span>)</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">map</span>[<span class="number">1</span>:hello <span class="number">2</span>:world <span class="number">3</span>:!]</div><div class="line"><span class="keyword">map</span>[<span class="number">0</span>:A <span class="number">1</span>:B <span class="number">2</span>:C]</div><div class="line"><span class="keyword">map</span>[<span class="number">0</span>:A <span class="number">1</span>:B]</div></pre></td></tr></table></figure><h3 id="创建多层-map"><a href="#创建多层-map" class="headerlink" title="创建多层 map"></a>创建多层 map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 声明并创建一个多级 map</span></div><div class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</div><div class="line">fmt.Println(m)</div><div class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++ &#123;</div><div class="line"><span class="comment">// 还需要对里头的 map 进行赋值</span></div><div class="line"><span class="keyword">if</span> _, ok := m[i][<span class="number">1</span>]; !ok &#123;</div><div class="line">m[i] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>)</div><div class="line">m[i][<span class="number">1</span>] = <span class="keyword">string</span>(i + <span class="number">64</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">fmt.Println(m)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">map</span>[]</div><div class="line"><span class="keyword">map</span>[<span class="number">2</span>:<span class="keyword">map</span>[<span class="number">1</span>:B] <span class="number">3</span>:<span class="keyword">map</span>[<span class="number">1</span>:C] <span class="number">1</span>:<span class="keyword">map</span>[<span class="number">1</span>:A]]</div></pre></td></tr></table></figure><h3 id="使用-range-进行迭代"><a href="#使用-range-进行迭代" class="headerlink" title="使用 range 进行迭代"></a>使用 range 进行迭代</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">s := []<span class="keyword">int</span>&#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</div><div class="line"><span class="comment">// 对 slice 进行迭代，并对值进行修改</span></div><div class="line"><span class="keyword">for</span> i, num := <span class="keyword">range</span> s &#123;</div><div class="line">fmt.Println(i, num)</div><div class="line">s[i] = i * <span class="number">10</span></div><div class="line">&#125;</div><div class="line">fmt.Println(s)</div><div class="line"></div><div class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">"A"</span>, <span class="number">2</span>: <span class="string">"B"</span>, <span class="number">3</span>: <span class="string">"C"</span>&#125;</div><div class="line">fmt.Println(m)</div><div class="line"><span class="comment">// 对 map 进行迭代</span></div><div class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</div><div class="line">fmt.Println(k, v)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span> <span class="number">6</span></div><div class="line"><span class="number">1</span> <span class="number">7</span></div><div class="line"><span class="number">2</span> <span class="number">8</span></div><div class="line"><span class="number">3</span> <span class="number">9</span></div><div class="line"><span class="number">4</span> <span class="number">10</span></div><div class="line">[<span class="number">0</span> <span class="number">10</span> <span class="number">20</span> <span class="number">30</span> <span class="number">40</span>]</div><div class="line"><span class="keyword">map</span>[<span class="number">2</span>:B <span class="number">3</span>:C <span class="number">1</span>:A]</div><div class="line"><span class="number">3</span> C</div><div class="line"><span class="number">1</span> A</div><div class="line"><span class="number">2</span> B</div></pre></td></tr></table></figure><h3 id="迭代排序过的-map"><a href="#迭代排序过的-map" class="headerlink" title="迭代排序过的 map"></a>迭代排序过的 map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"sort"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">m := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;<span class="number">1</span>: <span class="string">"A"</span>, <span class="number">2</span>: <span class="string">"B"</span>, <span class="number">3</span>: <span class="string">"C"</span>, <span class="number">4</span>: <span class="string">"D"</span>, <span class="number">5</span>: <span class="string">"E"</span>&#125;</div><div class="line">fmt.Println(m)</div><div class="line"><span class="comment">// 对 map 进行迭代</span></div><div class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</div><div class="line">fmt.Println(k, v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 创建 slice 存储键值</span></div><div class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(m))</div><div class="line">i := <span class="number">0</span></div><div class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> m &#123;</div><div class="line">s[i] = k</div><div class="line">i++</div><div class="line">&#125;</div><div class="line">fmt.Println(s)</div><div class="line"><span class="comment">// 使用 sort 包对 slice 排序</span></div><div class="line">sort.Ints(s)</div><div class="line">fmt.Println(s)</div><div class="line"></div><div class="line"><span class="comment">// 迭代排序过的键值</span></div><div class="line"><span class="keyword">for</span> _, k := <span class="keyword">range</span> s &#123;</div><div class="line">fmt.Println(k, m[k])</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">map</span>[<span class="number">1</span>:A <span class="number">2</span>:B <span class="number">3</span>:C <span class="number">4</span>:D <span class="number">5</span>:E]</div><div class="line"><span class="number">4</span> D</div><div class="line"><span class="number">5</span> E</div><div class="line"><span class="number">1</span> A</div><div class="line"><span class="number">2</span> B</div><div class="line"><span class="number">3</span> C</div><div class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span>]</div><div class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</div><div class="line"><span class="number">1</span> A</div><div class="line"><span class="number">2</span> B</div><div class="line"><span class="number">3</span> C</div><div class="line"><span class="number">4</span> D</div><div class="line"><span class="number">5</span> E</div></pre></td></tr></table></figure><h3 id="利用-map-解决问题"><a href="#利用-map-解决问题" class="headerlink" title="利用 map 解决问题"></a>利用 map 解决问题</h3><ul><li>计算一个字符串中最大不重复子串的长度</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">s1 := <span class="string">"abcabcabbsab"</span></div><div class="line">fmt.Println(lengthOfNonRepeatingSubStr(s1))</div><div class="line">s2 := <span class="string">"cbdaeababa"</span></div><div class="line">fmt.Println(lengthOfNonRepeatingSubStr(s2))</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">lengthOfNonRepeatingSubStr</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line"><span class="comment">// 得到最大不重复子串的长度</span></div><div class="line">lastOccurred := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">byte</span>]<span class="keyword">int</span>)</div><div class="line">start, maxLength := <span class="number">0</span>, <span class="number">0</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i, char := <span class="keyword">range</span> []<span class="keyword">byte</span>(s) &#123;</div><div class="line"><span class="keyword">if</span> lastI, ok := lastOccurred[char]; ok &amp;&amp; lastI &gt;= start &#123;</div><div class="line">start = lastI + <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> i-start+<span class="number">1</span> &gt; maxLength &#123;</div><div class="line">maxLength = i - start + <span class="number">1</span></div><div class="line">&#125;</div><div class="line">lastOccurred[char] = i</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> maxLength</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div></pre></td></tr></table></figure><h2 id="Go-字符串类型"><a href="#Go-字符串类型" class="headerlink" title="Go 字符串类型"></a>Go 字符串类型</h2><ul><li>rune 相当于 Go 中的 char（占四个字节），它是32位 int 的别名</li><li>byte 相当于一个字节，它是8位 int 的别名</li><li>string 可以转化为 rune slice 或是 byte slice</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"unicode/utf8"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 一个字符串包含了多个字节</span></div><div class="line">s := <span class="string">"你好啊，我的名字叫 Sliver。"</span></div><div class="line">fmt.Println(<span class="string">"s 的 byte 切片形式："</span>)</div><div class="line">fmt.Printf(<span class="string">"% X\n"</span>, []<span class="keyword">byte</span>(s))</div><div class="line"></div><div class="line">fmt.Println(<span class="string">"\n循环遍历 s 的 string 形式："</span>)</div><div class="line"><span class="keyword">for</span> i, char := <span class="keyword">range</span> s &#123;</div><div class="line"><span class="comment">// i 代表的是字节编号，char 则是 utf-8 编码</span></div><div class="line">fmt.Printf(<span class="string">"(%d, %X) "</span>, i, char)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 计算字符串中 rune 的数量</span></div><div class="line">fmt.Println(<span class="string">"\n\nRune count:"</span>, utf8.RuneCountInString(s))</div><div class="line"></div><div class="line"><span class="comment">// 将比特流中 utf-8 编码的数据转化为 rune</span></div><div class="line">bytes := []<span class="keyword">byte</span>(s)</div><div class="line"><span class="keyword">for</span> <span class="built_in">len</span>(bytes) &gt; <span class="number">0</span> &#123;</div><div class="line"><span class="comment">// utf8.DecodeRune() 方法将会检测 bytes 流中第一个可以转化为 utf-8 编码的数据和它的所占大小</span></div><div class="line">char, size := utf8.DecodeRune(bytes)</div><div class="line">bytes = bytes[size:]</div><div class="line">fmt.Printf(<span class="string">"%c "</span>, char)</div><div class="line"></div><div class="line"><span class="comment">/* DecodeRune unpacks the first UTF-8 encoding in p and returns the rune and its width in bytes.</span></div><div class="line"><span class="comment">If p is empty it returns (RuneError, 0).</span></div><div class="line"><span class="comment">Otherwise, if the encoding is invalid, it returns (RuneError, 1).</span></div><div class="line"><span class="comment">Both are impossible results for correct, non-empty UTF-8. */</span></div><div class="line">&#125;</div><div class="line">fmt.Printf(<span class="string">"\n\n"</span>)</div><div class="line"></div><div class="line">fmt.Println(<span class="string">"循环遍历 s 的 rune 切片形式："</span>)</div><div class="line"><span class="keyword">for</span> i, char := <span class="keyword">range</span> []<span class="keyword">rune</span>(s) &#123;</div><div class="line">fmt.Printf(<span class="string">"(%d, %c) "</span>, i, char)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">s 的 <span class="keyword">byte</span> 切片形式：</div><div class="line">E4 BD A0 E5 A5 BD E5 <span class="number">95</span> <span class="number">8</span>A EF BC <span class="number">8</span>C E6 <span class="number">88</span> <span class="number">91</span> E7 <span class="number">9</span>A <span class="number">84</span> E5 <span class="number">90</span> <span class="number">8</span>D E5 AD <span class="number">97</span> E5 <span class="number">8</span>F AB <span class="number">20</span> <span class="number">53</span> <span class="number">6</span>C <span class="number">69</span> <span class="number">76</span> <span class="number">65</span> <span class="number">72</span> E3 <span class="number">80</span> <span class="number">82</span></div><div class="line"></div><div class="line">循环遍历 s 的 <span class="keyword">string</span> 形式：</div><div class="line">(<span class="number">0</span>, <span class="number">4</span>F60) (<span class="number">3</span>, <span class="number">597</span>D) (<span class="number">6</span>, <span class="number">554</span>A) (<span class="number">9</span>, FF0C) (<span class="number">12</span>, <span class="number">6211</span>) (<span class="number">15</span>, <span class="number">7684</span>) (<span class="number">18</span>, <span class="number">540</span>D) (<span class="number">21</span>, <span class="number">5</span>B57) (<span class="number">24</span>, <span class="number">53</span>EB) (<span class="number">27</span>, <span class="number">20</span>) (<span class="number">28</span>, <span class="number">53</span>) (<span class="number">29</span>, <span class="number">6</span>C) (<span class="number">30</span>, <span class="number">69</span>) (<span class="number">31</span>, <span class="number">76</span>) (<span class="number">32</span>, <span class="number">65</span>) (<span class="number">33</span>, <span class="number">72</span>) (<span class="number">34</span>, <span class="number">3002</span>)</div><div class="line"></div><div class="line">Rune count: <span class="number">17</span></div><div class="line">你 好 啊 ， 我 的 名 字 叫   S l i v e r 。</div><div class="line"></div><div class="line">循环遍历 s 的 <span class="keyword">rune</span> 切片形式：</div><div class="line">(<span class="number">0</span>, 你) (<span class="number">1</span>, 好) (<span class="number">2</span>, 啊) (<span class="number">3</span>, ，) (<span class="number">4</span>, 我) (<span class="number">5</span>, 的) (<span class="number">6</span>, 名) (<span class="number">7</span>, 字) (<span class="number">8</span>, 叫) (<span class="number">9</span>,  ) (<span class="number">10</span>, S) (<span class="number">11</span>, l) (<span class="number">12</span>, i) (<span class="number">13</span>, v) (<span class="number">14</span>, e) (<span class="number">15</span>, r) (<span class="number">16</span>, 。)</div></pre></td></tr></table></figure><ul><li>其他操作</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"strings"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> <span class="built_in">print</span> = fmt.Println</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="built_in">print</span>(<span class="string">"Contains:  "</span>, strings.Contains(<span class="string">"sliver"</span>, <span class="string">"li"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Count:     "</span>, strings.Count(<span class="string">"sliver"</span>, <span class="string">"e"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"HasPrefix: "</span>, strings.HasPrefix(<span class="string">"sliver"</span>, <span class="string">"sl"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"HasSuffix: "</span>, strings.HasSuffix(<span class="string">"sliver"</span>, <span class="string">"er"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Index:     "</span>, strings.Index(<span class="string">"sliver"</span>, <span class="string">"e"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"LastIndex: "</span>, strings.LastIndex(<span class="string">"slivere"</span>, <span class="string">"e"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Join:      "</span>, strings.Join([]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;, <span class="string">"-"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Repeat:    "</span>, strings.Repeat(<span class="string">"a"</span>, <span class="number">5</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Replace:   "</span>, strings.Replace(<span class="string">"foo"</span>, <span class="string">"o"</span>, <span class="string">"0"</span>, <span class="number">-1</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Replace:   "</span>, strings.Replace(<span class="string">"foo"</span>, <span class="string">"o"</span>, <span class="string">"0"</span>, <span class="number">1</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Split:     "</span>, strings.Split(<span class="string">"a-b-c-d-e"</span>, <span class="string">"-"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Fields:    "</span>, strings.Fields(<span class="string">"a b  c\nd\te"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"ToLower:   "</span>, strings.ToLower(<span class="string">"sliver"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"ToUpper:   "</span>, strings.ToUpper(<span class="string">"sliver"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Trim:      "</span>, strings.Trim(<span class="string">"sliver"</span>, <span class="string">"sr"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"TrimLeft:  "</span>, strings.TrimLeft(<span class="string">"sliver"</span>, <span class="string">"sl"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"TrimRight: "</span>, strings.TrimRight(<span class="string">"sliverrr"</span>, <span class="string">"r"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"TrimSpace: "</span>, strings.TrimSpace(<span class="string">"  sliver  "</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Len: "</span>, <span class="built_in">len</span>(<span class="string">"hello"</span>))</div><div class="line"><span class="built_in">print</span>(<span class="string">"Char:"</span>, <span class="string">"hello"</span>[<span class="number">1</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Contains:   <span class="literal">true</span></div><div class="line">Count:      <span class="number">1</span></div><div class="line">HasPrefix:  <span class="literal">true</span></div><div class="line">HasSuffix:  <span class="literal">true</span></div><div class="line">Index:      <span class="number">4</span></div><div class="line">LastIndex:  <span class="number">6</span></div><div class="line">Join:       a-b</div><div class="line">Repeat:     aaaaa</div><div class="line">Replace:    f00</div><div class="line">Replace:    f0o</div><div class="line">Split:      [a b c d e]</div><div class="line">Fields:     [a b c d e]</div><div class="line">ToLower:    sliver</div><div class="line">ToUpper:    SLIVER</div><div class="line">Trim:       live</div><div class="line">TrimLeft:   iver</div><div class="line">TrimRight:  slive</div><div class="line">TrimSpace:  sliver</div><div class="line">Len:  <span class="number">5</span></div><div class="line">Char: <span class="number">101</span></div></pre></td></tr></table></figure><h2 id="Go-struct-类型"><a href="#Go-struct-类型" class="headerlink" title="Go struct 类型"></a>Go struct 类型</h2><ul><li>Go 中仅支持封装，不支持继承和多态</li><li>Go 中没有 class，只有 struct</li><li>不论地址还是结构本身，一律使用 <code>.</code> 来访问，不用使用 <code>-&gt;</code> 等方法来区分</li><li>可以使用自定义工厂函数，返回局部变量地址并不会发生错误</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</div><div class="line">X, Y <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Node <span class="keyword">struct</span> &#123;</div><div class="line">Value       <span class="keyword">int</span></div><div class="line">Left, Right *Node</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 声明创建一个 Point a</span></div><div class="line"><span class="keyword">var</span> a Point</div><div class="line">a = Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</div><div class="line">fmt.Println(<span class="string">"Point a:"</span>, a)</div><div class="line"><span class="comment">// 短变量声明 Point b</span></div><div class="line">b := Point&#123;X: <span class="number">3</span>, Y: <span class="number">4</span>&#125;</div><div class="line">fmt.Println(<span class="string">"Point b:"</span>, b)</div><div class="line"><span class="comment">// 创建 Point 类的切片</span></div><div class="line">points := []Point&#123;</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</div><div class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</div><div class="line">&#123;<span class="number">5</span>, <span class="number">6</span>&#125;,</div><div class="line">&#123;<span class="number">7</span>, <span class="number">8</span>&#125;,</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"Point slice:"</span>, points)</div><div class="line"></div><div class="line">root := Node&#123;<span class="number">3</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</div><div class="line">fmt.Println(<span class="string">"Init root:"</span>, root)</div><div class="line">root.Left = &amp;Node&#123;&#125;</div><div class="line">root.Right = &amp;Node&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</div><div class="line">root.Right.Left = <span class="built_in">new</span>(Node)</div><div class="line">fmt.Println(<span class="string">" New root:"</span>, root)</div><div class="line"><span class="comment">// 使用工厂函数</span></div><div class="line">root.Left = CreateNode(<span class="number">5</span>)</div><div class="line">fmt.Println(<span class="string">"root.Left:"</span>, root.Left)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateNode</span><span class="params">(value <span class="keyword">int</span>)</span> *<span class="title">Node</span></span> &#123;</div><div class="line"><span class="keyword">return</span> &amp;Node&#123;Value: value&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Point a: &#123;<span class="number">1</span> <span class="number">2</span>&#125;</div><div class="line">Point b: &#123;<span class="number">3</span> <span class="number">4</span>&#125;</div><div class="line">Point slice: [&#123;<span class="number">1</span> <span class="number">2</span>&#125; &#123;<span class="number">3</span> <span class="number">4</span>&#125; &#123;<span class="number">5</span> <span class="number">6</span>&#125; &#123;<span class="number">7</span> <span class="number">8</span>&#125;]</div><div class="line">Init root: &#123;<span class="number">3</span> &lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt;&#125;</div><div class="line"> New root: &#123;<span class="number">3</span> <span class="number">0xc42000a0a0</span> <span class="number">0xc42000a0c0</span>&#125;</div><div class="line">root.Left: &amp;&#123;<span class="number">5</span> &lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt;&#125;</div></pre></td></tr></table></figure><ul><li>Go 中对方法的传递的也是值传递</li><li>只有使用指针才可以改变结构的内容</li><li>nil 指针也可以调用方法</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</div><div class="line">X, Y <span class="keyword">int</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 声明创建一个 Point a</span></div><div class="line"><span class="keyword">var</span> a Point</div><div class="line">a = Point&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</div><div class="line">fmt.Println(<span class="string">"Point a:"</span>)</div><div class="line">a.<span class="built_in">print</span>()</div><div class="line"><span class="comment">// 短变量声明 Point b</span></div><div class="line">b := Point&#123;X: <span class="number">3</span>, Y: <span class="number">4</span>&#125;</div><div class="line">fmt.Println(<span class="string">"Point b:"</span>)</div><div class="line">b.<span class="built_in">print</span>()</div><div class="line"></div><div class="line">fmt.Println(<span class="string">"Point a + Point b:"</span>)</div><div class="line">c := add(a, b)</div><div class="line">c.<span class="built_in">print</span>()</div><div class="line"></div><div class="line"><span class="comment">// 创建 Point 类的切片</span></div><div class="line">points := []Point&#123;</div><div class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125;,</div><div class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;,</div><div class="line">&#123;<span class="number">5</span>, <span class="number">6</span>&#125;,</div><div class="line">&#123;<span class="number">7</span>, <span class="number">8</span>&#125;,</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"Point slice:"</span>, points)</div><div class="line"></div><div class="line">d := Point&#123;X: <span class="number">10</span>, Y: <span class="number">11</span>&#125;</div><div class="line">fmt.Println(<span class="string">"Init Point d:"</span>)</div><div class="line">d.<span class="built_in">print</span>()</div><div class="line">d.setValue(<span class="number">100</span>, <span class="number">110</span>)</div><div class="line">fmt.Println(<span class="string">"Point d setValue:"</span>)</div><div class="line">d.<span class="built_in">print</span>()</div><div class="line">d.setValueNew(<span class="number">100</span>, <span class="number">110</span>)</div><div class="line">fmt.Println(<span class="string">"Point d setValueNew:"</span>)</div><div class="line">d.<span class="built_in">print</span>()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Point)</span> <span class="title">print</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 创建类方法</span></div><div class="line">fmt.Printf(<span class="string">"Point.X = %d, Point.Y = %d\n"</span>, p.X, p.Y)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Point)</span> <span class="title">setValue</span><span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="comment">// 使用值作为方法接受者，不会改变值</span></div><div class="line">p.X, p.Y = x, y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *Point)</span> <span class="title">setValueNew</span><span class="params">(x, y <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="comment">// 只有指针作为方法接受者，可以改变值</span></div><div class="line">p.X, p.Y = x, y</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(p1, p2 Point)</span> <span class="title">Point</span></span> &#123;</div><div class="line"><span class="keyword">return</span> Point&#123;X: p1.X + p2.X, Y: p1.Y + p2.Y&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Point a:</div><div class="line">Point.X = <span class="number">1</span>, Point.Y = <span class="number">2</span></div><div class="line">Point b:</div><div class="line">Point.X = <span class="number">3</span>, Point.Y = <span class="number">4</span></div><div class="line">Point a + Point b:</div><div class="line">Point.X = <span class="number">4</span>, Point.Y = <span class="number">6</span></div><div class="line">Point slice: [&#123;<span class="number">1</span> <span class="number">2</span>&#125; &#123;<span class="number">3</span> <span class="number">4</span>&#125; &#123;<span class="number">5</span> <span class="number">6</span>&#125; &#123;<span class="number">7</span> <span class="number">8</span>&#125;]</div><div class="line">Init Point d:</div><div class="line">Point.X = <span class="number">10</span>, Point.Y = <span class="number">11</span></div><div class="line">Point d setValue:</div><div class="line">Point.X = <span class="number">10</span>, Point.Y = <span class="number">11</span></div><div class="line">Point d setValueNew:</div><div class="line">Point.X = <span class="number">100</span>, Point.Y = <span class="number">110</span></div></pre></td></tr></table></figure><ul><li>值接收者是 Go 中特有的</li><li>值/指针接收者均可以接收值/指针</li><li>要改变内容必须使用指针接受者</li><li>结构过大也考虑使用指针接受者</li></ul><h2 id="Go-拓展类型"><a href="#Go-拓展类型" class="headerlink" title="Go 拓展类型"></a>Go 拓展类型</h2><ul><li>利用 type 拓展已有类型</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Queue []<span class="keyword">int</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Push</span><span class="params">(v <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">*q = <span class="built_in">append</span>(*q, v)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">int</span></span> &#123;</div><div class="line">head := (*q)[<span class="number">0</span>]</div><div class="line">*q = (*q)[<span class="number">1</span>:]</div><div class="line"><span class="keyword">return</span> head</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">q := Queue&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">fmt.Println(<span class="string">"Queue:"</span>, q)</div><div class="line">q.Push(<span class="number">4</span>)</div><div class="line">q.Push(<span class="number">5</span>)</div><div class="line">fmt.Println(<span class="string">"After push:"</span>, q)</div><div class="line">fmt.Println(<span class="string">"Queue q Pop:"</span>, q.Pop(), <span class="string">"Queue q:"</span>, q)</div><div class="line">fmt.Println(<span class="string">"IsEmpty:"</span>, q.IsEmpty())</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Queue: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line">After push: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</div><div class="line">Queue q Pop: <span class="number">1</span> Queue q: [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</div><div class="line">IsEmpty: <span class="literal">false</span></div></pre></td></tr></table></figure><h2 id="Go-函数"><a href="#Go-函数" class="headerlink" title="Go 函数"></a>Go 函数</h2><ul><li>Go 函数不支持嵌套、重载和默认参数，但支持以下特性：<ul><li>无需声明原型、拥有不定长度变参、多返回值、命名返回值参数</li><li>拥有匿名函数、闭包特性</li></ul></li><li>定义函数使用关键字 func，且左大括号不能另起一行</li><li>函数返回值类型要写在声明后面</li><li>函数也可以作为一种类型使用，并作为参数传入</li></ul><h3 id="定义基本函数"><a href="#定义基本函数" class="headerlink" title="定义基本函数"></a>定义基本函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 不同类型参数，单返回值</span></div><div class="line">fmt.Println(operator(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"+"</span>))</div><div class="line">fmt.Println(operator(<span class="number">3</span>, <span class="number">4</span>, <span class="string">"-"</span>))</div><div class="line">fmt.Println(operator(<span class="number">5</span>, <span class="number">6</span>, <span class="string">"*"</span>))</div><div class="line">fmt.Println(operator(<span class="number">7</span>, <span class="number">8</span>, <span class="string">"/"</span>))</div><div class="line"><span class="comment">// fmt.Println(operator(9, 10, "&amp;"))</span></div><div class="line"></div><div class="line"><span class="comment">// 相同类型参数，多返回值</span></div><div class="line">fmt.Println(div(<span class="number">2</span>, <span class="number">3</span>))</div><div class="line">fmt.Println(div(<span class="number">10</span>, <span class="number">3</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">operator</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>, op <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line"><span class="comment">// 加减乘除操作函数</span></div><div class="line"><span class="keyword">switch</span> op &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</div><div class="line"><span class="keyword">return</span> a + b</div><div class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line"><span class="keyword">return</span> a - b</div><div class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</div><div class="line"><span class="keyword">return</span> a * b</div><div class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line"><span class="keyword">return</span> a / b</div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="built_in">panic</span>(<span class="string">"Unsupported operation: "</span> + op)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="comment">// 带余除法</span></div><div class="line"><span class="keyword">return</span> a / b, a % b</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line"><span class="number">-1</span></div><div class="line"><span class="number">30</span></div><div class="line"><span class="number">0</span></div><div class="line"><span class="number">0</span> <span class="number">2</span></div><div class="line"><span class="number">3</span> <span class="number">1</span></div></pre></td></tr></table></figure><h3 id="添加错误处理机制"><a href="#添加错误处理机制" class="headerlink" title="添加错误处理机制"></a>添加错误处理机制</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 判断异常</span></div><div class="line"><span class="keyword">if</span> result, err := operatorPlus(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"+"</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Println(err)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">fmt.Println(result)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> result, err := operatorPlus(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"x"</span>); err != <span class="literal">nil</span> &#123;</div><div class="line">fmt.Println(err)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">fmt.Println(result)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 命名返回参数</span></div><div class="line">fmt.Println(divPlus(<span class="number">10</span>, <span class="number">4</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">operatorPlus</span><span class="params">(a, b <span class="keyword">int</span>, op <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</div><div class="line"><span class="comment">// 加减乘除操作函数</span></div><div class="line"><span class="keyword">switch</span> op &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"+"</span>:</div><div class="line"><span class="keyword">return</span> a + b, <span class="literal">nil</span></div><div class="line"><span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line"><span class="keyword">return</span> a - b, <span class="literal">nil</span></div><div class="line"><span class="keyword">case</span> <span class="string">"*"</span>:</div><div class="line"><span class="keyword">return</span> a * b, <span class="literal">nil</span></div><div class="line"><span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line"><span class="keyword">return</span> a / b, <span class="literal">nil</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">"Unsupported operation: %s"</span>, op)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">divPlus</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(q, r <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="comment">// 带余除法，并命名返回值参数</span></div><div class="line"><span class="keyword">return</span> a / b, a % b</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span></div><div class="line">Unsupported operation: x</div><div class="line"><span class="number">2</span> <span class="number">2</span></div></pre></td></tr></table></figure><h3 id="函数式编程和匿名函数"><a href="#函数式编程和匿名函数" class="headerlink" title="函数式编程和匿名函数"></a>函数式编程和匿名函数</h3><p><strong>将函数作为参数和匿名函数：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"math"</span></div><div class="line"><span class="string">"reflect"</span></div><div class="line"><span class="string">"runtime"</span></div><div class="line"><span class="string">"strconv"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 函数式编程，这里将类似 Python 的装饰器进行使用</span></div><div class="line">fmt.Println(apply(pow, <span class="number">3</span>, <span class="number">4</span>))</div><div class="line"></div><div class="line"><span class="comment">// 使用匿名函数</span></div><div class="line">fmt.Println(apply(<span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">int</span>(math.Pow(<span class="keyword">float64</span>(a), <span class="keyword">float64</span>(b)))</div><div class="line">&#125;, <span class="number">3</span>, <span class="number">4</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">apply</span><span class="params">(op <span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">a</span>, <span class="title">b</span> <span class="title">int</span>) <span class="title">string</span></span> &#123;</div><div class="line">p := reflect.ValueOf(op).Pointer()</div><div class="line"><span class="comment">// 获取当前传入函数的名称</span></div><div class="line">opName := runtime.FuncForPC(p).Name()</div><div class="line">fmt.Printf(<span class="string">"Calling function %s with args (%d, %d)\n"</span>, opName, a, b)</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"result: "</span> + strconv.Itoa(op(a, b)))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">int</span>(math.Pow(<span class="keyword">float64</span>(a), <span class="keyword">float64</span>(b)))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Calling function main.pow with args (<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">result: <span class="number">81</span></div><div class="line">Calling function main.main.func1 with args (<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">result: <span class="number">81</span></div></pre></td></tr></table></figure><p><strong>闭包：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">sum := <span class="number">0</span></div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(v <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line">sum += v</div><div class="line"><span class="keyword">return</span> sum</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">a := adder()</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">fmt.Println(a(i))</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">10</span></div><div class="line"><span class="number">15</span></div><div class="line"><span class="number">21</span></div><div class="line"><span class="number">28</span></div><div class="line"><span class="number">36</span></div><div class="line"><span class="number">45</span></div></pre></td></tr></table></figure><h3 id="可变参数调用"><a href="#可变参数调用" class="headerlink" title="可变参数调用"></a>可变参数调用</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="comment">// 使用不定长参数</span></div><div class="line">fmt.Println(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(numbers ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</div><div class="line"><span class="keyword">var</span> s <span class="keyword">int</span></div><div class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> numbers &#123;</div><div class="line">s += numbers[i]</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> s</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">15</span></div></pre></td></tr></table></figure><h2 id="Go-interface-类型"><a href="#Go-interface-类型" class="headerlink" title="Go interface 类型"></a>Go interface 类型</h2><ul><li>Duck typing - ”像鸭子走路，像鸭子叫（长得像鸭子），那么它就是鸭子“</li><li>描述事物的外部行为，而不是内部结构</li><li>Go 属于结构化系统结构，类似 duck typing</li><li>Interface 其实是一组方法签名的集合，使用一个 interface 可以识别一个对象能够进行的操作</li><li>实现一个 Fakeduck1 和 Fakeduck2，如果它们都有 Gaga() 和 LikeDuck() 方法，就可以当做成一个 Duck，这也是 interface 的思想</li><li>Interface 只有方法声明，没有实现也没有数据字段</li></ul><p><strong>Example 1:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// USB &amp; Connecter interface</span></div><div class="line"><span class="keyword">type</span> USB <span class="keyword">interface</span> &#123;</div><div class="line">Name() <span class="keyword">string</span></div><div class="line">Connecter <span class="comment">// 组合 interface</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Connecter <span class="keyword">interface</span> &#123;</div><div class="line">Connect()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// PhoneConnecter</span></div><div class="line"><span class="keyword">type</span> PhoneConnecter <span class="keyword">struct</span> &#123;</div><div class="line">name <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(phone PhoneConnecter)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> phone.name</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(phone PhoneConnecter)</span> <span class="title">Connect</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"Connected:"</span>, phone.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ComputerConnecter</span></div><div class="line"><span class="keyword">type</span> ComputerConnecter <span class="keyword">struct</span> &#123;</div><div class="line">name  <span class="keyword">string</span></div><div class="line">brand <span class="keyword">string</span></div><div class="line">size  <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c ComputerConnecter)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"Name - %s, Brand - %s, Size - %s"</span>, c.name, c.brand, c.size)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c ComputerConnecter)</span> <span class="title">Connect</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"Connected:"</span>, c.name)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// TVConnecter</span></div><div class="line"><span class="keyword">type</span> TVConnecter <span class="keyword">struct</span> &#123;</div><div class="line">name <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(tv TVConnecter)</span> <span class="title">Name</span><span class="params">()</span> <span class="title">string</span></span> &#123;</div><div class="line"><span class="keyword">return</span> tv.name</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> p USB</div><div class="line">p = PhoneConnecter&#123;<span class="string">"iPhone 6s Plus"</span>&#125;</div><div class="line">fmt.Println(p.Name())</div><div class="line">p.Connect()</div><div class="line">DisConnect(p)</div><div class="line"></div><div class="line"><span class="keyword">var</span> c USB</div><div class="line">c = ComputerConnecter&#123;name: <span class="string">"MacBook Pro 2018"</span>, brand: <span class="string">"Apple"</span>, size: <span class="string">"512GB"</span>&#125;</div><div class="line">fmt.Println(c.Name())</div><div class="line">c.Connect()</div><div class="line">DisConnect(c)</div><div class="line"></div><div class="line">t := TVConnecter&#123;<span class="string">"Apple TV 4K"</span>&#125;</div><div class="line">fmt.Println(t.Name())</div><div class="line">DisConnectNew(t)</div><div class="line"></div><div class="line">DisConnectNew(p)</div><div class="line">DisConnectNew(c)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">DisConnect</span><span class="params">(usb USB)</span></span> &#123;</div><div class="line"><span class="comment">// 判断传入的 usb 是否为 PhoneConnecter（类型断言）</span></div><div class="line"><span class="keyword">if</span> phone, ok := usb.(PhoneConnecter); ok &#123;</div><div class="line">fmt.Printf(<span class="string">"Disconnected: %s\n\n"</span>, phone.name)</div><div class="line"><span class="keyword">return</span></div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"Unknown device.\n"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">DisConnectNew</span><span class="params">(usb <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line"><span class="comment">// switch type 对空接口的类型进行判断</span></div><div class="line"><span class="keyword">switch</span> device := usb.(<span class="keyword">type</span>) &#123;</div><div class="line"><span class="keyword">case</span> PhoneConnecter:</div><div class="line">fmt.Printf(<span class="string">"Phone disconnected: %s\n"</span>, device.name)</div><div class="line"><span class="keyword">case</span> ComputerConnecter:</div><div class="line">fmt.Printf(<span class="string">"Computer disconnected: %s\n"</span>, device.name)</div><div class="line"><span class="keyword">default</span>:</div><div class="line">fmt.Println(<span class="string">"Unknown device.\n"</span>)</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">iPhone <span class="number">6s</span> Plus</div><div class="line">Connected: iPhone <span class="number">6s</span> Plus</div><div class="line">Disconnected: iPhone <span class="number">6s</span> Plus</div><div class="line"></div><div class="line">Name - MacBook Pro <span class="number">2018</span>, Brand - Apple, Size - <span class="number">512</span>GB</div><div class="line">Connected: MacBook Pro <span class="number">2018</span></div><div class="line">Unknown device.</div><div class="line"></div><div class="line">Apple TV <span class="number">4</span>K</div><div class="line">Unknown device.</div><div class="line"></div><div class="line">Phone disconnected: iPhone <span class="number">6s</span> Plus</div><div class="line">Computer disconnected: MacBook Pro <span class="number">2018</span></div></pre></td></tr></table></figure><ul><li>Interface 变量存储着实现者的类型和实现者的值/指针</li></ul><p><strong>Example 2:</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</div><div class="line"><span class="comment">// 创建 Human</span></div><div class="line">name  <span class="keyword">string</span></div><div class="line">age   <span class="keyword">int</span></div><div class="line">phone <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</div><div class="line"><span class="comment">// 创建 Student</span></div><div class="line">Human</div><div class="line">school <span class="keyword">string</span></div><div class="line">number <span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s Student)</span> <span class="title">SayHi</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Hi, I'm %s, my school is %s.\n"</span>, s.Human.name, s.school)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(student Student)</span> <span class="title">Sing</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"La la, la la la la..."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</div><div class="line"><span class="comment">// 创建 Employee</span></div><div class="line">Human</div><div class="line">company <span class="keyword">string</span></div><div class="line">money   <span class="keyword">float64</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e Employee)</span> <span class="title">SayHi</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Hi, I'm %s, my company is %s.\n"</span>, e.Human.name, e.company)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e Employee)</span> <span class="title">Sing</span><span class="params">()</span></span> &#123;</div><div class="line">fmt.Println(<span class="string">"Hh, hh hh hh..."</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">type</span> Men <span class="keyword">interface</span> &#123;</div><div class="line"><span class="comment">// 创建 Men 接口，需要实现 SayHi，Sing 方法</span></div><div class="line">SayHi()</div><div class="line">Sing()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">SayHiAndSing</span><span class="params">(m Men)</span></span> &#123;</div><div class="line">fmt.Printf(<span class="string">"%T, %v\n"</span>, m, m)</div><div class="line">m.SayHi()</div><div class="line">m.Sing()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">s := Student&#123;Human&#123;<span class="string">"Sliver"</span>, <span class="number">10</span>, <span class="string">"1234"</span>&#125;, <span class="string">"HDU"</span>, <span class="string">"16"</span>&#125;</div><div class="line">s.SayHi()</div><div class="line">s.Sing()</div><div class="line"></div><div class="line">e := Employee&#123;Human&#123;<span class="string">"Ariel"</span>, <span class="number">8</span>, <span class="string">"4321"</span>&#125;, <span class="string">"COM"</span>, <span class="number">5000</span>&#125;</div><div class="line">e.SayHi()</div><div class="line">e.Sing()</div><div class="line"></div><div class="line">SayHiAndSing(s)</div><div class="line">SayHiAndSing(e)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Hi, I<span class="string">'m Sliver, my school is HDU.</span></div><div class="line"><span class="string">La la, la la la la...</span></div><div class="line"><span class="string">Hi, I'</span>m Ariel, my company is COM.</div><div class="line">Hh, hh hh hh...</div><div class="line">main.Student, &#123;&#123;Sliver <span class="number">10</span> <span class="number">1234</span>&#125; HDU <span class="number">16</span>&#125;</div><div class="line">Hi, I<span class="string">'m Sliver, my school is HDU.</span></div><div class="line"><span class="string">La la, la la la la...</span></div><div class="line"><span class="string">main.Employee, &#123;&#123;Ariel 8 4321&#125; COM 5000&#125;</span></div><div class="line"><span class="string">Hi, I'</span>m Ariel, my company is COM.</div><div class="line">Hh, hh hh hh...</div></pre></td></tr></table></figure><ul><li>使用 interface{} 代表任意类型（作为接受任何类型的容器）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> Queue []<span class="keyword">interface</span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Push</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</div><div class="line">*q = <span class="built_in">append</span>(*q, v)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line">head := (*q)[<span class="number">0</span>]</div><div class="line">*q = (*q)[<span class="number">1</span>:]</div><div class="line"><span class="keyword">return</span> head</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(q *Queue)</span> <span class="title">IsEmpty</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</div><div class="line"><span class="keyword">return</span> <span class="built_in">len</span>(*q) == <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">q := Queue&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</div><div class="line">fmt.Println(<span class="string">"Queue:"</span>, q)</div><div class="line">q.Push(<span class="number">4</span>)</div><div class="line">q.Push(<span class="number">5</span>)</div><div class="line">fmt.Println(<span class="string">"After push:"</span>, q)</div><div class="line">fmt.Println(<span class="string">"Queue q Pop:"</span>, q.Pop(), <span class="string">"Queue q:"</span>, q)</div><div class="line">fmt.Println(<span class="string">"IsEmpty:"</span>, q.IsEmpty())</div><div class="line"></div><div class="line">q.Push(<span class="string">"abc"</span>)</div><div class="line">q.Push(<span class="number">123.45</span>)</div><div class="line">q.Push(<span class="literal">true</span>)</div><div class="line">fmt.Println(q)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Queue: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</div><div class="line">After push: [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</div><div class="line">Queue q Pop: <span class="number">1</span> Queue q: [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</div><div class="line">IsEmpty: <span class="literal">false</span></div><div class="line">[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> abc <span class="number">123.45</span> <span class="literal">true</span>]</div></pre></td></tr></table></figure><ul><li>io.Reader 接口的使用</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"bytes"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"io"</span></div><div class="line"><span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> b bytes.Buffer</div><div class="line"></div><div class="line"><span class="comment">// 将字符串写入 Buffer</span></div><div class="line">b.Write([]<span class="keyword">byte</span>(<span class="string">"Hello,"</span>))</div><div class="line"></div><div class="line"><span class="comment">// 使用 Fprintf 将字符串拼接到 Buffer</span></div><div class="line">fmt.Fprintf(&amp;b, <span class="string">" world!"</span>)</div><div class="line"></div><div class="line"><span class="comment">// 将 Buffer 的内容写到 Stdout</span></div><div class="line">io.Copy(os.Stdout, &amp;b)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello, world!%</div></pre></td></tr></table></figure><h2 id="Go-资源管理与出错处理"><a href="#Go-资源管理与出错处理" class="headerlink" title="Go 资源管理与出错处理"></a>Go 资源管理与出错处理</h2><h3 id="defer-的使用"><a href="#defer-的使用" class="headerlink" title="defer 的使用"></a>defer 的使用</h3><p><strong>修改 return 的值：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">double(<span class="number">3</span>)</div><div class="line">double(<span class="number">5</span>)</div><div class="line">tryDefer()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">double</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="params">(result <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Printf(<span class="string">"double(%d) = %d\n"</span>, x, result) &#125;()</div><div class="line"><span class="keyword">return</span> x + x</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryDefer</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"Defer!"</span>)</div><div class="line">fmt.Println(<span class="string">"1"</span>)</div><div class="line">fmt.Println(<span class="string">"2"</span>)</div><div class="line"><span class="keyword">return</span></div><div class="line">fmt.Println(<span class="string">"3"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">double(<span class="number">3</span>) = <span class="number">6</span></div><div class="line">double(<span class="number">5</span>) = <span class="number">10</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line">Defer!</div></pre></td></tr></table></figure><p><strong>文件关闭和资源清理：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"bufio"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"os"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">writeFile(<span class="string">"defer.txt"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeFile</span><span class="params">(filename <span class="keyword">string</span>)</span></span> &#123;</div><div class="line">file, err := os.Create(filename)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line"><span class="built_in">panic</span>(err)</div><div class="line">&#125;</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">file.Close()</div><div class="line">fmt.Println(<span class="string">"File close successfully!"</span>)</div><div class="line">&#125;()</div><div class="line"></div><div class="line">writer := bufio.NewWriter(file)</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">writer.Flush()</div><div class="line">fmt.Println(<span class="string">"Writer flush successfully!"</span>)</div><div class="line">&#125;()</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ &#123;</div><div class="line">fmt.Fprintln(writer, i)</div><div class="line">&#125;</div><div class="line">fmt.Println(<span class="string">"Finished."</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Finished</div><div class="line">Writer flush successfully!</div><div class="line">File <span class="built_in">close</span> successfully!</div></pre></td></tr></table></figure><ul><li>defer 的执行方式类似其它语言中的析构函数，在函数体执行结束后，按照调用顺序的相反顺序逐个执行</li><li>defer 在函数发生严重错误时也会执行</li><li>defer 支持匿名函数的调用</li><li>defer 常用于资源清理、文件关闭、解锁以及记录时间等操作</li><li>通过与匿名函数配合可在 return 之后修改函数计算结果</li><li>如果函数体内某个变量作为 defer 时匿名函数的参数，则在定义 defer 时即已经获得了拷贝，否则则是引用某个变量的地址</li></ul><h3 id="painc-和-recover-的使用"><a href="#painc-和-recover-的使用" class="headerlink" title="painc 和 recover 的使用"></a>painc 和 recover 的使用</h3><p><strong>panic</strong></p><ul><li>停止当前程序执行</li><li>一直向上返回，执行每一层的 defer</li><li>如果没有遇见 recover，程序退出</li></ul><p><strong>recover</strong></p><ul><li>仅在 defer 调用中使用</li><li>获取 panic 的值</li><li>如果无法处理，可重新 panic</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"errors"</span></div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">tryRecover()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tryRecover</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">r := <span class="built_in">recover</span>()</div><div class="line"><span class="keyword">if</span> err, ok := r.(error); ok &#123;</div><div class="line">fmt.Println(<span class="string">"An error occured:"</span>, err)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="built_in">panic</span>(r)</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line"><span class="built_in">panic</span>(errors.New(<span class="string">"this is an error"</span>))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">An error occured: this is an error</div></pre></td></tr></table></figure><h2 id="Go-并发编程"><a href="#Go-并发编程" class="headerlink" title="Go 并发编程"></a>Go 并发编程</h2><p><strong>goroutine</strong></p><p>简单开启多个 goroutine：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Hello from goroutine %d\n"</span>, i)</div><div class="line">&#125;</div><div class="line">&#125;(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 防止 main() 直接结束杀掉了其他 goroutine，延时一段时间</span></div><div class="line">time.Sleep(time.Millisecond)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Hello from goroutine <span class="number">1</span></div><div class="line">Hello from goroutine <span class="number">1</span></div><div class="line">Hello from goroutine <span class="number">1</span></div><div class="line">Hello from goroutine <span class="number">1</span></div><div class="line">Hello from goroutine <span class="number">1</span></div><div class="line">...</div><div class="line">Hello from goroutine <span class="number">4</span></div><div class="line">Hello from goroutine <span class="number">4</span></div><div class="line">Hello from goroutine <span class="number">4</span></div><div class="line">Hello from goroutine <span class="number">4</span></div><div class="line">Hello from goroutine <span class="number">9</span></div><div class="line">Hello from goroutine <span class="number">9</span></div><div class="line">Hello from goroutine <span class="number">9</span></div><div class="line">Hello from goroutine <span class="number">9</span></div></pre></td></tr></table></figure><ul><li>goroutine 相当于协程 coroutine</li><li>协程是一种轻量级线程</li><li>协程是非抢占式多任务处理，由协程主动交出控制权</li><li>协程是编译器/解释器/虚拟机层面的多任务</li><li>多个协程可以在一个线程或多个线程上运行</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">a[i]++</div><div class="line">&#125;</div><div class="line">&#125;(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 防止 main() 直接结束杀掉了其他 goroutine，延时一段时间</span></div><div class="line">time.Sleep(time.Millisecond)</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果执行以上代码，会发现程序其实进入了死循环，因为 goroutine 需要主动释放控制权，否则第一个 goroutine 将会一直占用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"runtime"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">a[i]++</div><div class="line"><span class="comment">// 一个协程交出控制权后，其余协程也将可以继续进行操作</span></div><div class="line">runtime.Gosched()</div><div class="line">&#125;</div><div class="line">&#125;(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 防止 main() 直接结束杀掉了其他 goroutine，延时一段时间</span></div><div class="line">time.Sleep(time.Millisecond)</div><div class="line">fmt.Println(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">523</span> <span class="number">493</span> <span class="number">436</span> <span class="number">414</span> <span class="number">439</span> <span class="number">416</span> <span class="number">442</span> <span class="number">431</span> <span class="number">405</span> <span class="number">449</span>]</div></pre></td></tr></table></figure><p>代码相当于在 main() 函数中开启了 10 个 goroutine，main() 之后执行 time.Sleep() 阻塞自己，出让控制权给其余10个 goroutine，这 10 个 goroutine 互相出让控制权，最后 main() 阻塞完毕，打印输出数组 a。</p><p>再来个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</div><div class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</div><div class="line">fmt.Println(s)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">go</span> say(<span class="string">"world"</span>)</div><div class="line">say(<span class="string">"hello"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">hello</div><div class="line">world</div><div class="line">world</div><div class="line">hello</div><div class="line">hello</div><div class="line">world</div><div class="line">hello</div><div class="line">world</div><div class="line">world</div><div class="line">hello</div></pre></td></tr></table></figure><p>可以得到，在 Go 语言中：</p><ul><li>任何函数只需要加上 go 就能给调度器运行</li><li>不需要在定义时区分是否是异步函数</li><li>调度器会在合适的点进行切换（如：I/O，channel，等待锁，runtime.Gosched()等）</li></ul><p><strong>channel</strong></p><p>简单使用 channel：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">chaner()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">n := &lt;-c</div><div class="line">fmt.Println(n)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">chaner</span><span class="params">()</span></span> &#123;</div><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> worker(c)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">c &lt;- i</div><div class="line">&#125;</div><div class="line"></div><div class="line">time.Sleep(time.Millisecond)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">0</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">8</span></div><div class="line"><span class="number">9</span></div></pre></td></tr></table></figure><p>使用多个 goroutine：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">chaner()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(id <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">n := &lt;-c</div><div class="line">fmt.Printf(<span class="string">"Worker %d received %c\n"</span>, id, n)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">chaner</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> channels [<span class="number">10</span>]<span class="keyword">chan</span> <span class="keyword">int</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">channels[i] = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> worker(i, channels[i])</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">channels[i] &lt;- <span class="string">'A'</span> + i</div><div class="line">&#125;</div><div class="line">time.Sleep(time.Millisecond)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Worker <span class="number">0</span> received A</div><div class="line">Worker <span class="number">4</span> received E</div><div class="line">Worker <span class="number">3</span> received D</div><div class="line">Worker <span class="number">1</span> received B</div><div class="line">Worker <span class="number">7</span> received H</div><div class="line">Worker <span class="number">5</span> received F</div><div class="line">Worker <span class="number">6</span> received G</div><div class="line">Worker <span class="number">8</span> received I</div><div class="line">Worker <span class="number">2</span> received C</div><div class="line">Worker <span class="number">9</span> received J</div></pre></td></tr></table></figure><p>使用工厂函数生成 channel：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">chaner()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">createWorker</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">chan</span>&lt;- <span class="title">int</span></span> &#123;</div><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"Worker %d received %c\n"</span>, id, &lt;-c)</div><div class="line">&#125;</div><div class="line">&#125;()</div><div class="line"><span class="keyword">return</span> c</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">chaner</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> channels [<span class="number">10</span>]<span class="keyword">chan</span>&lt;- <span class="keyword">int</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">channels[i] = createWorker(i)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">channels[i] &lt;- <span class="string">'A'</span> + i</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">channels[i] &lt;- <span class="string">'a'</span> + i</div><div class="line">&#125;</div><div class="line"></div><div class="line">time.Sleep(time.Millisecond)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Worker <span class="number">0</span> received A</div><div class="line">Worker <span class="number">5</span> received F</div><div class="line">Worker <span class="number">1</span> received B</div><div class="line">Worker <span class="number">2</span> received C</div><div class="line">Worker <span class="number">3</span> received D</div><div class="line">Worker <span class="number">4</span> received E</div><div class="line">Worker <span class="number">6</span> received G</div><div class="line">Worker <span class="number">7</span> received H</div><div class="line">Worker <span class="number">8</span> received I</div><div class="line">Worker <span class="number">9</span> received J</div><div class="line">Worker <span class="number">0</span> received a</div><div class="line">Worker <span class="number">8</span> received i</div><div class="line">Worker <span class="number">1</span> received b</div><div class="line">Worker <span class="number">9</span> received j</div><div class="line">Worker <span class="number">2</span> received c</div><div class="line">Worker <span class="number">3</span> received d</div><div class="line">Worker <span class="number">4</span> received e</div><div class="line">Worker <span class="number">5</span> received f</div><div class="line">Worker <span class="number">6</span> received g</div><div class="line">Worker <span class="number">7</span> received h</div></pre></td></tr></table></figure><p>适时关闭 channel：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line"><span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">chaner()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="keyword">if</span> n, ok := &lt;-c; !ok &#123;</div><div class="line"><span class="keyword">break</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">fmt.Printf(<span class="string">"received %d\n"</span>, n)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">chaner</span><span class="params">()</span></span> &#123;</div><div class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">go</span> worker(c)</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">c &lt;- i</div><div class="line">&#125;</div><div class="line"><span class="built_in">close</span>(c) <span class="comment">// 关闭 channel</span></div><div class="line"></div><div class="line">time.Sleep(time.Millisecond)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">received <span class="number">0</span></div><div class="line">received <span class="number">1</span></div><div class="line">received <span class="number">2</span></div><div class="line">received <span class="number">3</span></div><div class="line">received <span class="number">4</span></div><div class="line">received <span class="number">5</span></div><div class="line">received <span class="number">6</span></div><div class="line">received <span class="number">7</span></div><div class="line">received <span class="number">8</span></div><div class="line">received <span class="number">9</span></div></pre></td></tr></table></figure><p>自定义信号量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line"><span class="string">"fmt"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> worker <span class="keyword">struct</span> &#123;</div><div class="line">in   <span class="keyword">chan</span> <span class="keyword">int</span></div><div class="line">done <span class="keyword">chan</span> <span class="keyword">bool</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">chaner()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">doWork</span><span class="params">(id <span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>, done <span class="keyword">chan</span> <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> c &#123;</div><div class="line">fmt.Printf(<span class="string">"Worker %d received %c\n"</span>, id, n)</div><div class="line">done &lt;- <span class="literal">true</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">createWorker</span><span class="params">(id <span class="keyword">int</span>)</span> <span class="title">worker</span></span> &#123;</div><div class="line">w := worker&#123;</div><div class="line">in:   <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>),</div><div class="line">done: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>),</div><div class="line">&#125;</div><div class="line"><span class="keyword">go</span> doWork(id, w.in, w.done)</div><div class="line"><span class="keyword">return</span> w</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">chaner</span><span class="params">()</span></span> &#123;</div><div class="line"><span class="keyword">var</span> workers [<span class="number">10</span>]worker</div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">workers[i] = createWorker(i)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">workers[i].in &lt;- <span class="string">'a'</span> + i</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> _, work := <span class="keyword">range</span> workers &#123;</div><div class="line">&lt;-work.done</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">workers[i].in &lt;- <span class="string">'A'</span> + i</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> _, work := <span class="keyword">range</span> workers &#123;</div><div class="line">&lt;-work.done</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Worker <span class="number">1</span> received b</div><div class="line">Worker <span class="number">6</span> received g</div><div class="line">Worker <span class="number">2</span> received c</div><div class="line">Worker <span class="number">8</span> received i</div><div class="line">Worker <span class="number">4</span> received e</div><div class="line">Worker <span class="number">5</span> received f</div><div class="line">Worker <span class="number">0</span> received a</div><div class="line">Worker <span class="number">7</span> received h</div><div class="line">Worker <span class="number">9</span> received j</div><div class="line">Worker <span class="number">3</span> received d</div><div class="line">Worker <span class="number">3</span> received D</div><div class="line">Worker <span class="number">0</span> received A</div><div class="line">Worker <span class="number">4</span> received E</div><div class="line">Worker <span class="number">5</span> received F</div><div class="line">Worker <span class="number">6</span> received G</div><div class="line">Worker <span class="number">7</span> received H</div><div class="line">Worker <span class="number">8</span> received I</div><div class="line">Worker <span class="number">9</span> received J</div><div class="line">Worker <span class="number">1</span> received B</div><div class="line">Worker <span class="number">2</span> received C</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“I just wanna go.”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://home.junyouxiaowu.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Go" scheme="http://home.junyouxiaowu.top/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>GIL in Python</title>
    <link href="http://home.junyouxiaowu.top/2018/04/01/GIL-in-Python/"/>
    <id>http://home.junyouxiaowu.top/2018/04/01/GIL-in-Python/</id>
    <published>2018-04-01T14:52:27.000Z</published>
    <updated>2018-04-01T15:00:32.495Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“有人说，Python 的多线程是鸡肋。”</p></blockquote><a id="more"></a><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>继承自上次的进程和线程，这次来说说 Python 中的多线程。</p><p>先附上一个多线程爬虫。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">bs = partial(BeautifulSoup, features=<span class="string">'lxml'</span>)</div><div class="line">headers = &#123;</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(html)</span>:</span></div><div class="line">    divs = bs(html).select(<span class="string">"div[class='pic']"</span>)</div><div class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> divs:</div><div class="line">        a = div.find_all(<span class="string">'a'</span>)[<span class="number">0</span>]</div><div class="line">        img = div.find_all(<span class="string">'img'</span>)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">yield</span> &#123;<span class="string">'link'</span>: a[<span class="string">'href'</span>], <span class="string">'image'</span>: img[<span class="string">'src'</span>]&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(link)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        html = requests.get(link, headers=headers).text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'Connection failed'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    </div><div class="line">    div = bs(html).select(<span class="string">"div[id='picture']"</span>)[<span class="number">0</span>]</div><div class="line">    images = div.select(<span class="string">'img'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i, image <span class="keyword">in</span> enumerate(images):</div><div class="line">        source = image[<span class="string">'src'</span>]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            src = requests.get(source, headers=headers).content</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'Spider &#123;&#125; failed.'</span>.format(i))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        name = md5(source.encode(<span class="string">'utf8'</span>)).hexdigest()</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'source/&#123;&#125;.jpg'</span>.format(name), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(src)</div><div class="line">            print(<span class="string">'&#123;&#125;.jpg download successfully!'</span>.format(name))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        html = requests.get(<span class="string">'http://www.meizitu.com/a/sexy.html'</span>, headers=headers).text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'Connection failed!'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'source'</span>):</div><div class="line">            os.mkdir(<span class="string">'source'</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> spider(html):</div><div class="line">            link = letter[<span class="string">'link'</span>]</div><div class="line">            thread = threading.Thread(target=download, args=(link, ))</div><div class="line">            thread.start()</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p>我们都知道，CPU 很快，很多时候，都是 CPU 在等待我们、等待程序的运行结束。</p><p>往往一个程序的运行都会开启一个进程，但在一定时间内，CPU 只能执行一个进程，一个进程在这个时刻可以进入 CPU 的临界区，访问 CPU 提供的资源。但 CPU 很快，I/O 操作很慢，如果一个进程只有一个线程，并且 I/O 操作是在一次计算并输出的结果的操作之前的，这个时候，势必要等待很慢的 I/O 操作先执行完，才能再执行之后的计算操作。假如这个结果是要让用户看的，用户要等到 I/O 操作完毕才能查看结果，这是很让人不耐烦的。</p><p>多线程可以把占据长时间的进程中的任务放到后台去处理，将更简单快速的线程先执行。所以，在一些等待的任务实现上：如用户输入、文件读写和网络收发数据等，多线程就比较有用了。CPU 通过线程调度算法，频繁的进行线程切换，当正在执行的一个线程需要进行 I/O 操作或者需要访问内存的时候，CPU 可以先放置这个线程，转而调度进程队列上的其他线程，被放置的线程处于阻塞状态，等待其 I/O 操作或者访问内存操作结束后，该线程就重新回到进 CPU 的怀抱。因此，通过多线程我们可以释放一些珍贵的资源，比如内存占用资源等。</p><p>当然，多进程也是可以的，但是线程和进程相比，要轻量一些，CPU 的进程调度算法，较线程调度算法，要慢一些。</p><p>想一想，有一个多核 CPU，如4核 CPU，一个核同一时间只能运行一个进程，一个进程可以运行多个线程，但一次也只能运行一个线程。不过因为是多核 CPU，（理论上）可以在多个核上运行同一个进程的多个线程，这样就实现了多个线程的并行。多核 CPU 的存在，提高了同一进程执行多个任务的效率。</p><p>这么厉害的多线程，Python 当然是支持的，但它能发挥多核 CPU 的优势，同时执行多个线程吗？</p><p>答案是不行的，因为 <code>GIL</code> 的存在。</p><h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><h3 id="什么是-GIL？"><a href="#什么是-GIL？" class="headerlink" title="什么是 GIL？"></a>什么是 GIL？</h3><p>GIL 的全称是 Global Interpreter Lock(全局解释器锁)，来源是 Python 设计之初的考虑，为了数据安全所做的决定。</p><h3 id="Python-多线程如何执行？"><a href="#Python-多线程如何执行？" class="headerlink" title="Python 多线程如何执行？"></a>Python 多线程如何执行？</h3><p>在 Python 中，一个线程的执行需要经过一下步骤：</p><ol><li>获取 GIL。</li><li>执行代码直到 sleep 或者是 Python 虚拟机将其挂起。</li><li>释放 GIL。 </li></ol><p>可见，某个线程想要执行，必须先拿到 GIL，我们可以把 GIL 看作是执行某个线程必需的令牌，只有拿到这个令牌的线程才能被 Python 解释器执行，并且在一个 Python 进程中，GIL只有一个。拿不到 GIL 的线程，就不允许进入 CPU 执行。</p><p>所以，就算你是100核 CPU，一个 Python 进程，同时也只能运行一个线程。可以得出，在多核 CPU 中，Python 多线程的效率并不高。</p><h3 id="GIL-的触发与释放"><a href="#GIL-的触发与释放" class="headerlink" title="GIL 的触发与释放"></a>GIL 的触发与释放</h3><p>在 Python3.X中，GIL 使用计时器（执行时间达到阈值后，当前线程释放 GIL，其它线程相互竞争获取 GIL）触发与释放。</p><p>有些人会说 Python 的多线程是鸡肋，其实并不是这样。常规的程序代码，可以分为两种：</p><ol><li><p>CPU 密集型，如各种循环、计数运算等。在这种情况下，由于计算工作多，计时器很快就会达到阈值，然后触发 GIL 的释放与再竞争（多个线程来回切换是需要消耗资源的），所以 Python 下的多线程对 CPU 密集型代码并不友好。</p></li><li><p>I/O 密集型，如文件处理、网络爬虫等。多线程能够有效提升效率（单线程下有 I/O 操作会进行 I/O 等待，造成不必要的时间浪费并且占用 CPU，而开启多线程能在某个线程等待时，自动切换到另外一个线程，可以不浪费宝贵的 CPU 资源，从而提升程序执行效率)。所以 Python 的多线程对 I/O 密集型代码比较友好。</p></li></ol><h2 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h2><p>Python 下使用多进程可以充分发挥多核 CPU 的优势，因为每个 Python 进程有各自独立的 GIL，可以保证互不干扰，也就真正意义上实现了程序的并行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> threading</div><div class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</div><div class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</div><div class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line"></div><div class="line">bs = partial(BeautifulSoup, features=<span class="string">'lxml'</span>)</div><div class="line">headers = &#123;</div><div class="line">    <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(html)</span>:</span></div><div class="line">    divs = bs(html).select(<span class="string">"div[class='pic']"</span>)</div><div class="line">    <span class="keyword">for</span> div <span class="keyword">in</span> divs:</div><div class="line">        a = div.find_all(<span class="string">'a'</span>)[<span class="number">0</span>]</div><div class="line">        img = div.find_all(<span class="string">'img'</span>)[<span class="number">0</span>]</div><div class="line">        <span class="keyword">yield</span> &#123;<span class="string">'link'</span>: a[<span class="string">'href'</span>], <span class="string">'image'</span>: img[<span class="string">'src'</span>]&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(link)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        html = requests.get(link, headers=headers).text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'Connection failed'</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    </div><div class="line">    div = bs(html).select(<span class="string">"div[id='picture']"</span>)[<span class="number">0</span>]</div><div class="line">    images = div.select(<span class="string">'img'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i, image <span class="keyword">in</span> enumerate(images):</div><div class="line">        source = image[<span class="string">'src'</span>]</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            src = requests.get(source, headers=headers).content</div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'Spider &#123;&#125; failed.'</span>.format(i))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        name = md5(source.encode(<span class="string">'utf8'</span>)).hexdigest()</div><div class="line">        <span class="keyword">with</span> open(<span class="string">'source/&#123;&#125;.jpg'</span>.format(name), <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">            f.write(src)</div><div class="line">            print(<span class="string">'&#123;&#125;.jpg download successfully!'</span>.format(name))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        html = requests.get(<span class="string">'http://www.meizitu.com/a/sexy.html'</span>, headers=headers).text</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">'Connection failed!'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'source'</span>):</div><div class="line">            os.mkdir(<span class="string">'source'</span>)</div><div class="line">        </div><div class="line">        pool = Pool()</div><div class="line">        pool.map(download, [letter[<span class="string">'link'</span>] <span class="keyword">for</span> letter <span class="keyword">in</span> spider(html)])</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure><p>对以上爬虫改为多进程实现，因为主要进行的是图片读写的操作，所以两种版本运行下来，感觉多线程的更快一点。因为多进程来回切换需要的时间也很多，对文件读取这样 I/O 操作，使用多线程会更舒服些。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>个人觉得 Python 的多线程也不是鸡肋，只要找到适合使用的情形，多线程也还是有用武之地的。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“有人说，Python 的多线程是鸡肋。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://home.junyouxiaowu.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>进程和线程</title>
    <link href="http://home.junyouxiaowu.top/2018/04/01/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
    <id>http://home.junyouxiaowu.top/2018/04/01/进程和线程/</id>
    <published>2018-04-01T08:32:27.000Z</published>
    <updated>2018-04-01T09:56:11.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“进程，线程，傻傻分不清楚。”</p></blockquote><a id="more"></a><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>在说进程之前，应该先说一下操作系统。</p><p>在计算机发明之前，人们处理大量的数学计算问题是通过人工处理的，耗费大量的人力和成本，并且避免不了错误的发生。为了处理大量的数学计算问题，人们发明了计算机。最初的计算机只能接受一些特定的指令，用户输入一个指令，计算机就做出一个操作。当用户在思考或者输入时，计算机就处于等待状态。显然这样做的结果是效率低下，毕竟在很多时候，计算机都处于等待状态。</p><h3 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h3><p>那么能不能把一系列需要操作的指令写下来，形成一个清单，一次性交给计算机，然后计算机通过不断得读取指令进行相应的操作？</p><p>当然可以。</p><p>所以，批处理操作系统诞生了。用户将多个需要执行的程序写在磁带上，然后交由计算机去读取并逐个执行这些程序，并将输出结果写在另一个磁带上。</p><p>虽然批处理操作系统的诞生提高了任务处理的便捷性，但是仍然存在一个很大的问题：</p><p>假如有两个任务 A 和 B，需要读取大量的数据输入（I/O操作），而其实 CPU 只能处在等待状态，等任务 A 读取完数据再能继续进行，这样就白白浪费了 CPU 资源。于是人们就想，能否在任务 A 读取数据的过程中，让任务 B 去执行，当任务A读取完数据之后，暂停任务 B，让任务 A 继续执行？ </p><p>这时候又出现了几个问题：内存中始终都只有一个程序在运行，而想要解决上述问题，必然要在内存中装入多个程序，如何处理呢？多个程序使用的数据如何辨别？当一个程序暂停后，随后怎么恢复到它之前执行的状态呢？</p><h3 id="进程的发明"><a href="#进程的发明" class="headerlink" title="进程的发明"></a>进程的发明</h3><p>这时候，人们就发明了进程，用进程来对应一个程序，每个进程来对应一定的内存地址空间，并且只能使用它自己的内存空间，各个进程之间互不干扰。进程同时也保存了程序每个时刻的运行状态，为进程切换提供了可能。当进程暂停时，它会保存当前进程的状态（进程标识，进程使用的资源等），在下一次切换回来时根据之前保存的状态进行恢复，接着继续执行。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>并发是能够让操作系统从宏观上看起来在同一时间段执行了多个任务。换句话说，进程让操作系统的并发成为了可能。</p><p>虽然并发从宏观上看有多个任务在执行，但在事实上，对于单核 CPU 来说，任意具体时刻都只有一个任务在占用 CPU 资源。</p><h3 id="竞争资源"><a href="#竞争资源" class="headerlink" title="竞争资源"></a>竞争资源</h3><p>众所周知，各种各样的资源，都是有限的、稀缺的。对计算机资源来说，也是这样。进程是 CPU 资源的分配和调度的一个独立单元，简单来说，各种不同的进程，它们需要竞争计算机的资源。</p><p>对单核 CPU 来说，同一时间，只能运行一个进程，这是无法改变的事实。用户在使用个人 PC 时，会觉得很多应用程序都是并行的，看起来好像是这样，然而实际是 CPU 每隔一定的时钟周期，会把相关资源对某个进程开放（只允许一个进程在同一时间访问），一段时间后，各个进程都能拥有获得 CPU 资源的能力，也就完成了宏观上的并行。</p><p>所以，只有多核 CPU 才能完成真正的并行。</p><h2 id="线程的引入"><a href="#线程的引入" class="headerlink" title="线程的引入"></a>线程的引入</h2><p>出现了进程之后，操作系统的性能得到了大大的提升。虽然进程的出现解决了操作系统的并发问题，但是人们不满足，逐渐对实时性有了要求。因为一个进程在一个时间段内只能做一个事情，如果一个进程有多个子任务时，只能逐个得执行这些子任务，很影响效率。</p><p><strong>Example:</strong></p><p>对于监控系统这个进程来说：不仅要与服务器端进行通信获取图像数据并将图像信息显示在画面上，还要处理与用户的交互操作。如果在一个时刻该系统正在与服务器通信获取图像数据，而用户在监控系统上点击了一个按钮，那么系统只能等获取完图像后才能与用户进行交互操作。如果获取图像需要10s，用户就得等待10s。显然这样的系统，无法满足人们的需求。</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>那么能不能将这些子任务分开执行呢？即某个时刻系统正在与服务器通信获取图像数据，同时，一个用户在监控系统上点击了一个按钮，那么系统可以先暂停获取图像的操作，先与用户进行交互操作（用户操作一般执行时间很短），然后再继续获取图像。 </p><p>为了处理这种情况，人们发明了线程，让一个线程执行一个子任务，这样一个进程就包含了多个线程，每个线程负责一个单独的子任务。在用户点击按钮的时候，可以暂停获取图像数据的线程，让出 CPU 资源，让线程获取这个进程的资源，响应用户的操作，响应完后再切换回来，获取图像数据的线程重新获取进程所拥有的资源。让用户感觉系统在同时做很多事，满足用户对实时性的要求。</p><p>所以，一个进程在一定时间得到的，是 CPU 对它的资源倾斜，这对一个进程来说，粒度有些太大了。而线程相当于更加轻量的进程，粒度更小，实现了进程内部的并发。同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文等），一个进程至少包括一个线程，线程是 CPU 调度执行的基本单位。</p><p><strong>进程让操作系统的并发性成为了可能，而线程让进程的内部并发成为了可能。</strong></p><h2 id="进程和线程区别"><a href="#进程和线程区别" class="headerlink" title="进程和线程区别"></a>进程和线程区别</h2><p>一个进程是一个独立（self contained）的运行环境，它可以被看作一个程序或者一个应用。而线程是在进程中执行的一个任务。</p><p>最大的区别是：是否单独占有内存地址空间（共享，同步，可靠性，开销）</p><ol><li>进程单独占有一定的内存地址空间，所以进程间存在内存隔离，数据是分开的，数据共享复杂但是同步简单，各个进程之间互不干扰；而线程共享所属进程占有的内存地址空间和资源，数据共享简单，但是同步复杂。 </li><li>进程单独占有一定的内存地址空间，一个进程出现问题不会影响其他进程，不影响主程序的稳定性，可靠性高；一个线程崩溃可能影响整个程序的稳定性，可靠性较低。 </li><li>进程单独占有一定的内存地址空间，进程的创建和销毁不仅需要保存寄存器和栈信息，还需要资源的分配回收以及页调度，开销较大；线程只需要保存寄存器和栈信息，开销较小。</li></ol><p>再次概括一下：<strong>进程是操作系统进行资源分配的基本单位（进程之间互不干扰），而线程是操作系统进行调度的基本单位（线程间互相切换）。</strong></p><h2 id="多进程和多线程"><a href="#多进程和多线程" class="headerlink" title="多进程和多线程"></a>多进程和多线程</h2><p>那么，上面举例的监控系统为什么要用一个进程实现（多线程）而不是多进程实现呢？ </p><p>答：多进程也可以实现，但是进程间通信没有线程间通信简单，一个进程提供的多线程环境，方便各个线程共享资源。</p><p>总而言之，进程可靠性高但是开销大，线程开销小但是可靠性低。根据不同情况选择不同模型。在需要并发处理并且需要共享一些变量的情况下，选择多线程。其他情况下，进程健壮性更好。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“进程，线程，傻傻分不清楚。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://home.junyouxiaowu.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>Python密码学不完全指北（现代密码）</title>
    <link href="http://home.junyouxiaowu.top/2018/03/31/Python%E5%AF%86%E7%A0%81%E5%AD%A62/"/>
    <id>http://home.junyouxiaowu.top/2018/03/31/Python密码学2/</id>
    <published>2018-03-31T07:32:27.000Z</published>
    <updated>2018-05-02T14:37:36.215Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“今天来说说流密码。”</p></blockquote><a id="more"></a><p>学校关于密码学的课已经教到了序列密码和分组密码了，这里应该吐槽一下老教授出的书真的很烂，密码学这么好玩的课还是适合自学啊…</p><h1 id="序列密码"><a href="#序列密码" class="headerlink" title="序列密码"></a>序列密码</h1><blockquote><p>序列密码也称为流密码（Stream Cipher），它是对称密码算法的一种。序列密码具有实现简单、便于硬件实施、加解密处理速度快、没有或只有有限的错误传播等特点，因此在实际应用中，特别是专用或机密机构中保持着优势，典型的应用领域包括无线通信、外交通信。 1949年 Shannon 证明了只有一次一密的密码体制是绝对安全的，这给序列密码技术的研究以强大的支持，序列密码方案的发展是模仿一次一密系统的尝试，或者说“一次一密”的密码方案是序列密码的雏形。如果序列密码所使用的是真正随机方式的、与消息流长度相同的密钥流，则此时的序列密码就是一次一密的密码体制。若能以一种方式产生一随机序列（密钥流），这一序列由密钥所确定，则利用这样的序列就可以进行加密，即将密钥、明文表示成连续的符号或二进制，对应地进行加密，加解密时一次处理明文中的一个或几个比特。</p></blockquote><p>序列密码类似一次一密，不同的是“一次一密”使用的是真正的随机数流，而序列密码使用的是伪随机数流。真正的随机数流有很多的局限性，比如它要和需要加密的明文信息一样长，还要保证真随机数流的绝对保密，但是，既然能保证和明文一样长度的真随机数流绝对保密了，为什么还要对明文进行加密呢？这是矛盾的。虽然一次一密是绝对安全的，但它也是不切实际的，序列密码则更加符合实际。它的加密算法可以公开，但密钥可以通过 RSA 等公钥密码建立可靠信道来传输，因为密钥不是很长，所以对加密效率稍微低的 RSA 来说，传输是很快的。</p><p>设计序列密码的主要考虑因素：</p><ol><li><p>加密序列的周期要长，若出现重复的周期过短，容易被爆破。</p></li><li><p>密钥流应该尽可能地接近真正随机数流的特征。</p></li><li><p>密钥长度要长，以避免穷举攻击。</p></li></ol><p>关于线性反馈移位寄存器就不多说了，看深入浅出密码学即可。</p><h1 id="分组密码"><a href="#分组密码" class="headerlink" title="分组密码"></a>分组密码</h1><blockquote><p>分组密码是将明文消息编码表示后的数字（简称明文数字）序列，划分成长度为 n 的组（可看成长度为 n 的矢量），每组分别在密钥的控制下变换成等长的输出数字（简称密文数字）序列。</p></blockquote><p>简而言之，分组密码就是将明文分成一个一个组，然后分别使用密钥对每个组进行加密。</p><h2 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h2><blockquote><p>DES 全称为 Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法，1977年被美国联邦政府的国家标准局确定为联邦资料处理标准（FIPS），并授权在非密级政府通信中使用，随后该算法在国际上广泛流传开来。需要注意的是，在某些文献中，作为算法的 DES 称为数据加密算法（Data Encryption Algorithm,DEA），已与作为标准的 DES 区分开来。</p></blockquote><p>DES 算是比较经典的分组加密算法了，它以64位为分组对数据加密，加密和解密用的是同一个算法。密钥长度也为64位，但实际上只有56位参与 DES 的运算（第8、16、24、32、40、48、56、64位是校验位，使得每个密钥都有奇数个1），分组后的明文组和56位的密钥按位替代或交换的方法形成密文组。</p><p>关于加密流程，在看雪看到了一个很好的总结：<a href="https://bbs.pediy.com/thread-90593.htm" target="_blank" rel="external">DES加密算法图解</a>。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgDES%E5%8A%A0%E5%AF%86%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="加密流程"></p><p>上图中还要加上对64位明文的初始 <code>IP</code> 置换，这里再附上书上的加密流程：</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E5%8A%A0%E5%AF%86%E6%B5%81%E7%A8%8B3.jpg" alt="加密流程2"></p><p>两张结合起来，对 DES 会有更加清晰的了解。</p><h3 id="初始-IP-置换"><a href="#初始-IP-置换" class="headerlink" title="初始 IP 置换"></a>初始 IP 置换</h3><p>初始 <code>IP</code> 置换的目的是将输入的64位分组按位重新组合，并把输出分为Li、Ri两部分，每部分各长32位。</p><table><thead><tr><th style="text-align:center">58</th><th style="text-align:center">50</th><th style="text-align:center">42</th><th style="text-align:center">34</th><th style="text-align:center">26</th><th style="text-align:center">18</th><th style="text-align:center">10</th><th style="text-align:center">2</th></tr></thead><tbody><tr><td style="text-align:center">60</td><td style="text-align:center">52</td><td style="text-align:center">44</td><td style="text-align:center">36</td><td style="text-align:center">28</td><td style="text-align:center">20</td><td style="text-align:center">12</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">62</td><td style="text-align:center">54</td><td style="text-align:center">46</td><td style="text-align:center">38</td><td style="text-align:center">30</td><td style="text-align:center">22</td><td style="text-align:center">14</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">64</td><td style="text-align:center">56</td><td style="text-align:center">48</td><td style="text-align:center">40</td><td style="text-align:center">32</td><td style="text-align:center">24</td><td style="text-align:center">16</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">57</td><td style="text-align:center">49</td><td style="text-align:center">41</td><td style="text-align:center">33</td><td style="text-align:center">25</td><td style="text-align:center">17</td><td style="text-align:center">9</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">59</td><td style="text-align:center">51</td><td style="text-align:center">43</td><td style="text-align:center">35</td><td style="text-align:center">27</td><td style="text-align:center">19</td><td style="text-align:center">11</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">61</td><td style="text-align:center">53</td><td style="text-align:center">45</td><td style="text-align:center">37</td><td style="text-align:center">29</td><td style="text-align:center">21</td><td style="text-align:center">13</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">63</td><td style="text-align:center">55</td><td style="text-align:center">47</td><td style="text-align:center">39</td><td style="text-align:center">31</td><td style="text-align:center">23</td><td style="text-align:center">15</td><td style="text-align:center">7</td></tr></tbody></table><p>表中的数字代表新分组的第1位放原分组的第58位，第2位放到第50位…依此类推，新分组第64位放原分组的第7位的数据。置换后的数据分为 <code>Li</code> 和 <code>Ri</code> 两部分，<code>Li</code> 为新数据的左32位，<code>Ri</code> 为新数据的右32位。</p><h3 id="扩展置换-E"><a href="#扩展置换-E" class="headerlink" title="扩展置换 E"></a>扩展置换 E</h3><p>这个置换将 <code>Ri</code> 的由32位拓展成48位，以便之后与轮密钥进行异或操作。</p><table><thead><tr><th style="text-align:center">32</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th></tr></thead><tbody><tr><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">12</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">13</td><td style="text-align:center">14</td><td style="text-align:center">15</td><td style="text-align:center">16</td><td style="text-align:center">17</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">17</td><td style="text-align:center">18</td><td style="text-align:center">19</td><td style="text-align:center">20</td><td style="text-align:center">21</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">21</td><td style="text-align:center">22</td><td style="text-align:center">23</td><td style="text-align:center">24</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">24</td><td style="text-align:center">25</td><td style="text-align:center">26</td><td style="text-align:center">27</td><td style="text-align:center">28</td><td style="text-align:center">29</td></tr><tr><td style="text-align:center">28</td><td style="text-align:center">29</td><td style="text-align:center">30</td><td style="text-align:center">31</td><td style="text-align:center">32</td><td style="text-align:center">1</td></tr></tbody></table><h3 id="密钥调度"><a href="#密钥调度" class="headerlink" title="密钥调度"></a>密钥调度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">PC_1 = [<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">09</span>,</div><div class="line">        <span class="number">01</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</div><div class="line">        <span class="number">10</span>, <span class="number">02</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</div><div class="line">        <span class="number">19</span>, <span class="number">11</span>, <span class="number">03</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</div><div class="line">        <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</div><div class="line">        <span class="number">07</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</div><div class="line">        <span class="number">14</span>, <span class="number">06</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</div><div class="line">        <span class="number">21</span>, <span class="number">13</span>, <span class="number">05</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">04</span>]</div><div class="line"></div><div class="line">PC_2 = [<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">01</span>, <span class="number">05</span>,</div><div class="line">        <span class="number">03</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">06</span>, <span class="number">21</span>, <span class="number">10</span>,</div><div class="line">        <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">04</span>, <span class="number">26</span>, <span class="number">08</span>,</div><div class="line">        <span class="number">16</span>, <span class="number">07</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">02</span>,</div><div class="line">        <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>,</div><div class="line">        <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</div><div class="line">        <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>,</div><div class="line">        <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>]</div></pre></td></tr></table></figure><p>密钥调度算法是将一开始给定的主密钥进行一定变换，生成16个48位的轮密钥。</p><ul><li>首先经过 <code>PC-1</code> 变换，不考虑主密钥每个字节的第8位，将 DES 的密钥由64位减至56位，每个字节的第8位作为奇偶校验位。</li><li>接下来将得到的56位的密钥分成两部分，每部分为28位。</li><li>根据所在的轮数所要求的左移次数，对所给两部分密钥进行左移操作后合并为56位密钥。</li><li>上一步结束后，经过 <code>PC-2</code> 变换，将56位密钥压缩为48位，返回生成的轮密钥。</li><li>重复十六轮，完成所有的轮密钥生成。</li></ul><table><thead><tr><th style="text-align:center">轮数</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th><th style="text-align:center">11</th><th style="text-align:center">12</th><th style="text-align:center">13</th><th style="text-align:center">14</th><th style="text-align:center">15</th><th style="text-align:center">16</th></tr></thead><tbody><tr><td style="text-align:center">次数</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table><h3 id="S-盒替换"><a href="#S-盒替换" class="headerlink" title="S-盒替换"></a>S-盒替换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 构建8个S-盒模型</span></div><div class="line">S1 = [[<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>],</div><div class="line">      [<span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>],</div><div class="line">      [<span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>],</div><div class="line">      [<span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>]]</div><div class="line"></div><div class="line">S2 = [[<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>],</div><div class="line">      [<span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>],</div><div class="line">      [<span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>]]</div><div class="line"></div><div class="line">S3 = [[<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>],</div><div class="line">      [<span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>]]</div><div class="line"></div><div class="line">S4 = [[<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>],</div><div class="line">      [<span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>],</div><div class="line">      [<span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>]]</div><div class="line"></div><div class="line">S5 = [[<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>],</div><div class="line">      [<span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>],</div><div class="line">      [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>],</div><div class="line">      [<span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]]</div><div class="line"></div><div class="line">S6 = [[<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>],</div><div class="line">      [<span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>],</div><div class="line">      [<span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>],</div><div class="line">      [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>]]</div><div class="line"></div><div class="line">S7 = [[<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>],</div><div class="line">      [<span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>],</div><div class="line">      [<span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]]</div><div class="line"></div><div class="line">S8 = [[<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>],</div><div class="line">      [<span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>],</div><div class="line">      [<span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>],</div><div class="line">      [<span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>]]</div><div class="line"></div><div class="line"><span class="comment"># S-盒</span></div><div class="line">S = [S1, S2, S3, S4, S5, S6, S7, S8]</div></pre></td></tr></table></figure><p>密钥调度生成的当前48位轮密钥与经过扩展置换 E 后的 Ri 异或以后就会得到48位数据，将这个48位数据送入 S-盒 中，进行替代运算。</p><p>替代运算由8个不同的 S 盒完成，每个 S-盒 有6位输入4位输出。48位输入数据将分为8个6位的分组，一个分组对应一个 S 盒，对应的 S 盒对各小组进行替代操作。</p><p>例如，假设 <code>S盒-8</code> 的输入为110011，第1位和第6位组合为11，对应于 <code>S盒-8</code> 的第3行；第2位到第5位为1001，对应于 <code>S盒-8</code> 的第9列。<code>S盒-8</code> 的第3行第9列的数字为12，因此用12的二进制表示1100来代替110011。要注意的是，S-盒 的行列计数都是从0开始的。</p><h3 id="P-盒置换"><a href="#P-盒置换" class="headerlink" title="P-盒置换"></a>P-盒置换</h3><p>S-盒 代替运算的32位输出按照 P-盒 进行置换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">P = [<span class="number">16</span>, <span class="number">07</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</div><div class="line">     <span class="number">01</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">05</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</div><div class="line">     <span class="number">02</span>, <span class="number">08</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">03</span>, <span class="number">09</span>,</div><div class="line">     <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">06</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">04</span>, <span class="number">25</span>]</div></pre></td></tr></table></figure><p>在最后，P-盒 置换的结果与最初的64位分组左半部分32位 <code>Li</code> 异或，然后产生一个新的分组（左32位为最初的 Ri，右32位为 P-盒 与最初的 Li 异或的结果），接着开始新的一轮。</p><h3 id="IP-1-逆置换"><a href="#IP-1-逆置换" class="headerlink" title="IP-1 逆置换"></a>IP<sup>-1</sup> 逆置换</h3><p>经过以上十六轮的变换后，最终迎来了最后的 IP<sup>-1</sup> 逆置换。</p><table><thead><tr><th style="text-align:center">40</th><th style="text-align:center">8</th><th style="text-align:center">48</th><th style="text-align:center">16</th><th style="text-align:center">56</th><th style="text-align:center">24</th><th style="text-align:center">64</th><th style="text-align:center">32</th></tr></thead><tbody><tr><td style="text-align:center">39</td><td style="text-align:center">7</td><td style="text-align:center">47</td><td style="text-align:center">15</td><td style="text-align:center">55</td><td style="text-align:center">23</td><td style="text-align:center">63</td><td style="text-align:center">31</td></tr><tr><td style="text-align:center">38</td><td style="text-align:center">6</td><td style="text-align:center">46</td><td style="text-align:center">14</td><td style="text-align:center">54</td><td style="text-align:center">22</td><td style="text-align:center">62</td><td style="text-align:center">30</td></tr><tr><td style="text-align:center">37</td><td style="text-align:center">5</td><td style="text-align:center">45</td><td style="text-align:center">13</td><td style="text-align:center">53</td><td style="text-align:center">21</td><td style="text-align:center">61</td><td style="text-align:center">29</td></tr><tr><td style="text-align:center">36</td><td style="text-align:center">4</td><td style="text-align:center">44</td><td style="text-align:center">12</td><td style="text-align:center">52</td><td style="text-align:center">20</td><td style="text-align:center">60</td><td style="text-align:center">28</td></tr><tr><td style="text-align:center">35</td><td style="text-align:center">3</td><td style="text-align:center">43</td><td style="text-align:center">11</td><td style="text-align:center">51</td><td style="text-align:center">19</td><td style="text-align:center">59</td><td style="text-align:center">27</td></tr><tr><td style="text-align:center">34</td><td style="text-align:center">2</td><td style="text-align:center">42</td><td style="text-align:center">10</td><td style="text-align:center">50</td><td style="text-align:center">18</td><td style="text-align:center">58</td><td style="text-align:center">26</td></tr><tr><td style="text-align:center">33</td><td style="text-align:center">1</td><td style="text-align:center">41</td><td style="text-align:center">9</td><td style="text-align:center">49</td><td style="text-align:center">17</td><td style="text-align:center">57</td><td style="text-align:center">25</td></tr></tbody></table><p>以上十六轮最后得到的64位结果，要先将左右32位两部分交换后再进行 IP<sup>-1</sup> 逆置换，才能得到密文。</p><h3 id="Python-实现"><a href="#Python-实现" class="headerlink" title="Python 实现"></a>Python 实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"><span class="comment"># operation.py</span></div><div class="line">__author__ = <span class="string">'Sliver'</span></div><div class="line"></div><div class="line">__all__ = [<span class="string">'IpPermutation'</span>, <span class="string">'InverseIpPermutation'</span>, <span class="string">'CreateSubKeys'</span>,</div><div class="line">           <span class="string">'ExtendPermutation'</span>, <span class="string">'SBoxPermutation'</span>, <span class="string">'PBoxPermutation'</span>, </div><div class="line">           <span class="string">'xor'</span>, <span class="string">'string2bin'</span>, <span class="string">'bin2string'</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">IpPermutation</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''初始置换IP：将64位输入按 IP 规则置换后返回64位结果。'''</span></div><div class="line">    IP = [<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</div><div class="line">          <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</div><div class="line">          <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</div><div class="line">          <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</div><div class="line">          <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>,</div><div class="line">          <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</div><div class="line">          <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</div><div class="line">          <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [text[IP[i] - <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">InverseIpPermutation</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''逆初始置换IP^-1：将64位输入按 IP^-1 规则置换后返回64位结果。'''</span></div><div class="line">    INVERSE_IP = [<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</div><div class="line">                  <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</div><div class="line">                  <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</div><div class="line">                  <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</div><div class="line">                  <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</div><div class="line">                  <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</div><div class="line">                  <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</div><div class="line">                  <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [text[INVERSE_IP[i] - <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">64</span>)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">ExtendPermutation</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''扩展置换E：将32位输入按 E 规则置换后拓展为48位结果。'''</span></div><div class="line">    E = [<span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</div><div class="line">         <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</div><div class="line">         <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</div><div class="line">         <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</div><div class="line">         <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</div><div class="line">         <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</div><div class="line">         <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</div><div class="line">         <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [text[E[i] - <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 密钥调度所需的 PC-1 变换和 PC-2 变换</span></div><div class="line">PC_1 = [<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</div><div class="line">        <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</div><div class="line">        <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</div><div class="line">        <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</div><div class="line">        <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</div><div class="line">        <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</div><div class="line">        <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</div><div class="line">        <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>]</div><div class="line"></div><div class="line">PC_2 = [<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>,</div><div class="line">        <span class="number">3</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>,</div><div class="line">        <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">26</span>, <span class="number">8</span>,</div><div class="line">        <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</div><div class="line">        <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>,</div><div class="line">        <span class="number">30</span>, <span class="number">40</span>, <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>,</div><div class="line">        <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>, <span class="number">34</span>, <span class="number">53</span>,</div><div class="line">        <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shift</span><span class="params">(text, movetimes)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    对给定的序列，左移指定次数，并返回移动后的序列。</span></div><div class="line"><span class="string">    如：[1, 2, 3, 4] &amp; movetimes = 1 -&gt; [2, 3, 4, 1]。</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    <span class="keyword">return</span> text[movetimes:] + text[:movetimes]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CreateSubKeys</span><span class="params">(primarykey)</span>:</span></div><div class="line">    <span class="string">'''根据主密钥，生成十六个轮密钥。'''</span></div><div class="line">    result = []</div><div class="line">    key56 = [primarykey[PC_1[i] - <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">56</span>)]</div><div class="line">    MOVETIMES = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</div><div class="line"></div><div class="line">    <span class="comment"># 进行16轮子密钥生成</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</div><div class="line">        <span class="comment"># 每28位为一部分，分别进行循环左移</span></div><div class="line">        key28left = shift(key56[:<span class="number">28</span>], MOVETIMES[i])</div><div class="line">        key28right = shift(key56[<span class="number">28</span>:], MOVETIMES[i])</div><div class="line"></div><div class="line">        key56 = key28left + key28right</div><div class="line">        <span class="comment"># 对56位密钥进行 PC-2 变换，将其压缩为48位</span></div><div class="line">        key48 = [key56[PC_2[i] - <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>)]</div><div class="line"></div><div class="line">        result.append(key48)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 构建8个S-盒模型</span></div><div class="line">S1 = [[<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>],</div><div class="line">      [<span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>],</div><div class="line">      [<span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>],</div><div class="line">      [<span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>]]</div><div class="line"></div><div class="line">S2 = [[<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>],</div><div class="line">      [<span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>],</div><div class="line">      [<span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>]]</div><div class="line"></div><div class="line">S3 = [[<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>],</div><div class="line">      [<span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>]]</div><div class="line"></div><div class="line">S4 = [[<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>],</div><div class="line">      [<span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>],</div><div class="line">      [<span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>]]</div><div class="line"></div><div class="line">S5 = [[<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>],</div><div class="line">      [<span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>],</div><div class="line">      [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>],</div><div class="line">      [<span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>]]</div><div class="line"></div><div class="line">S6 = [[<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>],</div><div class="line">      [<span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>],</div><div class="line">      [<span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>],</div><div class="line">      [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>]]</div><div class="line"></div><div class="line">S7 = [[<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>],</div><div class="line">      [<span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>],</div><div class="line">      [<span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>],</div><div class="line">      [<span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>]]</div><div class="line"></div><div class="line">S8 = [[<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>],</div><div class="line">      [<span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>],</div><div class="line">      [<span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>],</div><div class="line">      [<span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>]]</div><div class="line"></div><div class="line"><span class="comment"># S-盒</span></div><div class="line">S_BOX = [S1, S2, S3, S4, S5, S6, S7, S8]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dex2bin4</span><span class="params">(dex)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    将（不超过15的）十进制数转化成4位二进制字符串。</span></div><div class="line"><span class="string">    如：13 -&gt; '1101'。</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    temp = bin(dex).replace(<span class="string">'0b'</span>, <span class="string">''</span>)</div><div class="line">    length = len(temp)</div><div class="line">    addzero = <span class="string">'0'</span> * (<span class="number">4</span> - length)  <span class="comment"># 不足四位的在前面补0</span></div><div class="line">    <span class="keyword">return</span> addzero + temp</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dex2bin8</span><span class="params">(dex)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    将十进制数转化成8位二进制字符串。</span></div><div class="line"><span class="string">    如：90 -&gt; '01011010'</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    temp = bin(dex).replace(<span class="string">'0b'</span>, <span class="string">''</span>)</div><div class="line">    length = len(temp)</div><div class="line">    addzero = <span class="string">'0'</span> * (<span class="number">8</span> - length)  <span class="comment"># 不足四位的在前面补0</span></div><div class="line">    <span class="keyword">return</span> addzero + temp</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">SBoxPermutation</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''S-盒置换：将48位输入均分成长度为6的8个小组，每个小组按顺序进入相应的S盒各得到4位输出，返回合并后的32位结果。'''</span></div><div class="line">    result = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">8</span>):</div><div class="line">        temp = text[i * <span class="number">6</span>:i * <span class="number">6</span> + <span class="number">6</span>]</div><div class="line">        row = int(str(temp[<span class="number">0</span>]) + str(temp[<span class="number">-1</span>]), <span class="number">2</span>)</div><div class="line">        column = int(str(temp[<span class="number">1</span>]) + str(temp[<span class="number">2</span>]) + str(temp[<span class="number">3</span>]) + str(temp[<span class="number">4</span>]), <span class="number">2</span>)</div><div class="line">        letter = S_BOX[i][row][column]</div><div class="line">        result.append(dex2bin4(letter))</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [int(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">''</span>.join(result)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PBoxPermutation</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''P-盒置换：将32位输入按 P 规则置换后返回32位结果。'''</span></div><div class="line">    P = [<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</div><div class="line">         <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</div><div class="line">         <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</div><div class="line">         <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> [text[P[i] - <span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span><span class="params">(m, n)</span>:</span></div><div class="line">    <span class="string">'''对两个序列进行各位异或操作，并返回所得结果。'''</span></div><div class="line">    <span class="keyword">return</span> [a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(m, n)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">char2bin</span><span class="params">(char)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    返回一个（ASCII）字符的8位二进制表示。</span></div><div class="line"><span class="string">    如：'A' -&gt; '01000001'。</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    b = bin(ord(char)).replace(<span class="string">'0b'</span>, <span class="string">''</span>)</div><div class="line">    space = <span class="number">8</span> - len(b)</div><div class="line">    <span class="keyword">return</span> <span class="string">'0'</span> * space + b</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">string2bin</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    将含有8个字符的字符串转化成包含64位二进制数字的列表。</span></div><div class="line"><span class="string">    如：'ABCDEFGH' -&gt; [0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,</span></div><div class="line"><span class="string">                      0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0,</span></div><div class="line"><span class="string">                      0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0,</span></div><div class="line"><span class="string">                      0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0]。</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    <span class="keyword">if</span> len(text) != <span class="number">8</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    temp = [char2bin(char) <span class="keyword">for</span> char <span class="keyword">in</span> text]</div><div class="line">    <span class="keyword">return</span> [int(number) <span class="keyword">for</span> number <span class="keyword">in</span> <span class="string">''</span>.join(temp)]</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bin2string</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    将包含64位二进制数字的列表转化成含有8位字符的字符串。</span></div><div class="line"><span class="string">    如：[0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0,</span></div><div class="line"><span class="string">        0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0,  -&gt; 'ABCDEFGH'。</span></div><div class="line"><span class="string">        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0,</span></div><div class="line"><span class="string">        0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0]</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    <span class="keyword">if</span> len(text) != <span class="number">64</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    text = [str(number) <span class="keyword">for</span> number <span class="keyword">in</span> text]  <span class="comment"># 先将列表里的 int 类型转化为 str 类型</span></div><div class="line">    result = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</div><div class="line">        binstring = <span class="string">''</span>.join(text[i * <span class="number">8</span>:i * <span class="number">8</span> + <span class="number">8</span>])</div><div class="line">        result.append(chr(int(binstring, <span class="number">2</span>)))</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(result)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(dex2bin4(<span class="number">15</span>))</div><div class="line">    print(dex2bin4(<span class="number">1</span>))</div><div class="line"></div><div class="line">    print(shift([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">2</span>))</div><div class="line">    print(shift([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], <span class="number">3</span>))</div><div class="line"></div><div class="line">    print(char2bin(<span class="string">'A'</span>))</div><div class="line">    print(char2bin(<span class="string">'a'</span>))</div><div class="line"></div><div class="line">    print(string2bin(<span class="string">'ABCDEFGH'</span>))</div><div class="line">    print(len(string2bin(<span class="string">'ABCDEFGH'</span>)))</div><div class="line"></div><div class="line">    test = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</div><div class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</div><div class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>,</div><div class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</div><div class="line"></div><div class="line">    print(bin2string(test))</div></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></div><div class="line"><span class="comment"># DES.py</span></div><div class="line">__author__ = <span class="string">'Sliver'</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> operation <span class="keyword">import</span> IpPermutation, InverseIpPermutation, ExtendPermutation, \</div><div class="line">                      CreateSubKeys, SBoxPermutation, PBoxPermutation, \</div><div class="line">                      string2bin, bin2string, xor</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cipher</span><span class="params">(message, key, mode=<span class="string">'encrypt'</span>)</span>:</span></div><div class="line">    message = string2bin(message)</div><div class="line">    key = string2bin(key)</div><div class="line"></div><div class="line">    subkeys = CreateSubKeys(key) <span class="keyword">if</span> mode == <span class="string">'encrypt'</span> <span class="keyword">else</span> CreateSubKeys(key)[::<span class="number">-1</span>]</div><div class="line">    text = IpPermutation(message)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>):</div><div class="line">        l, r = text[:<span class="number">32</span>], text[<span class="number">32</span>:]</div><div class="line">        r_extend = ExtendPermutation(r)</div><div class="line">        xor1 = xor(r_extend, subkeys[i])</div><div class="line">        s_box_result = SBoxPermutation(xor1)</div><div class="line">        p_box_result = PBoxPermutation(s_box_result)</div><div class="line">        xor2 = xor(l, p_box_result)</div><div class="line">        text = r + xor2</div><div class="line"></div><div class="line">    text = text[<span class="number">32</span>:] + text[:<span class="number">32</span>]</div><div class="line">    <span class="keyword">return</span> bin2string(InverseIpPermutation(text))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(string)</span>:</span></div><div class="line">    mod = len(string) % <span class="number">8</span></div><div class="line">    space = <span class="number">8</span> - mod</div><div class="line">    <span class="keyword">return</span> string + bytes([<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(space)]).decode(<span class="string">'utf-8'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DES</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, message, key)</span>:</span></div><div class="line">        self.message = message</div><div class="line">        self.key = key</div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ciphertext</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__encrypt()</div><div class="line">    </div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">plaintext</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.__decrypt()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__encrypt</span><span class="params">(self)</span>:</span></div><div class="line">        output = []</div><div class="line">        length = len(self.message)</div><div class="line">        times, mod = length // <span class="number">8</span>, length % <span class="number">8</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> mod:</div><div class="line">            self.message = fill(self.message)</div><div class="line">            times += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(times):</div><div class="line">            result = cipher(self.message[i * <span class="number">8</span>:i * <span class="number">8</span> + <span class="number">8</span>], self.key, <span class="string">'encrypt'</span>)</div><div class="line">            output.append(result)</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(output)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__decrypt</span><span class="params">(self)</span>:</span></div><div class="line">        output = []</div><div class="line">        length = len(self.message)</div><div class="line">        times, mod = length // <span class="number">8</span>, length % <span class="number">8</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> times:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> mod:</div><div class="line">            self.message = fill(self.message)</div><div class="line">            length += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(times):</div><div class="line">            result = cipher(self.message[i * <span class="number">8</span>:i * <span class="number">8</span> + <span class="number">8</span>], self.key, <span class="string">'decrypt'</span>)</div><div class="line">            output.append(result)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(output).rstrip(<span class="string">b'\x00'</span>.decode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(cipher(<span class="string">'I LOVE Y'</span>, <span class="string">'ABCDEFGH'</span>))</div><div class="line">    print(cipher([<span class="string">'¯'</span>, <span class="string">'Ý'</span>, <span class="string">'\x0f'</span>, <span class="string">'\x90'</span>, <span class="string">'*'</span>, <span class="string">'d'</span>, <span class="string">'Ú'</span>, <span class="string">'É'</span>], <span class="string">'ABCDEFGH'</span>, mode=<span class="string">'decrypt'</span>))</div><div class="line"></div><div class="line">    cipher1 = DES(<span class="string">'Sliver Love Ariel.'</span>, <span class="string">'ABCDEFGH'</span>)</div><div class="line">    print(cipher1.ciphertext)</div><div class="line">    cipher2 = DES(cipher1.ciphertext, <span class="string">'ABCDEFGH'</span>)</div><div class="line">    print(cipher2.plaintext)</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">¯Ý*dÚÉ</div><div class="line">I LOVE Y</div><div class="line">³$ý»;N«Ì¥[æTÕõ·Þ<span class="number">2</span>Aî</div><div class="line">Sliver Love Ariel.</div></pre></td></tr></table></figure><p><strong>加密时对明文没有数量要求，因为在加密过程中会进行填充操作，但是密钥一定要为8字节64位字符。代码没有对中文等字符进行相应加密操作，只能对英文等 ASCII 码编码的字符进行加解密操作。</strong></p><p>附上 github 地址：<a href="https://github.com/SliverYou/DES-Cipher" target="_blank" rel="external">https://github.com/SliverYou/DES-Cipher</a></p><h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><blockquote><p>高级加密标准（英语：Advanced Encryption Standard，缩写：AES），在密码学中又称 Rijndael 加密法，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的 DES，已经被多方分析且广为全世界所使用。经过五年的甄选流程，高级加密标准由美国国家标准与技术研究院（NIST）于2001年11月26日发布于 FIPS PUB 197，并在2002年5月26日成为有效的标准。2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。</p></blockquote><p>在AES标准规范中，分组长度只能是128位，也就是说，每个分组为16个字节（每个字节8位）。密钥的长度可以使用128位、192位或256位。不同的密钥，它的加密轮数也是不一样的：</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgA9521F67ABB50C64648867F2375F9742.jpg" alt="加密轮数"></p><p>AES 算法加密具体流程如下图：</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgAES%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3.jpg" alt="AES算法图解"></p><p>在这里，只考虑密钥为128位时的 AES 加解密情况。</p><p>本来想继续写下去，不过看到了一篇特别详细具体的博客，就还是引个链接吧：<a href="https://blog.csdn.net/qq_28205153/article/details/55798628" target="_blank" rel="external">https://blog.csdn.net/qq_28205153/article/details/55798628</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“今天来说说流密码。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="教程" scheme="http://home.junyouxiaowu.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
      <category term="Cryptography" scheme="http://home.junyouxiaowu.top/tags/Cryptography/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络学习笔记</title>
    <link href="http://home.junyouxiaowu.top/2018/03/21/computer-networking-01/"/>
    <id>http://home.junyouxiaowu.top/2018/03/21/computer-networking-01/</id>
    <published>2018-03-21T11:38:23.000Z</published>
    <updated>2018-03-31T07:30:11.828Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“好好学习，天天向上。”</p></blockquote><a id="more"></a><h2 id="计算机网络和因特网描述"><a href="#计算机网络和因特网描述" class="headerlink" title="计算机网络和因特网描述"></a>计算机网络和因特网描述</h2><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote1.jpg" alt="note1"></p><h2 id="具体组成描述"><a href="#具体组成描述" class="headerlink" title="具体组成描述"></a>具体组成描述</h2><h3 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h3><ul><li>因特网是一个世界范围的计算机网络，即它是一个互联了遍及全世界的数以亿计的计算机设备的网络。</li><li>所有与因特网相连的设备被称作主机（<code>host</code>）或者端系统（<code>end system</code>）。</li></ul><h3 id="端系统"><a href="#端系统" class="headerlink" title="端系统"></a>端系统</h3><ul><li>端系统通过通信链路（<code>communication link</code>）和分组交换机（<code>packet switch</code>）连接到一起。</li><li>链路的传输速率以 <code>bit/s</code> 或者 <code>bps</code> 度量。</li><li>当一台端系统要向另一台端系统发送数据时，发送端系统将数据分段，并为每段加上首部字节。由此形成的信息包用计算机网络的术语来说称为分组（<code>packet</code>）。这些分组通过网络发送到目的端系统，在那里被装配成初始数据。</li></ul><h3 id="分组交换机"><a href="#分组交换机" class="headerlink" title="分组交换机"></a>分组交换机</h3><ul><li>分组交换机从它的一条入通信链路接收到达的分组，并从它的一条出通信链路转发该<br>分组。</li><li>两种最著名的分组交换机是路由器（<code>router</code>）和链路层交换机（<code>link-layer switch</code>）。这两种类型的交换机朝着最终目的地转发分组。</li><li>链路层交换机通常用于接人网中，而路由器通常用于网络核心中。</li><li>从发送端系统到接收端系统，一个分组所经历的一系列通信链路和分组交换机称为通过该网络的路径（<code>route 或 path</code>）。</li></ul><h3 id="因特网服务提供商"><a href="#因特网服务提供商" class="headerlink" title="因特网服务提供商"></a>因特网服务提供商</h3><ul><li>端系统通过因特网服务提供商（<code>Internet Service Provider，ISP</code>）接入因特网。</li><li>每个 ISP 是一个由多个分组交换机和多段通信链路组成的网络。它们为端系统提供不同类型的网络接入，也为内容提供者提供因特网接入服务。</li><li>因特网就是将端系统彼此互联，因此为端系统提供接入的 ISP 也必须互联。（<code>底层 ISP 通过高层 ISP 互联起来、各个 ISP 独立管理并各自运行着 IP 协议。</code>）</li></ul><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ul><li>各个因特网部件都要运行一系列协议 <code>protocol</code>，这些协议控制着因特网中信息的接收与发送。</li><li>TCP 和 IP 是因特网中两个最重要的协议，统称为 <code>TCP/IP</code>。（<code>Transmission Control Protocal，传输控制协议；Internet Protocal，网络协议</code>）</li><li>IP 协议定义了在路由器和端系统之间发送和接收的分组格式。</li></ul><h3 id="IETF-和-RFC"><a href="#IETF-和-RFC" class="headerlink" title="IETF 和 RFC"></a>IETF 和 RFC</h3><ul><li>为了方便网络资源的共享，就需要在各个 ISP 中建立一个统一的标准，现在的因特网标准（<code>Internet standard</code>）由因特网工程任务组（<code>Internet Engineering Task Force，IETF</code>）研发。</li><li>IETF 的标准文档称为请求评论（<code>Request For Comment，RFC</code>），该文档技术性很强，并且相当详细。RFC 文档定义了 TCP、IP、HTTP 和 SMTP 等协议，目前已经有将近6000多个 RFC。</li></ul><h2 id="服务描述"><a href="#服务描述" class="headerlink" title="服务描述"></a>服务描述</h2><p>描述因特网大致有两个角度，一个是从具体组成部件来描述，另一个是从为应用程序特供的服务基础设施的角度即使用因特网的应用程序来描述。</p><h3 id="应用程序"><a href="#应用程序" class="headerlink" title="应用程序"></a>应用程序</h3><ul><li>电子邮件、Web 冲浪、即时讯息、社交网络、IP 语音（VoIP）、流式视频、分布式游戏、对等（<code>peer-to-peer，P2P</code>）文件共享、因特网电视、远程注册等。这些应用程序成为分布式应用程序（<code>distributed application</code>），因为它们设计多台相互交换数据的端系统。</li><li>因特网应用程序运行在端系统上，即它们并不运行在网络核心中的分组交换机中。尽管分组交互机促进端系统之间的数据交换，但它们并不关心作为数据的源或宿的应用程序。</li></ul><h3 id="应用程序编程接口"><a href="#应用程序编程接口" class="headerlink" title="应用程序编程接口"></a>应用程序编程接口</h3><ul><li>与因特网相连的端系统提供了因特网应用程序编程接口（<code>Application Programming Interface，API</code>），该 API 规定了运行在一个端系统上的软件请求因特网基础设施向运行在另一个端系统上的特定目的软件交付数据的方式。</li><li>因特网 API 是一套发送软件必须遵循的规则集合，因此因特网能够将数据交付给目的地。</li></ul><h2 id="什么是协议？"><a href="#什么是协议？" class="headerlink" title="什么是协议？"></a>什么是协议？</h2><p>协议可以理解为一系列约定俗成的动作，就像人类活动中“问时间”这个行为需要遵循一定的规则一样，甲方问“几点了”，乙方得到请求，会答复现在几点钟；如果甲方问乙方今天天气怎么样，他一定不会返回现在是几点钟，而是今天天气怎么样；如果甲方用乙方听不懂的方言来询问乙方，那乙方可能会毫无反应，因为他听不懂。所以，协议具有一定的规则，需要双方去遵守。放在计算机网络中，互相通信的两个端系统不具有人类拥有的察言观色的能力，它只会对请求采取相应的回应。通信双方之间报文的接收和发送所采取的动作、报文的格式与次序同样需要由协议加以约束。所以，可以得到两个结论：</p><ul><li>在因特网中，凡是涉及两个或多个远程通信实体的所有活动都受协议的制约。</li><li>一个协议定义了在两个或多个通信实体之间交换的报文格式和次序，以及报文发送和/或接收一条报文或其他事件所采取的动作。</li></ul><h2 id="网络边缘"><a href="#网络边缘" class="headerlink" title="网络边缘"></a>网络边缘</h2><ul><li>通常把与因特网相连的计算机和其他设备称为端系统。因为它们位于网络边缘（<code>The Network Edge</code>），故而称为端系统。</li><li>端系统也称为主机，因为它们可以运行应用程序，即 <code>主机 = 端系统</code>。主机有时候又可以进一步划分为两类：客户端（<code>slient</code>）和服务器（<code>server</code>）。客户端非正式地等同于桌面 PC、智能手机等。服务器非正式地等同于更为强大的机器，拥有存储 Web 页面、流视频等。</li><li>多个服务器聚集在一起，就形成了数据中心（<code>data center</code>），它们共同协作，可以更好地为客户端提供服务。</li></ul><h2 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h2><p>接入网（<code>acess network</code>），这里是指将端系统连接到其边缘路由器（<code>edge router</code>）的物理链路。边缘路由器是端系统到任何其他远程端系统路径上的第一台路由器。</p><h3 id="家庭接入"><a href="#家庭接入" class="headerlink" title="家庭接入"></a>家庭接入</h3><p>宽带住宅接入有两种最流行的类型：数字用户线（<code>Digital Subscriber Line，DSL</code>）和电缆（<code>cable</code>）。</p><h4 id="DSL"><a href="#DSL" class="headerlink" title="DSL"></a>DSL</h4><ul><li>DSL：住户从本地电话公司处获得 DSL 因特网接入，所以 ISP 是本地电话公司。</li></ul><p>数字用户线同时承载了数据和传统的电话信号，它们编码为不同的频率：</p><ul><li>高速下行信道，位于 50kHz 到 1MHz 频段;</li><li>中速上行信道，位于 4kHz 到 50kHz 频段;</li><li>普通的双向电话信道，位于 0 到 4kHz 频段。</li></ul><p>这种方法使单根 DSL 线路看起来就像有3根单独的线路，因此一个电话呼叫和一个因特网连接能够同时共享DSL 链路（频分复用技术）。在用户一侧，一个分频器把到达家庭的数据信号和电话信号分隔开来，并将数据信号转发给 DSL 调制解调器。在本地电话公司一侧，在本地中心局中，DSLAM（用户线接入复用器）把数据和电话信号分隔开，并将数据送往因特网中。数百甚至上千个家庭与同一个 DSLAM 相连。同时，DSL 标准定义了 12Mbps 下行和 1.8Mbps 上行传输速率。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote2.jpg" alt="note2"></p><h4 id="电缆"><a href="#电缆" class="headerlink" title="电缆"></a>电缆</h4><ul><li>电缆因特网接入（<code>cable Internet acess</code>）：住户从特供有限电视的公司获得了电缆因特网接入，所以 ISP 是本地电视公司。</li></ul><p>光缆将电缆头端连接到地区枢纽，从这里使用传统的同轴电缆到达各家各户和公寓。每个地区枢纽通常支持500~5000个家庭。因为这个系统中应用了光纤和同轴电缆，所以它经常被称为混合光纤同轴（<code>Hybrid Fiber Coax，HFC</code>）。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote3.jpg" alt="note3"></p><ul><li>电缆因特网接人需要特殊的调制解调器，称为电缆调制解调器（<code>cable modem</code>）。</li><li>电缆调制解调器通常是一个外部设备，通过一个以太网端口连接到家庭 PC。 </li><li>在电缆头端，电缆调制解调器端接系统（<code>Cable Modem Termination System，CMTS</code>）起到如同 DSL 网络的 DSLAM 类似的功能，即将来自许多下行家庭中的电缆调制解调器发送的模拟信号转换回数字形式。</li><li>电缆调制解调器将 HFC 网络划分为下行和上行两个信道，并且接人通常是不对称的。它拥有高达 42.8 Mbps 的下行速率和高达 30.7 Mbps 的上行速率。</li><li>电缆因特网接入的一个重要特征是共享广播媒体，即共享上行和下行两个信道。</li></ul><h4 id="FTTH"><a href="#FTTH" class="headerlink" title="FTTH"></a>FTTH</h4><ul><li>光纤到户（<code>Fiber To The Home，FTTH</code>）：从本地中心局直接到家庭特供了一条光纤路径。</li></ul><p>光纤分布方案：</p><ol><li>最简单的光纤分布网络称为直接光纤，从本地中心局到每户设置一根光纤。</li><li>更为一般的是，从中心局出来的每根光纤实际上由许多家庭共享，直到相对接近这些家庭的位置，该光纤才分成每户一根光纤。</li></ol><p>光纤分布体系结构: </p><ol><li>主动光纤网络（<code>Active Optical Network，AON</code>）。</li><li>被动光纤网络（<code>Passive Optical Network，PON</code>）。</li></ol><ul><li>AON 基本上就是交换因特网，PON 利用分布方案2，将多个家庭集结在一个光纤分配器控制的共享光纤上，并将发送到分配器的分组在分配器处复制，再统一发送到本地电话和公司中心局中的光纤链路端接器（<code>Optical Line Terminator，OLT</code>）。</li><li>FTTH 有潜力提供每秒千兆比特范围的因特网接入速率。</li></ul><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote4.jpg" alt="note4"></p><h4 id="拨号和卫星"><a href="#拨号和卫星" class="headerlink" title="拨号和卫星"></a>拨号和卫星</h4><p>在一些不发达的地方，如乡村环境，能够使用卫星链路以超过 1Mbps 的速率与因特网相连。也可使用传统电话线的拨号来进行连接，只是它的速率只有 56kbps。</p><h3 id="企业（和家庭）接入"><a href="#企业（和家庭）接入" class="headerlink" title="企业（和家庭）接入"></a>企业（和家庭）接入</h3><ul><li>在公司和大学校园以及在越来越多的家庭环境中，通常是用局域网（<code>LAN</code>）将端用户连接到边缘路由器。而以太网到目前为止是当前公司、大学和家庭网络中最为流行的接入技术。</li><li>使用以太网接入，用户通常以 100Mbps 速率接入以太网交换机，而服务器可能具有 1Gbps 甚至 10Gbps 的接入速率。</li><li>一个无线 LAN 用户通常必须位于接入点的几十米范围内。</li><li>基于 IEEE 802.11 技术的无线 LAN 接入，更为通俗得称为 WiFi，目前几乎无所不在。</li></ul><h3 id="广域无线网接入：3G-和-LTE"><a href="#广域无线网接入：3G-和-LTE" class="headerlink" title="广域无线网接入：3G 和 LTE"></a>广域无线网接入：3G 和 LTE</h3><ul><li>iPhone、黑莓和安卓等设备越来越多地用来在移动中发送邮件、Web 冲浪、推特和下载音乐。这些设备应用了与移动电话相同的基础设施，通过蜂窝网提供商运营的基站来发送接收分组。与 WiFi 不同的是，一个用户仅需要位于基站的数万米（而不是几十米）范围内，即可接入互联网。</li><li>电信公司已经在所谓第三代（<code>3G</code>）无线技术中进行了大量投资，3G 为分组交换广域无线因特网接人提供了超过 1Mbps 的速率。甚至更高速率的广域接人技术及第四代（<code>4G</code>）广域无线网络已经在部署中。</li><li>LTE（Long-Term Evolution）来源于 3G 技术，它能够取得超过 10Mbps 的速率。</li></ul><h2 id="物理媒体"><a href="#物理媒体" class="headerlink" title="物理媒体"></a>物理媒体</h2><p>从一个端系统到另一个端系统，一个比特需要不断的传输和接收，在这过程中，需要跨越一种物理媒体来传播该比特。</p><p>物理媒体分为两类</p><ol><li>导引型媒体</li><li>非导引型媒体</li></ol><p>具体物理媒体：</p><ul><li>双绞铜线：目前局域网中的双绞线的数据速率从 10Mbps 到 10Gbps 不等。</li><li>同轴电缆：提供数十 Mbps 速率的因特网接入。</li><li>光纤：传输速率高达数十甚至数百 Gbps 的传输速率。</li><li>陆地无线电信道：不需要安装物理线路，具有穿墙、长距离通信的能力。</li><li>卫星无线电信道：能以数百 Mbps 速率运行在某些无法使用 DSL 或电缆因特网接入的区域。</li></ul><h2 id="网络核心"><a href="#网络核心" class="headerlink" title="网络核心"></a>网络核心</h2><p>网络核心，即由互联网端系统的分组交换机和链路构成的网状网络。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote5.jpg" alt="note5"></p><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><ul><li>为了将源端系统向目的端系统发送一个报文，源将长报文划分为较小的数据块，称之为分组（<code>packet</code>）。</li><li>每个分组都通过通信链路和分组交换机进行传送。</li><li>分组以等于该链路最大速率的速度传输通过通信链路。</li></ul><h4 id="存储转发传输"><a href="#存储转发传输" class="headerlink" title="存储转发传输"></a>存储转发传输</h4><ul><li>多数分组交换机在链路的输入端使用存储创房传输（<code>store-and-forward transmission</code>）机制。</li><li>存储转发机制是指在交换机能够开始向输出链路传输该分组的第一个比特之前，必须接收到整个分组。</li></ul><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote6.jpg" alt="note6"></p><p>一个长度为 L 比特的分组，链路的传输速率为 R 比特/秒，则从源端系统到目的端系统，这个分组经过一个分组交换机传输的时间为 <code>2 * L / R</code> 秒。经过 n - 1 个分组交换机（n 条链路），则传输时间为 <code>n * L / R</code> 秒。</p><p>这里可以看一道题：</p><blockquote><p>Equation 1.1 gives a formula for the end-to-end delay of sending one packet of length L over N links of transmission rate R. Generalize this formula for sending P such packets back-to-back over the N links.</p></blockquote><p>答案：</p><blockquote><p>At time N*(L/R) the first packet has reached the destination, the second packet is stored in the last router, the third packet is stored in the next-to-last router, etc. At time N*(L/R) + L/R, the second packet has reached the destination, the third packet is stored in the last router, etc. Continuing with this logic, we see that at time N*(L/R) + (P-1)*(L/R) = (N+P-1)*(L/R) all packets have reached the destination. </p></blockquote><p>弄明白后，可以加深对分组交换的存储转发机制的理解。</p><h4 id="排队时延和分组丢失"><a href="#排队时延和分组丢失" class="headerlink" title="排队时延和分组丢失"></a>排队时延和分组丢失</h4><p>每个分组交换机有许多链路与之相连。对于每条相连的链路，该分组交换机具有一个输出缓存（<code>output buffer；也称为输出队列，output queue</code>）。它用于存储路由器准备发送至链路的分组。当所需要发送的分组很多时，不免会发生等待现象，需要等待的分组将会在输出缓存中等待，这就是排队时延。如果输出缓存被巨大的排队分组填满了，因为缓存容量有限，在这个情况下，已经塞不进去任何分组了，这样就会出现分组丢失，也就是丢包现象（<code>packet lost</code>），到达的分组或已经排队的分组之一将会被丢弃。</p><h4 id="转发表和路由选择协议"><a href="#转发表和路由选择协议" class="headerlink" title="转发表和路由选择协议"></a>转发表和路由选择协议</h4><p>路由器从与它相连的一条通信链路得到分组，将其向与它相连的另一条通信链路转发。但是该路由器怎样决定它应当向哪条链路进行转发呢？</p><blockquote><p>在因特网中，每个端系统具有一个称为 IP 地址的地址。当源主机要向目的端系统发送一个分组时，源在该分组的首部包含了目的地的 IP 地址。如同邮政地址那样，该地址具有一种等级结构。当一个分组到达网络中的路由器时，路由器检查该分组的目的地址的一部分，并向一台相邻路由器转发该分组。更特别的是，每台路由器具有一个转发表（<code>forwarding table</code>），用于将目的地址（或目的地址的一部分）映射成为输出链路。当某分组到达一台路由器时，路由器检查该地址，并用这个目的地址搜索其转发表，以发现适当的出链路。路由器则将分组导向该出链路。并且，因特网具有一些特殊的路由选择协议（<code>routing protocol</code>），用于自动地设置这些转发表。</p></blockquote><p>可以使用 traceroute 命令查看端到端路由：</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote7.png" alt="note7"></p><h3 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h3><p>在电路交换（<code>circuit switching</code>）网络中，在端系统间通信会话期间，预留了端系统间通信沿路径所需要的资源（缓存，链路传输速率）。在分组交换（<code>packet switching</code>）网络中，这些资源则不是预留的；会话的报文按需使用这些资源，其后果可能是不得不等待（即排队）接入通信线路。</p><ul><li>电路交换相当于必须提前预约好的餐馆，成功后到达餐厅即可直接点菜吃饭；分组交换相当于无需预约的餐馆，但可能有排队才能吃上饭的时候。</li><li>进行电路交换时，需先建立一条称为电路的端到端连接（<code>end-to-end connection</code>），在连接期间，网络会预留恒定的传输速率，即为发送方和接收方预留了带宽，以确保发送方能以恒定速率向接收方发送数据。</li></ul><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote8.jpg" alt="note8"></p><p>预留四条电路时，进行一次连接只能使用正常带宽的四分之一，这既是优点，也是弊端。</p><h4 id="电路交换网络中的复用"><a href="#电路交换网络中的复用" class="headerlink" title="电路交换网络中的复用"></a>电路交换网络中的复用</h4><ul><li>FDM</li></ul><p>频分复用（<code>FDM，Frequency Division Multiplexing</code>）就是将用于传输信道的总带宽划分成若干个子频带（或称子信道），每一个子信道传输一路信号。频分复用要求总频率宽度大于各个子信道频率之和，同时为了保证各子信道中所传输的信号互不干扰，应在各子信道之间设立隔离带，这样就保证了各路信号互不干扰（条件之一）。频分复用技术的特点是所有子信道传输的信号以并行的方式工作，每一路信号传输时可不考虑传输时延，因而频分复用技术取得了非常广泛的应用。频分复用技术除传统意义上的频分复用（FDM）外，还有一种是正交频分复用（OFDM）。</p><ul><li>TDM</li></ul><p>时分复用（<code>TDM，Time Division Multiplexing</code>）就是将提供给整个信道传输信息的时间划分成若干时间片（简称时隙），并将这些时隙分配给每一个信号源使用，每一路信号在自己的时隙内独占信道进行数据传输。时分复用技术的特点是时隙事先规划分配好且固定不变，所以有时也叫同步时分复用。其优点是时隙分配固定，便于调节控制，适于数字信息的传输；缺点是当某信号源没有数据传输时，它所对应的信道会出现空闲，而其他繁忙的信道无法占用这个空闲的信道，因此会降低线路的利用率。时分复用技术与频分复用技术一样，有着非常广泛的应用，电话就是其中最经典的例子，此外时分复用技术在广电也同样取得了广泛地应用，如 SDH，ATM，IP 和 HFC 网络中 CM 与 CMTS 的通信都是利用了时分复用的技术。</p><blockquote><p>对于 FDM，每条链路连续地得到部分带宽。对于 TDM，每条电路在短时间间隔（即时隙）中周期性的得到所有带宽。</p></blockquote><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>分组交换的批评者经常争辩说，分组交换不适合实时服务（例如，电话和视频会议），因为它的端到端时延是可变的和不可预测的（主要是因为排队时延的变动和不可预测所致）。分组交换的支持者却争辩道：①它提供了比电路交换更好的带宽共享；②它比电路交换更简单，更有效，实现成本更低。概括而言，嫌餐馆预订麻烦的人宁可要分组交换而不愿意要电路交换。</p><p>总而言之：</p><ul><li>电路交换不考虑需求，而预先分配了传输链路的使用，这使得已分配而并不需要的链路时间未被利用；分组交换按需分配链路使用。链路传输能力将在所有用户之间逐分组地被共享，这些用户有分组需要在链路上传输。</li></ul><h2 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a>网络的网络</h2><p>因特网是一个网络的网络，它是由数以亿计的用户构成的。而要想保证用户之间的连接，接入的 ISP 自身必须互联。今天的网络由十多个第一层 ISP 和数十万个较低层 ISP 组成。ISP 覆盖的区域有所不同，有些跨越多个大洲和大洋，有些限于很小的地理区域。较低层的 ISP 与较高层的 ISP 相连，较高层 ISP 彼此互联。用户和内容提供商是较低层 ISP 的客户，较低层 ISP 是较高层 ISP 的客户。近年来，主要的内容提供商也已经创建自己的网络，直接在可能的地方与较低层 ISP 互联。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote9.jpg" alt="note9"></p><h2 id="分组交换网中的时延、丢包和吞吐量"><a href="#分组交换网中的时延、丢包和吞吐量" class="headerlink" title="分组交换网中的时延、丢包和吞吐量"></a>分组交换网中的时延、丢包和吞吐量</h2><h3 id="时延的类型"><a href="#时延的类型" class="headerlink" title="时延的类型"></a>时延的类型</h3><ul><li>处理时延：检查分组首部和决定将该分组导向何处所需要的时间是处理时延的一部分。</li><li>排队时延：在队列中，当分组在链路上等待传输时，它经受排队时延。</li><li>传输时延：交换机仅当所有已经到达的分组被传输后，才能传输刚到达的分组。传输时延其实就是将所有分组的比特推（传输）向链路所需要的时间。</li><li>传播时延：两台路由器之间的距离除以传播速率即为传播时延，而传播速率取决于该链路的物理媒体。</li></ul><blockquote><p>一个类比可以阐明传输时延和传播时延的概念。考虑一条公路每100km有一个收费站，如图1-17所示。可认为收费站间的公路段是链路，收费站是路由器。假定汽车以100km/h的速度在该公路上行驶（即传播）（即当一辆汽车离开一个收费站时，它立即加速到100km/h并在收费站间维持该速度）。假定这时有10辆汽车的车队在行驶，并且这10辆汽车以固定的顺序互相跟随。可以认为每辆汽车是一个比特，该车队是一个分组。同时假定每个收费站以每辆车12s的速度服务（即传输）一辆汽车，由于时间是深夜，因此该车队是公路上唯一一批汽车。最后，假定无论该车队的第一辆汽车何时到达收费站，它在入口处等待，直到其他9辆汽车到达并整队依次前行。（因此，整个车队在它能够“转发”之前，必须存储在收费站。）收费站将整个车队推向公路所需要的时间是（10辆车）/（5辆车/min）=2min。该时间类比于一台路由器中的传输时延。因此，一辆汽车从一个收费站出口行驶到下一个收费站所需要的时间是100h/（100km/h）=1h。这个时间类比于传播时延。因此，从该车队存储在收费站前到该车队存储在下一个收费站前的时间是“传输时延”和“传播时间”总和，在本例中为62min。</p></blockquote><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote10.jpg" alt="note10"></p><h3 id="流量强度和丢包"><a href="#流量强度和丢包" class="headerlink" title="流量强度和丢包"></a>流量强度和丢包</h3><ul><li>流量强度（traffic intensity）：La/R</li></ul><ol><li>La/R→0：几乎没有分组到达，并且到达间隔很大，平均排队时延接近于0。</li><li>La/R→1：可能有很大的平均排队时延。</li><li>La/R &gt; 1：比特到达队列的平均速率超过从该队列传输出去的速率，队列的增加趋于无界。</li></ol><ul><li>丢包：到达分组发现满队列时将被丢弃。（丢失分组的数量随着流量强度的增加而增加）</li></ul><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgnote11.jpg" alt="note11"></p><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><ul><li>瞬时吞吐量：任何瞬间主机B接收来自主机A文件的速率。</li><li>平均吞吐量：在一段时间内接收文件的平均速率。</li><li>从服务器到客户的文件传输的吞吐量是 <code>min{R1，R2，…，RN}</code>，即沿着服务器和客户之间路径的瓶颈链路的速率。</li><li>因特网中对吞吐量的限制因素通常是接入网。</li></ul><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“好好学习，天天向上。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://home.junyouxiaowu.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Notes" scheme="http://home.junyouxiaowu.top/tags/Notes/"/>
    
      <category term="Network" scheme="http://home.junyouxiaowu.top/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>数字签名是什么（转）</title>
    <link href="http://home.junyouxiaowu.top/2018/03/16/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://home.junyouxiaowu.top/2018/03/16/数字签名是什么/</id>
    <published>2018-03-16T10:38:27.000Z</published>
    <updated>2018-03-31T07:29:49.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“Talk about the digital signature💸”</p></blockquote><a id="more"></a><p>最近学习密码学相关知识时，有一些知识感觉有点模糊。查阅资料后发现阮一峰老师翻译的一篇好文章，比较清晰地讲解了公钥私钥和数字签名证书等，特此遵循 <code>CC BY-NC-ND 3.0</code> 协议转发。还有一篇简书的文章，好像不支持私自转发，就引一个链接吧：<a href="https://www.jianshu.com/p/9db57e761255" target="_blank" rel="external">什么是数字签名和证书？</a>。</p><hr><p>作者：David Youd</p><p>翻译：阮一峰</p><p>原文网址：<a href="http://www.youdzone.com/signature.html" target="_blank" rel="external">http://www.youdzone.com/signature.html</a>  </p><p>翻译地址：<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a></p><p>1.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080901.png" alt=""></p><p>鲍勃有两把钥匙，一把是公钥，另一把是私钥。</p><p>2.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080902.png" alt=""></p><p>鲍勃把公钥送给他的朋友们—-帕蒂、道格、苏珊—-每人一把。</p><p>3.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080903.png" alt=""></p><p>苏珊要给鲍勃写一封保密的信。她写完后用鲍勃的公钥加密，就可以达到保密的效果。</p><p>4.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080904.png" alt=""></p><p>鲍勃收信后，用私钥解密，就看到了信件内容。这里要强调的是，只要鲍勃的私钥不泄露，这封信就是安全的，即使落在别人手里，也无法解密。</p><p>5.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080905.png" alt=""></p><p>鲍勃给苏珊回信，决定采用”数字签名”。他写完后先用Hash函数，生成信件的摘要（digest）。</p><p>6.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080906.png" alt=""></p><p>然后，鲍勃使用私钥，对这个摘要加密，生成”数字签名”（signature）。</p><p>7.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080907.png" alt=""></p><p>鲍勃将这个签名，附在信件下面，一起发给苏珊。</p><p>8.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080908.png" alt=""></p><p>苏珊收信后，取下数字签名，用鲍勃的公钥解密，得到信件的摘要。由此证明，这封信确实是鲍勃发出的。</p><p>9.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080909.png" alt=""></p><p>苏珊再对信件本身使用Hash函数，将得到的结果，与上一步得到的摘要进行对比。如果两者一致，就证明这封信未被修改过。</p><p>10.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080910.png" alt=""></p><p>复杂的情况出现了。道格想欺骗苏珊，他偷偷使用了苏珊的电脑，用自己的公钥换走了鲍勃的公钥。此时，苏珊实际拥有的是道格的公钥，但是还以为这是鲍勃的公钥。因此，道格就可以冒充鲍勃，用自己的私钥做成”数字签名”，写信给苏珊，让苏珊用假的鲍勃公钥进行解密。</p><p>11.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080911.png" alt=""></p><p>后来，苏珊感觉不对劲，发现自己无法确定公钥是否真的属于鲍勃。她想到了一个办法，要求鲍勃去找”证书中心”（certificate authority，简称CA），为公钥做认证。证书中心用自己的私钥，对鲍勃的公钥和一些相关信息一起加密，生成”数字证书”（Digital Certificate）。</p><p>12.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080912.png" alt=""></p><p>鲍勃拿到数字证书以后，就可以放心了。以后再给苏珊写信，只要在签名的同时，再附上数字证书就行了。</p><p>13.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080913.png" alt=""></p><p>苏珊收信后，用CA的公钥解开数字证书，就可以拿到鲍勃真实的公钥了，然后就能证明”数字签名”是否真的是鲍勃签的。</p><p>14.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080914.jpg" alt=""></p><p>下面，我们看一个应用”数字证书”的实例：https协议。这个协议主要用于网页加密。</p><p>15.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080915.png" alt=""></p><p>首先，客户端向服务器发出加密请求。</p><p>16.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080916.png" alt=""></p><p>服务器用自己的私钥加密网页以后，连同本身的数字证书，一起发送给客户端。</p><p>17.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080917.png" alt=""></p><p>客户端（浏览器）的”证书管理器”，有”受信任的根证书颁发机构”列表。客户端会根据这张列表，查看解开数字证书的公钥是否在列表之内。</p><p>18.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080918.png" alt=""></p><p>如果数字证书记载的网址，与你正在浏览的网址不一致，就说明这张证书可能被冒用，浏览器会发出警告。</p><p>19.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080919.jpg" alt=""></p><p>如果这张数字证书不是由受信任的机构颁发的，浏览器会发出另一种警告。</p><p>20.</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/201108/bg2011080920.png" alt=""></p><p>如果数字证书是可靠的，客户端就可以使用证书中的服务器公钥，对信息进行加密，然后与服务器交换加密信息。</p><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“Talk about the digital signature💸”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="教程" scheme="http://home.junyouxiaowu.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
      <category term="Cryptography" scheme="http://home.junyouxiaowu.top/tags/Cryptography/"/>
    
  </entry>
  
  <entry>
    <title>区块链入门简明教程</title>
    <link href="http://home.junyouxiaowu.top/2018/03/15/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/"/>
    <id>http://home.junyouxiaowu.top/2018/03/15/区块链简明教程/</id>
    <published>2018-03-15T12:39:27.000Z</published>
    <updated>2018-03-31T07:30:43.371Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“人人都说，不说才怪。”</p></blockquote><a id="more"></a><p>区块链（blockchain）是眼下的大热门，新闻媒体大量报道，一些大佬也都在口口相传。但我想，不是所有人都真正了解区块链，一些人其实只是不懂装懂而已。查阅了多方资料，感谢阮一峰老师的文章，还有菜鸟教程，百度百科等。我将这些资料和自己的理解整理汇总起来，希望能有所启发。</p><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>区块链是什么？用一句话来说，它是一种特殊的 <code>分布式数据库</code>。</p><p>那什么是分布式数据库呢？分布式数据库就是将数据信息单独存放在每台计算机上，且存储的信息是一致并且保持同步的，如果有一两台计算机坏了，信息也不会丢失，因为还可以在其他的计算机上查看到这些信息。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgblockchain.jpg" alt="区块链"></p><p>因为区块链是一种特殊的数据库，所以它的主要作用是 <code>储存信息</code>。任何需要保存的信息，都可以写入区块链，也可以从里面读取。</p><p>其次，任何人都可以架设自己的服务器或者使用自己的笔记本电脑、手机等，加入区块链网络，成为其中一个节点。区块链的世界里面，是没有中心节点的，并且每个节点都是平等的，因为每个节点都保存着整个数据库，区块链包含的信息都会存储在所有加入到区块链网络的节点当中。你可以向任何一个节点，写入或者读取数据，因为<strong>所有节点最后都会同步，以保证区块链一致</strong>。</p><p>可以抽象为：区块链是由一个个记录着各种各样信息的小区块链接起来组成的一个大区块，因为都是区块并且它们都是串行链接的，前一个和后一个保持着微妙的联系，所以它被叫做区块链。这就像盖房子，当你打好地基，准备好水泥后，就要将手上的砖块一层一层堆砌起来，这样堆叠起来的砖头是不能再拆掉的，否则会损坏整个房子。每个砖头上面还写着各种各样的信息，比如：这是块砖是谁叠的，是什么时候叠的，是什么材质的砖等。</p><p>如果想要有直观感受，可以去这里看一下：<a href="https://anders.com/blockchain/distributed.html" target="_blank" rel="external">Distributed Blockchain</a></p><h2 id="核心特点"><a href="#核心特点" class="headerlink" title="核心特点"></a>核心特点</h2><p>区块链有一个核心特点，就是 <code>去中心化</code>。为了了解去中心化，我们先来了解什么是中心化。</p><p>其实在现实生活中，有很多中心化的例子。比如平时浏览各大视频网站，阅读新闻资讯或者网上购物。这么多形形色色的网站肯定且必须有一台或多台服务器把这些资源和信息准备好，以供人们浏览翻阅。但是如果这些服务器坏了的话，人们也就无法访问了。因为为它们是中心化的。所谓擒贼先擒王，也是这个道理。</p><p>再举个例子，在淘宝上购买商品，有 <code>挑选商品-&gt;购买商品-&gt;将钱托管在淘宝的支付宝平台上-&gt;淘宝提醒商家发货-&gt;客户确认无误收货-&gt;商家得到客户事先已经托管在支付宝上的钱</code> 一套流程。这个交易，其实是有第三方介入的。考虑极端情况，如果支付宝故障或赖账，那么，交易其实是未能达成的，而且将会带来不必要的损失。如果没有第三方介入，就像现实中在商店购买东西一样，双方达成协议并确认无误后，即可完成一笔交易，这样的模式，就是去中心化。去中心化可以免去不必要的第三方资源，也可以避免双方除了交易信息以外的个人信息泄露，最重要的，它可以排除第三方控制交易的风险。</p><p>所以，身为去中心化代表的区块链，它是彻底无中心的。其他的数据库都有管理员，但是区块链没有。如果有人想对区块链添加审核，这也是实现不了的，因为它的设计目标就是防止大公司、大集团拥有管理权，掌控了整个平台，为所欲为。</p><p>因为无法管理，区块链才能做到无法被控制，而正是因为无人控制，区块链才火速流行了起来。</p><p>但是，没有了管理员，人人都可以往里面写入数据，怎么才能保证数据是可信的呢？如果数据被坏人修改了，又该怎么办呢？请接着往下读，这就是区块链奇妙的地方。</p><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>区块链由一个个区块（block）组成（第一个区块称为创世区块）。<strong>区块很像数据库的记录</strong>，每次写入数据，就是创建一个区块。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E5%8C%BA%E5%9D%97.png" alt="区块"></p><p>以比特币为例，矿工通过挖矿来创建新的区块。此外比特币采用的 PoW（工作量证明机制）共识机制，理解起来很简单：你能够获得多少货币，取决于你挖矿贡献的有效工作，根据你的工作量证明来分配货币。比如比特币、莱特币，都是基于 PoW 的虚拟货币，你的算力越高，挖矿时间越长，你获得的币就越多。</p><p>当然该机制内部实现很复杂，有很多细节，比如：挖矿难度自动调整、区块奖励逐步减半等，这些因素都是基于经济学原理，能吸引和鼓励更多人参与。</p><p>我们可以看到，每个区块包含两个部分：</p><ol><li><p><strong>区块头（Head）：</strong>记录当前区块的特征值。</p></li><li><p><strong>区块体（Body）：</strong>包含实际数据。</p></li></ol><p>区块头包含了当前区块的多项特征值：</p><ol><li><p><strong>生成时间。</strong></p></li><li><p><strong>实际数据（即区块体）的哈希。</strong></p></li><li><p><strong>上一个区块的哈希。</strong></p></li><li><p><strong>…….</strong></p></li></ol><p>这里，你需要理解什么叫 <code>哈希（hash）</code>，这是理解区块链必需的。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E5%8C%BA%E5%9D%97%E4%BD%93.png" alt="区块体"></p><p>所谓 <code>哈希</code> 就是<strong>计算机可以对任意内容，计算出一个长度相同的特征值。</strong>区块链的哈希长度是256位，这就是说，不管原始内容是什么，最后都会计算出一个256位的二进制数字。而且可以保证，只要原始内容不同，对应的哈希一定是不同的。</p><p>可以用一个简单的 Python 脚本来说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line">blockchain = hashlib.sha256(<span class="string">'blockchain'</span>.encode(<span class="string">'utf-8'</span>)).hexdigest()</div><div class="line">blockchains = hashlib.sha256(<span class="string">'blockchains'</span>.encode(<span class="string">'utf-8'</span>)).hexdigest()</div><div class="line">bitcoin = hashlib.sha256(<span class="string">'bitcoin'</span>.encode(<span class="string">'utf-8'</span>)).hexdigest()</div><div class="line">bitcoins = hashlib.sha256(<span class="string">'bitcoins'</span>.encode(<span class="string">'utf-8'</span>)).hexdigest()</div><div class="line"></div><div class="line">print(blockchain)</div><div class="line">print(blockchains)</div><div class="line">print(bitcoin)</div><div class="line">print(bitcoins)</div></pre></td></tr></table></figure><p>打印结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ef7797e13d3a75526946a3bcf00daec9fc9c9c4d51ddc7cc5df888f74dd434d1</div><div class="line"><span class="number">99</span>cf6497afaa87b8ce79a4a5f4ca90a579773d6770650f0819179309ed846190</div><div class="line"><span class="number">6</span>b88c087247aa2f07ee1c5956b8e1a9f4c7f892a70e324f1bb3d161e05ca107b</div><div class="line">b1e84e5753592ece4010051fab177773d917b0e788f7d25c74c5e0fc63903aa9</div></pre></td></tr></table></figure><p>可以看到，不同的内容产生的哈希是不一样的（其实不管怎么样，都是有可能存在哈希冲突的，只是概率较低）。这里，我们可以得出几个关于哈希的重要结论：</p><ul><li><strong>等长性：</strong>不管原始信息多长或者多短, 计算出来的哈希值都具有固定的长度。</li><li><strong>单向性：</strong>由原文获得哈希值很容易,但是根据哈希值推测原文是不可能的。</li><li><strong>确定性：</strong>同一个原始信息用相同的哈希算法永远得到同一个哈希值。</li><li><strong>分散性：</strong>即使原始信息只有微小改动（即使只改动一个比特），也会导致哈希值面目全非。</li></ul><p>应用在区块中，我们可以得到：</p><ol><li><strong>不同区块的哈希是不一样的，可以通过哈希标识区块。</strong></li><li><strong>如果区块的内容变了，它的哈希也一定会改变。</strong></li></ol><h2 id="哈希的不可修改性"><a href="#哈希的不可修改性" class="headerlink" title="哈希的不可修改性"></a>哈希的不可修改性</h2><p>区块与哈希是一一对应的，每个区块的哈希都是针对 <code>区块头（Head）</code> 计算的。也就是说，把区块头的各项特征值，按照顺序连接在一起，组成一个很长的字符串，再对这个字符串计算哈希。</p><p><code>hash = sha256(区块头)</code></p><p>上面就是区块哈希的计算公式，<code>sha256</code> 是区块链的哈希算法。注意，这个公式里面只包含区块头，不包含区块体，也就是说，<strong>哈希由区块头唯一决定。</strong></p><p>前面说过，区块头包含很多内容，其中有当前区块体的哈希，还有上一个区块的哈希。这意味着，如果当前区块体的内容变了，或者上一个区块的哈希变了，一定会引起当前区块的哈希改变。</p><p>这一点对区块链也有着重大意义。如果有人修改了一个区块，该区块的哈希就变了。为了让后面的区块还能连到它（因为下一个区块包含上一个区块的哈希），该人必须依次修改后面所有的区块，否则被改掉的区块就脱离区块链了。由于后面要提到的原因，哈希的计算很耗时，短时间内修改多个区块几乎不可能发生，除非有人掌握了全网 <code>51%</code> 以上的计算能力。关于 <code>51%攻击</code> 可以参考两篇文章：<a href="http://www.8btc.com/51attack" target="_blank" rel="external">51%攻击解析</a> &amp; <a href="http://blog.sina.com.cn/s/blog_cea0aacc0102x5ws.html" target="_blank" rel="external">51%以上算力集中在中国，这是个隐患么？</a>。</p><p>正是通过这种联动机制，区块链保证了自身的可靠性，<strong>数据一旦写入，就无法被篡改。</strong>这就像历史一样，发生了就是发生了，从此再无法改变。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E5%8C%BA%E5%9D%97%E9%93%BE.png" alt="区块链"></p><p>现在，我们可以做一个小实验来感受一下，创建几个包含简单内容的区块：</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgblockchain1.png" alt="blockchain1"></p><p>现在如果我们篡改第一个区块链里的内容，后续区块的哈希将会发生错误：</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgblockchain2.png" alt="blockchain2"></p><p>这也证明了区块链中哈希的不可修改性。</p><h2 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h2><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E7%9F%BF%E6%9C%BA1.jpg" alt="采矿"></p><p>中本聪（这是假名，真实身份至今未知）最初设计比特币时规定每产生 <code>210000</code> 个区块，比特币奖励减半一次，直至比特币不能再被细分。因为比特币和黄金一样总量有限。所以比特币被称为数字黄金。比特币的生产也俗称挖矿。</p><p>挖矿是将一段时间内比特币系统中发生的交易进行确认，并记录在区块链上形成新区块的过程，挖矿的人叫做矿工。简单说来，挖矿就是记账的过程，矿工是记账员，区块链就是账本。职业矿工进行挖矿工作，一天下来，电费破万也是轻而易举的。</p><p>怎样激励矿工来挖矿呢？比特币系统的记账权力是去中心化的，即每个矿工都有记账的权力。成功抢到记账权的矿工，会获得系统新生的比特币奖励。因此，<strong>挖矿就是生产比特币的过程。</strong></p><p>由于必须保证节点之间的同步，所以新区块的添加速度不能太快。试想一下，你刚刚同步了一个区块，准备基于它生成下一个区块，但这时别的节点又有新区块生成，你不得不放弃做了一半的计算，再次去同步。因为每个区块的后面，只能跟着一个区块，你永远只能在最新区块的后面，生成下一个区块。所以，你别无选择，一听到信号，就必须立刻同步。</p><p>中本聪故意让添加新区块变得很困难。他的设计是，平均每 <code>10</code> 分钟，全网才能生成一个新区块，一小时也就 <code>6</code> 个。这种产出速度不是通过命令达成的，而是故意设置了海量的计算。也就是说，只有通过极其大量的计算，才能得到当前区块的有效哈希，从而把新区块添加到区块链。由于计算量太大，所以快不起来。<strong>挖矿的困难来源于计算有效哈希的难度，这就好比在全世界的沙子里面，找到一粒符合条件的沙子。</strong></p><h2 id="难度系数"><a href="#难度系数" class="headerlink" title="难度系数"></a>难度系数</h2><p>也许你可能会有一个疑问，人们都说挖矿很难，可是挖矿不就是用计算机算出一个哈希吗，这正是计算机的强项啊，怎么会变得很难，迟迟算不出来呢？</p><p>那先来了解一下算力的概念。在通过挖矿得到比特币的过程中，我们需要找到其相应的解，而要找到其解，并没有固定算法，只能靠计算机随机的哈希碰撞。一台矿机每秒钟能做多少次哈希碰撞，就是其 <code>算力</code> 的代表，单位写成 <code>hash/s</code>。算力可以简单的理解为计算能力。</p><p>目前主流的矿机为 <code>14T</code> 左右的计算量级，即一台矿机就能每秒做至少 <code>1.4*10^13</code> 次方次哈希碰撞，我们可以说，这一台矿机有 <code>14T</code> 的算力。那么，矿机每秒钟能做执行那么多次哈希碰撞，为什么挖矿还是很难呢？</p><p>其实不是任意一个哈希都可以的，<strong>只有满足条件的哈希才会被区块链接受</strong>。这个条件特别苛刻，使得绝大部分哈希都不满足要求，必须重算。</p><p>原来，区块头包含一个 <code>难度系数（difficulty）</code>，这个值决定了计算哈希的难度。举例来说，第 <a href="https://blockexplorer.com/block/000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506" target="_blank" rel="external">100000</a> 个区块的难度系数是 <code>14484.16236122</code>。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E9%9A%BE%E5%BA%A6%E7%B3%BB%E6%95%B0.png" alt="难度系数"></p><p>区块链协议规定，使用一个常量除以难度系数，可以得到 <code>目标值（target）</code>。显然，难度系数越大，目标值就越小。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E7%9B%AE%E6%A0%87%E5%80%BC.png" alt="目标值"></p><p>哈希的有效性跟目标值密切相关，只有小于目标值的哈希才是有效的，否则哈希无效，必须重算。由于目标值非常小，哈希小于该值的机会极其渺茫，可能计算10亿次，才算中一次。这就是采矿如此之慢的根本原因。</p><p>前面说过，当前区块的哈希由区块头唯一决定。如果要对同一个区块反复计算哈希，就意味着，区块头必须不停地变化，否则不可能算出不一样的哈希。区块头里面所有的特征值都是固定的，为了让区块头产生变化，中本聪故意增加了一个随机项，叫做 <code>Nonce</code>。</p><p>Nonce 其实是一个没有什么实际意义的很大的随机值。由于 Nonce 是哈希的一部分，Nonce 改变了，这个区块的哈希也会改变了。矿工的作用其实就是猜出 Nonce 的值，使得区块头的哈希可以小于目标值，从而能够写入区块链。Nonce 是非常难猜的，目前只能通过<strong>穷举法</strong>一个个试错。根据协议，Nonce 是一个32位的二进制值，即最大可以到 21.47 亿。第 100000 个区块的 Nonce 值是 <code>274148111</code>，可以理解成，矿工从0开始，一直计算了 2.74 亿次，才得到了一个有效的 Nonce 值，使得算出的哈希能够满足条件。</p><p>运气好的话，也许一会就找到了 Nonce。运气不好的话，可能算完了 21.47 亿次，都没有发现 Nonce，即当前区块体不可能算出满足条件的哈希。这时，协议允许矿工改变区块体，开始新的计算。</p><p>我们通过一个 Python 脚本来来模拟一下区块的哈希计算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"></div><div class="line"><span class="keyword">for</span> nonce <span class="keyword">in</span> range(<span class="number">15961902</span>):</div><div class="line">    content = <span class="string">'Hello, world!'</span></div><div class="line">    hash = content + str(nonce)</div><div class="line">    print(hash, hashlib.sha256(hash.encode(<span class="string">'utf-8'</span>)).hexdigest())</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Hello, world!<span class="number">0</span> <span class="number">1312</span>af178c253f84028d480a6adc1e25e81caa44c749ec81976192e2ec934c64</div><div class="line">Hello, world!<span class="number">1</span> e9afc424b79e4f6ab42d99c81156d3a17228d6e1eef4139be78e948a9332a7d8</div><div class="line">Hello, world!<span class="number">2</span> ae37343a357a8297591625e7134cbea22f5928be8ca2a32aa475cf05fd4266b7</div><div class="line">......</div><div class="line">Hello, world!<span class="number">4249</span> c004190b822f1669cac8dc37e761cb73652e7832fb814565702245cf26ebb9e6</div><div class="line">Hello, world!<span class="number">4250</span> <span class="number">0000</span>c3af42fc31103f1fdc0151fa747ff87349a4714df7cc52ea464e12dcd4e9</div><div class="line">......</div><div class="line">Hello, world!<span class="number">15961901</span> <span class="number">00000061</span>eba1b9261c3d441584a892e9286b20d79b294fc6a450315f7773250d</div></pre></td></tr></table></figure><p>哈希值前面的0越多，代表这个哈希值也就越小，可以看到，经过4250次的运算后，可以找到前面有4个0的哈希值，而进行15961901次运算后，才能找到前面有6个0的哈希值。</p><h2 id="难度系数动态调节"><a href="#难度系数动态调节" class="headerlink" title="难度系数动态调节"></a>难度系数动态调节</h2><p>挖矿具有随机性，没法保证正好十分钟产出一个区块，有时一分钟就算出来了，有时几个小时可能也没结果。总体来看，随着硬件设备的提升，以及矿机的数量增长，计算速度一定会越来越快。</p><p>为了将产出速率恒定在十分钟，中本聪还设计了难度系数的动态调节机制。他规定，难度系数每两周（2016个区块）调整一次。如果这两周里面，区块的平均生成速度是9分钟，就意味着比法定速度快了10%，因此接下来的难度系数就要调高10%；如果平均生成速度是11分钟，就意味着比法定速度慢了10%，因此接下来的难度系数就要调低10%。</p><p>难度系数越调越高（目标值越来越小），也就导致了挖矿越来越难。</p><h2 id="分叉"><a href="#分叉" class="headerlink" title="分叉"></a>分叉</h2><p>即使区块链是可靠的，现在还有一个问题没有解决：如果两个人同时向区块链写入数据，也就是说，同时有两个区块加入，因为它们都连着前一个区块，就形成了分叉。这时应该采纳哪一个区块呢？</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E5%88%86%E5%8F%891.png" alt="分叉1"></p><p>现在的规则是，新节点总是采用最长的那条区块链。如果区块链有分叉，将看哪个分支在分叉点后面，先达到6个新区块（称为”六次确认”）。按照10分钟一个区块计算，一小时就可以确认。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E5%88%86%E5%8F%892.png" alt="分叉2"></p><p>由于新区块的生成速度由计算能力决定，所以这条规则就是说，拥有大多数计算能力的那条分支，就是正宗的区块链。</p><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>到这里，我们已经可以总结一下区块链的工作流程了，以比特币对区块链的应用为例：</p><ol><li>买卖双方根据各自所需使用比特币进行交易，形成交易记录。</li><li>互联网上的任何一名用户都可以使用自己的电脑成为一个节点，将这个交易记录收集到一个区块的数据结构中，并寻找与之匹配的 Nonce 值，使整个区块的哈希值由若干个0开头以小于建造一个区块需要的目标值。</li><li>哪个节点最先找到这个 Nonce，也就最先创造了这个区块，系统会把这个区块广播到网络中交给所有其余节点投票。</li><li>每个节点都会审核交易记录是否准确、Nonce 值是否有效等，如果都没有问题，就投赞成票，如果多数节点都投赞成票共识就达成了。</li><li>达成共识后，这个新区块被加到区块链中。</li><li>交易被确认完成。</li></ol><p><img src="https://ws1.sinaimg.cn/large/d332c72agy1fpeq6uxb7yj20go0dwq3p.jpg" alt="工作流程"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>区块链作为无人管理的分布式数据库，从2009年开始已经运行了8年，没有出现大的问题。这证明它是可行的。</p><p>但是，为了保证数据的可靠性，区块链也有自己的代价。一是效率，数据写入区块链，最少要等待十分钟，所有节点都同步数据，则需要更多的时间；二是能耗，区块的生成需要矿工进行无数无意义的计算，这是非常耗费能源的。</p><p>因此，区块链的适用场景，其实非常有限。</p><ol><li><p><strong>不存在所有成员都信任的管理当局。</strong></p></li><li><p><strong>写入的数据不要求实时使用。</strong></p></li><li><p><strong>挖矿的收益能够弥补本身的成本。</strong></p></li></ol><p>如果无法满足上述的条件，那么传统的数据库是更好的解决方案。</p><p>目前，区块链最大的应用场景（可能也是唯一的应用场景），就是以比特币为代表的加密货币。</p><h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><ul><li><a href="http://blog.csdn.net/csolo/article/details/52858236" target="_blank" rel="external">理解区块链</a></li><li><a href="http://www.runoob.com/w3cnote/blockchain-intro.html" target="_blank" rel="external">区块链入门教程(菜鸟教程)</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html" target="_blank" rel="external">区块链入门教程(阮一峰的网络日志)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“人人都说，不说才怪。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="教程" scheme="http://home.junyouxiaowu.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
      <category term="BlockChain" scheme="http://home.junyouxiaowu.top/tags/BlockChain/"/>
    
  </entry>
  
  <entry>
    <title>Python密码学不完全指北（古典密码）</title>
    <link href="http://home.junyouxiaowu.top/2018/03/05/Python%E5%AF%86%E7%A0%81%E5%AD%A61/"/>
    <id>http://home.junyouxiaowu.top/2018/03/05/Python密码学1/</id>
    <published>2018-03-05T12:39:27.000Z</published>
    <updated>2018-03-31T07:31:10.683Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“这是成为黑客的必经之路。”</p></blockquote><a id="more"></a><h2 id="什么是密码学？"><a href="#什么是密码学？" class="headerlink" title="什么是密码学？"></a>什么是密码学？</h2><p>密码学是一门非常古老的学科，是把人们能够读懂的消息变换成不易读懂的信息用来隐藏信息内容，使得窃听者无法理解消息的内容，同时又能够让合法用户把变换的结果还原成能够读懂的消息。</p><p>密码学的发展经历了3个阶段：<br>（1）古典密码。这个时期的密码应该被称之为艺术，而不是科学，是古代人民智慧的结晶，典型的密码有阴符、藏头诗、石蜡密信、反切密码（明代戚继光）、凯撒密码和天书等。<br>（2）近代密码。1949年，伟大科学家香农发表了著名的《保密系统的通信理论》和《通信的数学理论》两篇文章，使得密码学从此由艺术走上了科学的道路，成为一门学科。<br>（3）现代密码学。1976年，美国国家标准局公布了数据加密标准（DES），这一对称密码标准在世界上广泛流传和应用；同年，密码学家、图灵奖获得者Diffie和Hellman（2016年图灵奖）发表了《密码学的新方向》，开创了公钥密码学的新纪元。</p><p>下面就来说说一些古典加密法。</p><h2 id="凯撒加密法"><a href="#凯撒加密法" class="headerlink" title="凯撒加密法"></a>凯撒加密法</h2><blockquote><p>凯撒加密法，或称恺撒加密、恺撒变换、变换加密，是一种最简单且最广为人知的加密技术。它是一种替换加密的技术，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。</p></blockquote><p>其基本思想是：通过把字母移动一定的位数来实现加密和解密。例如，密钥代表的是把明文字母向后移动的位数。如果密钥为3，那么明文字母 B 就变成了密文的 E，依次类推，X 将变成 A，Y 变成 B，Z 变成 C。</p><p>也就是说，当密钥 <code>key = 3</code> 时，明文字母表和密文字母表分别是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">明文字母表：ABCDEFGHIJKLMNOPQRSTUVWXYZ</div><div class="line">密文字母表：DEFGHIJKLMNOPQRSTUVWXYZABC</div></pre></td></tr></table></figure><p>使用时，加密者查找明文字母表中需要加密的消息中的每一个字母所在位置，并且写下密文字母表中对应的字母。需要解密的人则根据事先已知的密钥反过来操作，得到原来的明文。</p><p>那么，密钥有多少种可能呢？</p><p>有26个。因为当 <code>key = 26</code> 时，它的效果是和     <code>key = 0</code> 的效果是一样的，并且密文和明文的结果是一样的。</p><p>所以，通过穷举法，是可以轻松破解凯撒加密的。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E5%87%AF%E6%92%92%E5%8A%A0%E5%AF%86%E8%BD%AE%E7%9B%98.png" alt="凯撒加密"></p><p>根据凯撒加密法的原理，可以得到加解密算法的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">LETTERS = string.ascii_uppercase  <span class="comment"># 获得二十六个英文大写字母</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CaesarCipher</span><span class="params">(message, key, mode)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    message: 明文</span></div><div class="line"><span class="string">    key: 密钥（在0~25之间）</span></div><div class="line"><span class="string">    mode: 设定模式：加密（encrypt）；解密（decrypt）</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    translated = <span class="string">''</span>  <span class="comment"># 翻译后字符串</span></div><div class="line">    <span class="keyword">for</span> symbol <span class="keyword">in</span> message:</div><div class="line">        <span class="keyword">if</span> symbol.upper() <span class="keyword">in</span> LETTERS:</div><div class="line">            index = LETTERS.find(symbol.upper())</div><div class="line">            <span class="keyword">if</span> mode == <span class="string">'encrypt'</span>:  <span class="comment"># 判断当前是加密模式还是解密模式</span></div><div class="line">                index = (index + key) % len(LETTERS)</div><div class="line">            <span class="keyword">elif</span> mode == <span class="string">'decrypt'</span>:</div><div class="line">                index = (index - key) % len(LETTERS)</div><div class="line"></div><div class="line">            <span class="keyword">if</span> symbol.isupper():  <span class="comment"># 判断字符是大写还是小写，以此决定加密或解密后是大写还是小写</span></div><div class="line">                translated = translated + LETTERS[index]  <span class="comment"># 空字符串一个个加上翻译后得到的字符</span></div><div class="line">            <span class="keyword">elif</span> symbol.islower():</div><div class="line">                translated = translated + LETTERS[index].lower()</div><div class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果需要翻译的字符不在26个大写字母的范围内，就直接保持原样加入</span></div><div class="line">            translated = translated + symbol</div><div class="line">    <span class="keyword">return</span> translated</div><div class="line"></div><div class="line">print(CaesarCipher(<span class="string">'I love you.'</span>, <span class="number">13</span>, <span class="string">'encrypt'</span>))</div><div class="line">print(CaesarCipher(<span class="string">'V ybir lbh.'</span>, <span class="number">13</span>, <span class="string">'decrypt'</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">V ybir lbh.</div><div class="line">I love you.</div></pre></td></tr></table></figure><p>因为加密密钥其实是知道的，根据所有的密钥对密文进行解密，得到的结果里肯定是包含正确的明文的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">LETTERS = string.ascii_uppercase  <span class="comment"># 获得二十六个英文大写字母</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">CaesarCipherHacker</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">'''根据密文 message 和范围在 0~25 之间的密钥 key 实施暴力破解'''</span></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(len(LETTERS)):</div><div class="line">        translated = <span class="string">''</span>  <span class="comment"># 翻译后字符串</span></div><div class="line">        <span class="keyword">for</span> symbol <span class="keyword">in</span> message:</div><div class="line">            <span class="keyword">if</span> symbol.upper() <span class="keyword">in</span> LETTERS:</div><div class="line">                index = (LETTERS.find(symbol.upper()) - key) % len(LETTERS)</div><div class="line">                <span class="keyword">if</span> symbol.isupper():  <span class="comment"># 判断字符是大写还是小写，以此决定加密或解密后是大写还是小写</span></div><div class="line">                    translated = translated + LETTERS[index]  <span class="comment"># 空字符串一个个加上翻译后得到的字符</span></div><div class="line">                <span class="keyword">elif</span> symbol.islower():</div><div class="line">                    translated = translated + LETTERS[index].lower()</div><div class="line">            <span class="keyword">else</span>:  <span class="comment"># 如果需要翻译的字符不在26个大写字母的范围内</span></div><div class="line">                translated = translated + symbol</div><div class="line">        print(<span class="string">'&#123;:&gt;2&#125;: &#123;&#125;'</span>.format(key, translated))</div><div class="line"></div><div class="line">CaesarCipherHacker(<span class="string">'V ybir lbh.'</span>)</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"> <span class="number">0</span>: V ybir lbh.</div><div class="line"> <span class="number">1</span>: U xahq kag.</div><div class="line"> <span class="number">2</span>: T wzgp jzf.</div><div class="line"> <span class="number">3</span>: S vyfo iye.</div><div class="line"> <span class="number">4</span>: R uxen hxd.</div><div class="line"> <span class="number">5</span>: Q twdm gwc.</div><div class="line"> <span class="number">6</span>: P svcl fvb.</div><div class="line"> <span class="number">7</span>: O rubk eua.</div><div class="line"> <span class="number">8</span>: N qtaj dtz.</div><div class="line"> <span class="number">9</span>: M pszi csy.</div><div class="line"><span class="number">10</span>: L oryh brx.</div><div class="line"><span class="number">11</span>: K nqxg aqw.</div><div class="line"><span class="number">12</span>: J mpwf zpv.</div><div class="line"><span class="number">13</span>: I love you.</div><div class="line"><span class="number">14</span>: H knud xnt.</div><div class="line"><span class="number">15</span>: G jmtc wms.</div><div class="line"><span class="number">16</span>: F ilsb vlr.</div><div class="line"><span class="number">17</span>: E hkra ukq.</div><div class="line"><span class="number">18</span>: D gjqz tjp.</div><div class="line"><span class="number">19</span>: C fipy sio.</div><div class="line"><span class="number">20</span>: B ehox rhn.</div><div class="line"><span class="number">21</span>: A dgnw qgm.</div><div class="line"><span class="number">22</span>: Z cfmv pfl.</div><div class="line"><span class="number">23</span>: Y belu oek.</div><div class="line"><span class="number">24</span>: X adkt ndj.</div><div class="line"><span class="number">25</span>: W zcjs mci.</div></pre></td></tr></table></figure><p>可以得到，密钥为13的结果是正确的可读的明文。  </p><p>这里附上一个网页版的凯撒加密轮盘：<a href="https://inventwithpython.com/cipherwheel/" target="_blank" rel="external">CipherWheel</a></p><h2 id="维吉尼亚加密法"><a href="#维吉尼亚加密法" class="headerlink" title="维吉尼亚加密法"></a>维吉尼亚加密法</h2><blockquote><p>人们在单一恺撒密码的基础上扩展出多表密码，称为“维吉尼亚”密码。该方法最早记录在吉奥万·巴蒂斯塔·贝拉索（ Giovan Battista Bellaso）于1553年所著的书《吉奥万·巴蒂斯塔·贝拉索先生的密码》（意大利语：La cifra del. Sig. Giovan Battista Bellaso）中。</p></blockquote><p>所以说，虽然维吉尼亚加密法和凯撒加密法类似，但是维吉尼亚加密法拥有更多的密钥，所以也被称为多表替代加密法。而它的安全性，相较于其他古典加密法，是很高的，曾一度被称作 <code>不可破译的加密法</code>。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E7%BB%B4%E5%90%89%E5%B0%BC%E4%BA%9A%E5%8A%A0%E5%AF%86.png" alt="维吉尼亚加密方阵"></p><p>相比凯撒加密轮盘，维吉尼亚加密法形成的是一个巨大的方阵。</p><p>方阵用第一行代表明文字母，第一列代表密钥字母。它们包围的区域就是加密表，每一行都是不重复的26个字母，但下一行相对于上一行，会发生一次位移。</p><p>如果明文只用其中某一个进行加密，那么这就只是简单的恺撒加密法了。但如果用方阵中不同的行加密不同的字母，它就是一种强大的加密法了。</p><p>例如，加密者可以用第5行来加密第1个字母，再用第20行来加密第2个字母，然后根据第13行来加密第3个字母，不断选择不同的行，加密的程度也就越高。</p><p>我们可以根据上面的图对如下明文进行加密：<br><code>TO BE OR NOT TO BE THAT IS THE QUESTION</code><br>当选定 <code>RELATIONS</code> 作为密钥时，加密过程是：明文第一个字母为 T，密钥第一个字母为 R，因此可以得到 R 行 T 列的值为 K，将 T 换成 K。依此类推，得出对应关系如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">密钥：RELAT IONSR ELATI ONSRE LATIO NSREL</div><div class="line">明文：TOBEO RNOTT OBETH ATIST HEQUE STION</div><div class="line">密文：KSMEH ZBBLK SMEMP OGAJX SEJCS FLZSY</div></pre></td></tr></table></figure><p>现在可以用代码去实现了。</p><h3 id="使用维吉尼亚加密法对信息进行加密和解密"><a href="#使用维吉尼亚加密法对信息进行加密和解密" class="headerlink" title="使用维吉尼亚加密法对信息进行加密和解密"></a>使用维吉尼亚加密法对信息进行加密和解密</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># vigenereCipher.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">LETTERS = string.ascii_uppercase  <span class="comment"># 获得二十六个英文大写字母</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">Vigen</span>è<span class="title">reCipher</span><span class="params">(message, key, mode)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    message: 明文</span></div><div class="line"><span class="string">    key: 密钥（不定长单词串）</span></div><div class="line"><span class="string">    mode: 设定模式：加密（encrypt）；解密（decrypt）</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    translated = []  <span class="comment"># 翻译后字符串</span></div><div class="line">    keyIndex = <span class="number">0</span></div><div class="line">    key = key.upper()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> symbol <span class="keyword">in</span> message:</div><div class="line">        index = LETTERS.find(symbol.upper())</div><div class="line">        <span class="keyword">if</span> index != <span class="number">-1</span>:  <span class="comment"># 如果 index 等于 -1 代表 symbol 不在 LETTERS 中</span></div><div class="line">            <span class="keyword">if</span> mode == <span class="string">'encrypt'</span>:</div><div class="line">                index = (index + LETTERS.find(key[keyIndex])) % len(LETTERS)  <span class="comment"># 判断当前是加密模式还是解密模式</span></div><div class="line">            <span class="keyword">elif</span> mode == <span class="string">'decrypt'</span>:</div><div class="line">                index = (index - LETTERS.find(key[keyIndex])) % len(LETTERS)</div><div class="line"></div><div class="line">            <span class="comment"># 将翻译后的字符加入到 translated 列表</span></div><div class="line">            <span class="keyword">if</span> symbol.isupper():</div><div class="line">                translated.append(LETTERS[index])</div><div class="line">            <span class="keyword">elif</span> symbol.islower():</div><div class="line">                translated.append(LETTERS[index].lower())</div><div class="line"></div><div class="line">            keyIndex += <span class="number">1</span>  <span class="comment"># 不断移动密钥的索引，如果索引与密钥长度相等，就要重新置0</span></div><div class="line">            <span class="keyword">if</span> keyIndex == len(key):</div><div class="line">                keyIndex = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            translated.append(symbol)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(translated)  <span class="comment"># 将翻译后的字符组合成字符串</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vigen</span>è<span class="title">reEncrypt</span><span class="params">(message, key)</span>:</span></div><div class="line">    <span class="keyword">return</span> VigenèreCipher(message, key, <span class="string">'encrypt'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">vigen</span>è<span class="title">reDecrypt</span><span class="params">(message, key)</span>:</span></div><div class="line">    <span class="keyword">return</span> VigenèreCipher(message, key, <span class="string">'decrypt'</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(vigenèreEncrypt(<span class="string">'Nothing is possible.'</span>, <span class="string">'Ariel'</span>))</div><div class="line">    print(vigenèreDecrypt(<span class="string">'Nfbltnx qw aojammlv.'</span>, <span class="string">'Ariel'</span>))</div><div class="line">    print(vigenèreEncrypt(<span class="string">'I have a lot of money.'</span>, <span class="string">'mathematics'</span>))</div><div class="line">    print(vigenèreDecrypt(<span class="string">'U htci m lhb qx yoglc.'</span>, <span class="string">'mathematics'</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Nfbltnx qw aojammlv.</div><div class="line">Nothing <span class="keyword">is</span> possible.</div><div class="line">U htci m lhb qx yoglc.</div><div class="line">I have a lot of money.</div></pre></td></tr></table></figure><h3 id="爆破维吉尼亚加密法"><a href="#爆破维吉尼亚加密法" class="headerlink" title="爆破维吉尼亚加密法"></a>爆破维吉尼亚加密法</h3><p>我们可以先来了解一下维吉尼亚加密法的背景：</p><blockquote><p>公元16世纪晚期，法国外交官维吉尼亚（Vigenere）提出著名的维吉尼亚方阵密表和维吉尼亚密码(Vigenerecypher)，这是一种多表加密的替代密码。Vigenere 密码的出现，使得先前对单表置换用的简单频率分析方法失效。<br>公元1863年，普鲁士少校卡西斯基（Kasiski）提出了 Kasiski 法，此方法从密钥的长度着手破解Vigenere 密码。</p></blockquote><ul><li>基本思想</li></ul><p>通常，用 <code>Vigenere</code> 密码加密，明文中的相同字母在密文中不会对应相同的字母。但是，如果两个相同字母序列间距正好是密钥长度的倍数时，也可能产生相同的密文序列。寻找重复出现的字母序列，并求其长度的过程被称为 <code>Kasiski</code> 试验，即 <code>Kasiski</code> 法。<br><code>Kasiski</code> 法 在解密 <code>Vigenere</code> 密码时，利用的是多表体系的弱点：相同的明文字母组，在明文序列中间隔的字母数为 d（d 是密钥的长度）的倍数时，则明文字母组对应的密文字母组也必相同。反之则不一定，但相同的概率很大。如果将密文中相同字母组找出来，并对其间隔的距离进行研究，找出它们的最大公因子，则该因子是密钥长度的概率是较大的。  </p><ul><li>基本原理</li></ul><p>基于 <code>Kasiski</code> 法的基本思想，<code>Kasiski</code> 法 测试过程如下：首先对密文中任意两个紧邻字符的出现位置进行统计，然后记下它们各次间出现的间隔。然后写出这些间隔对应数字的因数，最后对这些因数进行统计，一般来说，次数出现最多的几个因数极有可能就是密钥字符串的长度。其依据是：对于两个连续出现的字符在这次与下次出现的间隔极有可能是采用相同密钥加密形成的，从而这之间的间隔也极有可能就是密钥长度的倍数。<br>一般在使用 <code>Kasiski</code> 法测试密钥长度时，先搜索长度至少为3的相同的密文段，记录这些相同密文段到起始点之间的距离；假如得到如下几个距离 <code>X1,X2,...</code>，猜测密钥长度 <code>m</code> 为这些 <code>Xi</code> 的最大公因子的因子。</p><ul><li>分析步骤</li></ul><ol><li>在密文中标出重复的三个或多个字符序列；</li><li>对每一个字符序列，记下序列第一个字符的起始位置；</li><li>计算每个重复序列与第一个序列间的距离；</li><li>对每个距离求出所有因数有效的因数；</li><li>密钥的长度极有可能为步骤4中的出现次数较多的前面几位因数。</li></ol><p>知道如何得到密钥的长度后，还要了解一个现象：英文字母的频度。</p><p>英文中每个字母出现的频度并不都是一样的，曾有人对大量的英文书籍、文献和字典等做过统计，并汇总如下表：</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E9%A2%91%E5%BA%A6.png" alt="英文频度"></p><p>可以看到，<code>ETAOIN</code> 是英文中出现频度最高的六个字母，而 <code>VKJXQZ</code> 则是出现频度最低的六个字母。</p><p>使用凯撒加密法或者维吉尼亚加密法时，都只是将原来的字母进行一定计算后再移位，替换成别的字母。原先的字母会变，但它们的频度不会变。明文加密后形成的密文，它的字母所拥有的频度，是与明文是差不多的。</p><p>给定一个文本：</p><blockquote><p>“I rc ascwuiluhnviwuetnh,osgaa ice tipeeeee slnatsfietgi tittynecenisl. e fo f fnc isltn sn o a yrs sd onisli ,l erglei trhfmwfrogotn,l  stcofiit.aea  wesn,lnc ee w,l eIh eeehoer ros  iol er snh nl oahsts  ilasvih  tvfeh rtira id thatnie.im ei-dlmf i  thszonsisehroe, aiehcdsanahiec  gv gyedsB affcahiecesd d lee   onsdihsoc nin cethiTitx  eRneahgin r e teom fbiotd  n  ntacscwevhtdhnhpiwru”</p></blockquote><p>我们统计一下这个文本中每个单词的频率，并对它进行从高到低排序：<code>EISNTHAOCLRFDGWVMUYBPZXQJK</code>。</p><p><img src="http://myblog-1256123790.cossh.myqcloud.com/img%E9%A2%91%E7%8E%87%E5%AF%B9%E6%AF%94.jpg" alt="频率对比"></p><p>将获得的排序好的字母和英文中出现频率从高到底的字母进行一一比较。我们可以看到：文本的字母频率表里的前六个字母，有四个在英文字母频率表的前六个字母里；文本的字母频率表里的后六个字母，有五个在英文字母频率表的后六个字母里。这意味着这个文本的字母出现频度很接近英文中的字母出现频度，我们定义这为<code>频率匹配分值</code>，而例子中的<code>频率匹配分值</code>应该为9。这意味着如果找对了密钥，通过密钥解密得到的明文，它会有较高的频率匹配分值。<br>再进一步想，知道密钥的长度后，从初始位置开始，每隔密钥长度取一个字母，组成一个字符串，我们用26个字母直接对这个字符串进行解密，如果得到的<code>频率匹配分值</code>较高，说明这个密钥可能包含这个字母。得到密钥每个位置可能拥有的字符后，排列组合一下密钥，轮番带入进行解密，就有可能找到正确的密钥了。整理一下思路，可以敲代码了。</p><p>为了完成爆破，我们需要先解决计算频率匹配分值的问题，可以创建一个 <code>freqAnalysis.py</code> 文件，里面写入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># affineCipher.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line">englishLetterFreq = &#123;<span class="string">'E'</span>: <span class="number">12.70</span>, <span class="string">'T'</span>: <span class="number">9.06</span>, <span class="string">'A'</span>: <span class="number">8.17</span>, <span class="string">'O'</span>: <span class="number">7.51</span>, <span class="string">'I'</span>: <span class="number">6.97</span>, <span class="string">'N'</span>: <span class="number">6.75</span>, <span class="string">'S'</span>: <span class="number">6.33</span>, <span class="string">'H'</span>: <span class="number">6.09</span>, <span class="string">'R'</span>: <span class="number">5.99</span>, <span class="string">'D'</span>: <span class="number">4.25</span>, <span class="string">'L'</span>: <span class="number">4.03</span>, <span class="string">'C'</span>: <span class="number">2.78</span>, <span class="string">'U'</span>: <span class="number">2.76</span>, <span class="string">'M'</span>: <span class="number">2.41</span>, <span class="string">'W'</span>: <span class="number">2.36</span>, <span class="string">'F'</span>: <span class="number">2.23</span>, <span class="string">'G'</span>: <span class="number">2.02</span>, <span class="string">'Y'</span>: <span class="number">1.97</span>, <span class="string">'P'</span>: <span class="number">1.93</span>, <span class="string">'B'</span>: <span class="number">1.29</span>, <span class="string">'V'</span>: <span class="number">0.98</span>, <span class="string">'K'</span>: <span class="number">0.77</span>, <span class="string">'J'</span>: <span class="number">0.15</span>, <span class="string">'X'</span>: <span class="number">0.15</span>, <span class="string">'Q'</span>: <span class="number">0.10</span>, <span class="string">'Z'</span>: <span class="number">0.07</span>&#125;</div><div class="line">ETAOIN = <span class="string">'ETAOINSHRDLCUMWFGYPBVKJXQZ'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLetterCount</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">'''根据给定的 message，计算每个英文字母出现的次数，并返回一个结构为 '字母：频度' 的字典'''</span></div><div class="line">    <span class="comment"># 初始化一个包含二十六个大写英文字母的字典，默认值为0</span></div><div class="line">    letterCount = dict.fromkeys(string.ascii_uppercase, <span class="number">0</span>)</div><div class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> message.upper():</div><div class="line">        <span class="keyword">if</span> letter <span class="keyword">in</span> letterCount:</div><div class="line">            letterCount[letter] += <span class="number">1</span>  <span class="comment"># 计数，相当于得到频度</span></div><div class="line">    <span class="keyword">return</span> letterCount</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getFrequencyOrder</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">'''根据给定的 message，计算每个英文字母出现的次数对英文字母进行排序，并返回包含频度从高到低的字母的字符串'''</span></div><div class="line">    letterToFreq = getLetterCount(message)</div><div class="line">    freqToLetter = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="comment"># 创建键为频度，值为字母列表的字典，相同频度的字母在一个列表中</span></div><div class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> string.ascii_uppercase:</div><div class="line">        freqToLetter.setdefault(letterToFreq[letter], []).append(letter)</div><div class="line"></div><div class="line">    <span class="comment"># 将字母列表的值按照 ETAOIN 字符串内的字母顺序逆序排序，并合并成一个字符串</span></div><div class="line">    <span class="comment"># 为什么要逆序呢？比如 D 和 W 的频度都是1，因为英文字母中，D 出现的频度大于 W，现在在消息中 D 和 W 频度相等，也就代表 W 的频度其实更大一些，也就要排在 D 的前面</span></div><div class="line">    <span class="keyword">for</span> freq <span class="keyword">in</span> freqToLetter:</div><div class="line">        freqToLetter[freq].sort(key=ETAOIN.find, reverse=<span class="keyword">True</span>)</div><div class="line">        freqToLetter[freq] = <span class="string">''</span>.join(freqToLetter[freq])</div><div class="line"></div><div class="line">    <span class="comment"># 根据频度从大到小排序，并创建一个遵从这个顺序的字母列表</span></div><div class="line">    freqToLetter = sorted(freqToLetter.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>], reverse=<span class="keyword">True</span>)</div><div class="line">    freqOrder = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> freqToLetter]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(freqOrder)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">englishFreqMatchScore</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">'''计算频率匹配分值'''</span></div><div class="line">    freqOrder = getFrequencyOrder(message)</div><div class="line">    matchScore = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="comment"># 统计前六位字符和后六位字符与 ETAOIN 字符串的匹配程度</span></div><div class="line">    <span class="keyword">for</span> commonLetter <span class="keyword">in</span> ETAOIN[:<span class="number">6</span>]:</div><div class="line">        <span class="keyword">if</span> commonLetter <span class="keyword">in</span> freqOrder[:<span class="number">6</span>]:</div><div class="line">            matchScore += <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> uncommonLetter <span class="keyword">in</span> ETAOIN[<span class="number">-6</span>:]:</div><div class="line">        <span class="keyword">if</span> uncommonLetter <span class="keyword">in</span> freqOrder[<span class="number">-6</span>:]:</div><div class="line">            matchScore += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> matchScore</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    message = <span class="string">'ddddbbbaaceeffj'</span></div><div class="line">    print(getLetterCount(message))</div><div class="line">    print(getFrequencyOrder(message))</div><div class="line">    print(englishFreqMatchScore(message))</div></pre></td></tr></table></figure><p>这样就搞定了频率分析的问题。<br>如果明文包含了大量的英文时，就有可能获得了正确的密钥。如果我们一个个看解密后的文字，费时劳神，可以通过字典文件，根据字符串是否在字典文件中判断它是不是英文。<br>请参考 <a href="https://files-1256123790.cos.ap-shanghai.myqcloud.com/detectEnglish.py" target="_blank" rel="external">detectEnglish.py</a> &amp; <a href="https://files-1256123790.cos.ap-shanghai.myqcloud.com/dictionary.txt" target="_blank" rel="external">dictionary.txt</a>。</p><p>完成了以上的准备工作，还要按照一开始的分析步骤，计算密钥的可能长度，创建密钥可能的字母组合，实施爆破。上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># hacker.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> itertools, re, string</div><div class="line"><span class="keyword">import</span> freqAnalysis, detectEnglish, vigenereCipher</div><div class="line"></div><div class="line">LETTERS = string.ascii_uppercase  <span class="comment"># 获得26个大写的英文字母</span></div><div class="line">NONLETTERS_PATTERN = re.compile(<span class="string">'[^A-Z]'</span>)  <span class="comment"># 预先编译去除大写字母外字符的模式</span></div><div class="line">MAX_KEY_LENGTH = <span class="number">16</span>  <span class="comment"># 设置可接受的最大的 key 的长度</span></div><div class="line">SILENT_MODE = <span class="keyword">False</span>  <span class="comment"># 静默模式，如果不想程序输出运行过程，就设置为 False</span></div><div class="line">NUM_MOST_FREQ_LETTERS = <span class="number">4</span>  <span class="comment"># 设定备选字符的长度</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">findRepeatSequencesSpacings</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">'''找到 message 中所有的长度为 3~6 的重复序列，并计算每个重复序列离最开始的序列的间距。'''</span></div><div class="line">    message = NONLETTERS_PATTERN.sub(<span class="string">''</span>, message.upper())</div><div class="line">    seqSpacings = &#123;&#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> seqLen <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">6</span>):</div><div class="line">        <span class="keyword">for</span> seqStart <span class="keyword">in</span> range(len(message) - seqLen):</div><div class="line">            seq = message[seqStart:seqStart + seqLen]</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(seqStart + seqLen, len(message) - seqLen):</div><div class="line">                <span class="keyword">if</span> message[i:i + seqLen] == seq:</div><div class="line">                    seqSpacings.setdefault(seq, []).append(i - seqStart)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> seqSpacings</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getUsefulFactors</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="string">'''返回有意义的因数。比如1是没有意义的，因数太大也是没有意义的。因为所求的因数是为了反映密钥的长度，如果太大，比如大于16，就很难再有效时间内完成后续的爆破。</span></div><div class="line"><span class="string">    比如 getUsefulFactors(144) 将会返回 [2, 72, 3, 48, 4, 36, 6, 24, 8, 18, 9, 16, 12]。</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span> []</div><div class="line">    factors = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, MAX_KEY_LENGTH + <span class="number">1</span>):</div><div class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</div><div class="line">            factors.append(i)</div><div class="line">            factors.append(num // i)</div><div class="line">    <span class="keyword">if</span> <span class="number">1</span> <span class="keyword">in</span> factors:</div><div class="line">        factors.remove(<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> list(set(factors))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMostCommonFactors</span><span class="params">(seqFactors)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    seqFactors 是一个字典，它的键是重复序列, 值是因数列表。</span></div><div class="line"><span class="string">    比如 seqFactors = &#123;'GFD': [2, 3, 4, 6, 9, 12, 18, 23, 36, 46, 69, 92, 138, 207], 'ALW': [2, 3, 4, 6, ...], ...&#125;。</span></div><div class="line"><span class="string">    将返回一个包含因数和因数出现次数元组的列表。</span></div><div class="line"><span class="string">    '''</span> </div><div class="line">    factorCounts = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> seq <span class="keyword">in</span> seqFactors:</div><div class="line">        factorList = seqFactors[seq]</div><div class="line">        <span class="keyword">for</span> factor <span class="keyword">in</span> factorList:</div><div class="line">            <span class="keyword">if</span> factor <span class="keyword">not</span> <span class="keyword">in</span> factorCounts:</div><div class="line">                factorCounts[factor] = <span class="number">0</span></div><div class="line">            factorCounts[factor] += <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="comment"># 筛选得到小于16的因数列表</span></div><div class="line">    factorsByCount = []</div><div class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> factorCounts:</div><div class="line">        <span class="keyword">if</span> factor &lt;= MAX_KEY_LENGTH:</div><div class="line">            <span class="comment"># factorsByCount 可能是包含这样值的列表：[(3, 497), (2, 487), ...]，即包含了 (factor, factorCount) 元组的列表</span></div><div class="line">            factorsByCount.append((factor, factorCounts[factor]))</div><div class="line">    </div><div class="line">    <span class="comment"># 根据因数出现的次数从大到小排序</span></div><div class="line">    factorsByCount.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> factorsByCount</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">kasiskiExamination</span><span class="params">(ciphertext)</span>:</span></div><div class="line">    <span class="string">'''卡西斯基试验法，根据重复序列和它们间隔的键值对，计算得到密钥有可能的长度。'''</span></div><div class="line">    <span class="comment"># 得到重复序列和其间隔的键值对</span></div><div class="line">    repeatedSeqSpacings = findRepeatSequencesSpacings(ciphertext)</div><div class="line">    </div><div class="line">    <span class="comment"># 获得重复序列间隔值的所有有效因数</span></div><div class="line">    seqFactors = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> seq <span class="keyword">in</span> repeatedSeqSpacings:</div><div class="line">        seqFactors[seq] = []</div><div class="line">        <span class="keyword">for</span> spacing <span class="keyword">in</span> repeatedSeqSpacings[seq]:</div><div class="line">            seqFactors[seq].extend(getUsefulFactors(spacing))</div><div class="line"></div><div class="line">    <span class="comment"># 获得排序好的包含重复序列因数和其出现次数的列表</span></div><div class="line">    factorsByCount = getMostCommonFactors(seqFactors)</div><div class="line"></div><div class="line">    <span class="comment"># 获得包含 key 可能长度的列表  </span></div><div class="line">    allLikelyKeyLengths = [twoIntTuple[<span class="number">0</span>] <span class="keyword">for</span> twoIntTuple <span class="keyword">in</span> factorsByCount]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> allLikelyKeyLengths</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNthSubkeysLetters</span><span class="params">(n, keyLength, message)</span>:</span></div><div class="line">    <span class="string">'''从指定第 n 个位置开始，每隔 keyLength 长度，就取一个字符，直到遍历结束，返回取出的字符组合的字符串。</span></div><div class="line"><span class="string">    举例：</span></div><div class="line"><span class="string">    1. getNthSubkeysLetters(1, 3, 'ABCABCABC') returns 'AAA'</span></div><div class="line"><span class="string">    2. getNthSubkeysLetters(2, 3, 'ABCABCABC') returns 'BBB'</span></div><div class="line"><span class="string">    3. getNthSubkeysLetters(3, 3, 'ABCABCABC') returns 'CCC'</span></div><div class="line"><span class="string">    4. getNthSubkeysLetters(1, 5, 'ABCDEFGHI') returns 'AF'</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    message = NONLETTERS_PATTERN.sub(<span class="string">''</span>, message)</div><div class="line"></div><div class="line">    i = n - <span class="number">1</span></div><div class="line">    letters = []</div><div class="line">    <span class="keyword">while</span> i &lt; len(message):</div><div class="line">        letters.append(message[i])</div><div class="line">        i += keyLength</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(letters)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">attemptHackWithKeyLength</span><span class="params">(ciphertext, mostLikelyKeyLength)</span>:</span></div><div class="line">    <span class="string">'''根据 key 可能的长度和计算好的 key 每一位可能包含的字符，对密文进行爆破'''</span></div><div class="line">    ciphertextUp = ciphertext.upper()</div><div class="line"></div><div class="line">    allFreqScores = []</div><div class="line">    <span class="keyword">for</span> nth <span class="keyword">in</span> range(<span class="number">1</span>, mostLikelyKeyLength + <span class="number">1</span>):</div><div class="line">        <span class="comment"># 获得间距为 mostLikelyKeyLength 的相邻字符组成的字符串</span></div><div class="line">        nthLetters = getNthSubkeysLetters(nth, mostLikelyKeyLength, ciphertextUp)</div><div class="line"></div><div class="line">        freqScores = []</div><div class="line">        <span class="keyword">for</span> possibleKey <span class="keyword">in</span> LETTERS:</div><div class="line">            <span class="comment"># 分别用二十六个字母对获得的字符串进行爆破并计算频率匹配分值</span></div><div class="line">            decryptedText = vigenereCipher.vigenèreDecrypt(nthLetters, possibleKey)</div><div class="line">            keyAndFreqMatchTuple = (possibleKey, freqAnalysis.englishFreqMatchScore(decryptedText))</div><div class="line"></div><div class="line">            <span class="comment"># freqScores 列表将会包含 mostLikelyKeyLength 个元组，元组包含了用于爆破的密钥和计算得到的频率匹配分值</span></div><div class="line">            freqScores.append(keyAndFreqMatchTuple)</div><div class="line"></div><div class="line">        <span class="comment"># 按照频率匹配分值进行从大到小排序</span></div><div class="line">        freqScores.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">        allFreqScores.append(freqScores[:NUM_MOST_FREQ_LETTERS]) <span class="comment"># 只添加 freqScores 列表中排名前 NUM_MOST_FREQ_LETTERS 个元组，默认添加前四个</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> SILENT_MODE:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(allFreqScores)):</div><div class="line">            <span class="comment"># 输出密钥的字母可能是哪些，默认只有四个</span></div><div class="line">            print(<span class="string">'* Possible letters for letter &#123;&#125; of the key: '</span>.format(i + <span class="number">1</span>), end=<span class="string">''</span>)</div><div class="line">            <span class="keyword">for</span> freqScore <span class="keyword">in</span> allFreqScores[i]:</div><div class="line">                print(<span class="string">'&#123;&#125; '</span>.format(freqScore[<span class="number">0</span>]), end=<span class="string">''</span>)</div><div class="line">            print()</div><div class="line"></div><div class="line">    <span class="comment"># 创建密钥可能长度的各种字母组合</span></div><div class="line">    <span class="keyword">for</span> indexes <span class="keyword">in</span> itertools.product(range(NUM_MOST_FREQ_LETTERS), repeat=mostLikelyKeyLength):</div><div class="line">        <span class="comment"># 根据 allFreqScores 里的元素创建可能的密钥</span></div><div class="line">        possibleKey = <span class="string">''</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(mostLikelyKeyLength):</div><div class="line">            possibleKey += allFreqScores[i][indexes[i]][<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> SILENT_MODE:</div><div class="line">            print(<span class="string">'Attempting with key: &#123;&#125;'</span>.format(possibleKey))</div><div class="line"></div><div class="line">        decryptedText = vigenereCipher.vigenèreDecrypt(ciphertextUp, possibleKey)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> detectEnglish.isEnglish(decryptedText, wordPercentage=<span class="number">60</span>):</div><div class="line">            <span class="comment"># 根据原来输入的 ciphertext 来复原字母的大小写</span></div><div class="line">            origCase = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(ciphertext)):</div><div class="line">                <span class="keyword">if</span> ciphertext[i].isupper():</div><div class="line">                    origCase.append(decryptedText[i].upper())</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    origCase.append(decryptedText[i].lower())</div><div class="line">            decryptedText = <span class="string">''</span>.join(origCase)</div><div class="line"></div><div class="line">            <span class="comment"># 反馈给用户检查是否找到了正确的密钥</span></div><div class="line">            print(<span class="string">'&gt; Possible plaintext hack with key &#123;&#125;:'</span>.format(possibleKey))</div><div class="line">            print(<span class="string">'['</span>,decryptedText[:<span class="number">200</span>], <span class="string">']'</span>) <span class="comment"># only show first 200 characters</span></div><div class="line">            choice = input(<span class="string">'&gt; Enter (y)es for done, or press Enter for continue: '</span>)</div><div class="line">            <span class="keyword">if</span> choice == <span class="string">'y'</span> <span class="keyword">or</span> choice == <span class="string">'Y'</span> <span class="keyword">or</span> choice == <span class="string">'yes'</span>:</div><div class="line">                <span class="keyword">return</span> decryptedText</div><div class="line">            print()</div><div class="line"></div><div class="line">    <span class="comment"># 如果一直没有发现正确的密钥，说明爆破失败</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hackVigenere</span><span class="params">(ciphertext)</span>:</span></div><div class="line">    <span class="string">'''试验卡西斯基试验法来爆破维吉尼亚加密法'''</span></div><div class="line">    allLikelyKeyLengths = kasiskiExamination(ciphertext)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> allLikelyKeyLengths:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> SILENT_MODE:</div><div class="line">            keyLengthStr = <span class="string">' '</span>.join([ str(length) <span class="keyword">for</span> length <span class="keyword">in</span> allLikelyKeyLengths])</div><div class="line">            print(<span class="string">'Kasiski Examination results say the most likely key lengths are: '</span> + keyLengthStr)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> keyLength <span class="keyword">in</span> allLikelyKeyLengths:</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> SILENT_MODE:</div><div class="line">                print(<span class="string">'\nAttempting hack with key length &#123;&#125; (&#123;&#125; possible keys)...'</span>.format(keyLength, NUM_MOST_FREQ_LETTERS ** keyLength))</div><div class="line">            hackedMessage = attemptHackWithKeyLength(ciphertext, keyLength)</div><div class="line">            <span class="keyword">if</span> hackedMessage != <span class="keyword">None</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> allLikelyKeyLengths <span class="keyword">or</span> hackedMessage == <span class="keyword">None</span>:</div><div class="line">    <span class="comment"># 如果卡西斯基试验法没有得到结果，就选择暴力破解</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> SILENT_MODE:</div><div class="line">            print(<span class="string">'Unable to hack message with likely key length(s). Brute forcing key length...'</span>)</div><div class="line">        <span class="keyword">for</span> keyLength <span class="keyword">in</span> range(<span class="number">1</span>, MAX_KEY_LENGTH + <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> keyLength <span class="keyword">not</span> <span class="keyword">in</span> allLikelyKeyLengths:</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> SILENT_MODE:</div><div class="line">                    print(<span class="string">'Attempting hack with key length &#123;&#125; (&#123;&#125; possible keys)...'</span>.format(keyLength, NUM_MOST_FREQ_LETTERS ** keyLength))</div><div class="line">                hackedMessage = attemptHackWithKeyLength(ciphertext, keyLength)</div><div class="line">                <span class="keyword">if</span> hackedMessage != <span class="keyword">None</span>:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> hackedMessage</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(message)</span>:</span></div><div class="line">    hackedMessage = hackVigenere(message)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> hackedMessage != <span class="keyword">None</span>:</div><div class="line">        print()</div><div class="line">        print(hackedMessage)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'Failed to hack.'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    message1 = <span class="string">"""Adiz Avtzqeci Tmzubb wsa m Pmilqev halpqavtakuoi, lgouqdaf, kdmktsvmztsl, izr xoexghzr kkusitaaf. Vz wsa twbhdg ubalmmzhdad qz hce vmhsgohuqbo ox kaakulmd gxiwvos, krgdurdny i rcmmstugvtawz ca tzm ocicwxfg jf "stscmilpy" oid "uwydptsbuci" wabt hce Lcdwig eiovdnw. Bgfdny qe kddwtk qjnkqpsmev ba pz tzm roohwz at xoexghzr kkusicw izr vrlqrwxist uboedtuuznum. Pimifo Icmlv Emf DI, Lcdwig owdyzd xwd hce Ywhsmnemzh Xovm mby Cqxtsm Supacg (GUKE) oo Bdmfqclwg Bomk, Tzuhvif'a ocyetzqofifo ositjm. Rcm a lqys ce oie vzav wr Vpt 8, lpq gzclqab mekxabnittq tjr Ymdavn fihog cjgbhvnstkgds. Zm psqikmp o iuejqf jf lmoviiicqg aoj jdsvkavs Uzreiz qdpzmdg, dnutgrdny bts helpar jf lpq pjmtm, mb zlwkffjmwktoiiuix avczqzs ohsb ocplv nuby swbfwigk naf ohw Mzwbms umqcifm. Mtoej bts raj pq kjrcmp oo tzm Zooigvmz Khqauqvl Dincmalwdm, rhwzq vz cjmmhzd gvq ca tzm rwmsl lqgdgfa rcm a kbafzd-hzaumae kaakulmd, hce SKQ. Wi 1948 Tmzubb jgqzsy Msf Zsrmsv'e Qjmhcfwig Dincmalwdm vt Eizqcekbqf Pnadqfnilg, ivzrw pq onsaafsy if bts yenmxckmwvf ca tzm Yoiczmehzr uwydptwze oid tmoohe avfsmekbqr dn eifvzmsbuqvl tqazjgq. Pq kmolm m dvpwz ab ohw ktshiuix pvsaa at hojxtcbefmewn, afl bfzdakfsy okkuzgalqzu xhwuuqvl jmmqoigve gpcz ie hce Tmxcpsgd-Lvvbgbubnkq zqoxtawz, kciup isme xqdgo otaqfqev qz hce 1960k. Bgfdny'a tchokmjivlabk fzsmtfsy if i ofdmavmz krgaqqptawz wi 1952, wzmz vjmgaqlpad iohn wwzq goidt uzgeyix wi tzm Gbdtwl Wwigvwy. Vz aukqdoev bdsvtemzh rilp rshadm tcmmgvqg (xhwuuqvl uiehmalqab) vs sv mzoejvmhdvw ba dmikwz. Hpravs rdev qz 1954, xpsl whsm tow iszkk jqtjrw pug 42id tqdhcdsg, rfjm ugmbddw xawnofqzu. Vn avcizsl lqhzreqzsy tzif vds vmmhc wsa eidcalq; vds ewfvzr svp gjmw wfvzrk jqzdenmp vds vmmhc wsa mqxivmzhvl. Gv 10 Esktwunsm 2009, fgtxcrifo mb Dnlmdbzt uiydviyv, Nfdtaat Dmiem Ywiikbqf Bojlab Wrgez avdw iz cafakuog pmjxwx ahwxcby gv nscadn at ohw Jdwoikp scqejvysit xwd "hce sxboglavs kvy zm ion tjmmhzd." Sa at Haq 2012 i bfdvsbq azmtmd'g widt ion bwnafz tzm Tcpsw wr Zjrva ivdcz eaigd yzmbo Tmzubb a kbmhptgzk dvrvwz wa efiohzd."""</span></div><div class="line">    message2 = <span class="string">"""Ej xvvvfea riiw azzwjmcqik dw ew wi r hcmhiu syl witgxm v hfuewm (pzcp bcid) kz Q byvkd Q rej lcgdrx lz iktvsdm olve. Mco ek lsm nedw eqhi, Z ola yijhpzvxvdj zpreayo varq qzjq kzpu vru lsmdv vezbdsesw iwyjw. T evw mwcg xsexwqxxvv lvy lrv yw dhvs hpvx Z olvoiu lz lj azls ut pzxp. Q ceu swevcj wikzpcwo qi qrls iih jg T kcsjw ew kyikfm olrl. T ldhe'l vvja zl lb olv ltuz, fll xg qiiq dmiwv gq azpw-ozzol nsd jvwvv zv olv xlko xyse Q rej yzwy ek elbc."""</span></div><div class="line">    main(message1)</div><div class="line">    <span class="comment">#main(message2)</span></div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">Kasiski Examination results say the most likely key lengths are: <span class="number">3</span> <span class="number">2</span> <span class="number">6</span> <span class="number">4</span> <span class="number">12</span> <span class="number">8</span> <span class="number">9</span> <span class="number">16</span> <span class="number">5</span> <span class="number">11</span> <span class="number">10</span> <span class="number">15</span> <span class="number">7</span> <span class="number">14</span> <span class="number">13</span></div><div class="line"></div><div class="line">Attempting hack <span class="keyword">with</span> key length <span class="number">3</span> (<span class="number">64</span> possible keys)...</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">1</span> of the key: A L M E</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">2</span> of the key: S N O C</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">3</span> of the key: V I Z B</div><div class="line">Attempting <span class="keyword">with</span> key: ASV</div><div class="line">Attempting <span class="keyword">with</span> key: ASI</div><div class="line">Attempting <span class="keyword">with</span> key: ASZ</div><div class="line">Attempting <span class="keyword">with</span> key: ASB</div><div class="line">Attempting <span class="keyword">with</span> key: ANV</div><div class="line">Attempting <span class="keyword">with</span> key: ANI</div><div class="line">Attempting <span class="keyword">with</span> key: ANZ</div><div class="line">Attempting <span class="keyword">with</span> key: ANB</div><div class="line">Attempting <span class="keyword">with</span> key: AOV</div><div class="line">Attempting <span class="keyword">with</span> key: AOI</div><div class="line">Attempting <span class="keyword">with</span> key: AOZ</div><div class="line">Attempting <span class="keyword">with</span> key: AOB</div><div class="line">Attempting <span class="keyword">with</span> key: ACV</div><div class="line">Attempting <span class="keyword">with</span> key: ACI</div><div class="line">Attempting <span class="keyword">with</span> key: ACZ</div><div class="line">Attempting <span class="keyword">with</span> key: ACB</div><div class="line">Attempting <span class="keyword">with</span> key: LSV</div><div class="line">Attempting <span class="keyword">with</span> key: LSI</div><div class="line">Attempting <span class="keyword">with</span> key: LSZ</div><div class="line">Attempting <span class="keyword">with</span> key: LSB</div><div class="line">Attempting <span class="keyword">with</span> key: LNV</div><div class="line">Attempting <span class="keyword">with</span> key: LNI</div><div class="line">Attempting <span class="keyword">with</span> key: LNZ</div><div class="line">Attempting <span class="keyword">with</span> key: LNB</div><div class="line">Attempting <span class="keyword">with</span> key: LOV</div><div class="line">Attempting <span class="keyword">with</span> key: LOI</div><div class="line">Attempting <span class="keyword">with</span> key: LOZ</div><div class="line">Attempting <span class="keyword">with</span> key: LOB</div><div class="line">Attempting <span class="keyword">with</span> key: LCV</div><div class="line">Attempting <span class="keyword">with</span> key: LCI</div><div class="line">Attempting <span class="keyword">with</span> key: LCZ</div><div class="line">Attempting <span class="keyword">with</span> key: LCB</div><div class="line">Attempting <span class="keyword">with</span> key: MSV</div><div class="line">Attempting <span class="keyword">with</span> key: MSI</div><div class="line">Attempting <span class="keyword">with</span> key: MSZ</div><div class="line">Attempting <span class="keyword">with</span> key: MSB</div><div class="line">Attempting <span class="keyword">with</span> key: MNV</div><div class="line">Attempting <span class="keyword">with</span> key: MNI</div><div class="line">Attempting <span class="keyword">with</span> key: MNZ</div><div class="line">Attempting <span class="keyword">with</span> key: MNB</div><div class="line">Attempting <span class="keyword">with</span> key: MOV</div><div class="line">Attempting <span class="keyword">with</span> key: MOI</div><div class="line">Attempting <span class="keyword">with</span> key: MOZ</div><div class="line">Attempting <span class="keyword">with</span> key: MOB</div><div class="line">Attempting <span class="keyword">with</span> key: MCV</div><div class="line">Attempting <span class="keyword">with</span> key: MCI</div><div class="line">Attempting <span class="keyword">with</span> key: MCZ</div><div class="line">Attempting <span class="keyword">with</span> key: MCB</div><div class="line">Attempting <span class="keyword">with</span> key: ESV</div><div class="line">Attempting <span class="keyword">with</span> key: ESI</div><div class="line">Attempting <span class="keyword">with</span> key: ESZ</div><div class="line">Attempting <span class="keyword">with</span> key: ESB</div><div class="line">Attempting <span class="keyword">with</span> key: ENV</div><div class="line">Attempting <span class="keyword">with</span> key: ENI</div><div class="line">Attempting <span class="keyword">with</span> key: ENZ</div><div class="line">Attempting <span class="keyword">with</span> key: ENB</div><div class="line">Attempting <span class="keyword">with</span> key: EOV</div><div class="line">Attempting <span class="keyword">with</span> key: EOI</div><div class="line">Attempting <span class="keyword">with</span> key: EOZ</div><div class="line">Attempting <span class="keyword">with</span> key: EOB</div><div class="line">Attempting <span class="keyword">with</span> key: ECV</div><div class="line">Attempting <span class="keyword">with</span> key: ECI</div><div class="line">Attempting <span class="keyword">with</span> key: ECZ</div><div class="line">Attempting <span class="keyword">with</span> key: ECB</div><div class="line"></div><div class="line">Attempting hack <span class="keyword">with</span> key length <span class="number">2</span> (<span class="number">16</span> possible keys)...</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">1</span> of the key: O A E Z</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">2</span> of the key: M S I D</div><div class="line">Attempting <span class="keyword">with</span> key: OM</div><div class="line">Attempting <span class="keyword">with</span> key: OS</div><div class="line">Attempting <span class="keyword">with</span> key: OI</div><div class="line">Attempting <span class="keyword">with</span> key: OD</div><div class="line">Attempting <span class="keyword">with</span> key: AM</div><div class="line">Attempting <span class="keyword">with</span> key: AS</div><div class="line">Attempting <span class="keyword">with</span> key: AI</div><div class="line">Attempting <span class="keyword">with</span> key: AD</div><div class="line">Attempting <span class="keyword">with</span> key: EM</div><div class="line">Attempting <span class="keyword">with</span> key: ES</div><div class="line">Attempting <span class="keyword">with</span> key: EI</div><div class="line">Attempting <span class="keyword">with</span> key: ED</div><div class="line">Attempting <span class="keyword">with</span> key: ZM</div><div class="line">Attempting <span class="keyword">with</span> key: ZS</div><div class="line">Attempting <span class="keyword">with</span> key: ZI</div><div class="line">Attempting <span class="keyword">with</span> key: ZD</div><div class="line"></div><div class="line">Attempting hack <span class="keyword">with</span> key length <span class="number">6</span> (<span class="number">4096</span> possible keys)...</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">1</span> of the key: A E O P</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">2</span> of the key: S D G H</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">3</span> of the key: I V X B</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">4</span> of the key: M Z Q A</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">5</span> of the key: O B Z A</div><div class="line">* Possible letters <span class="keyword">for</span> letter <span class="number">6</span> of the key: V I K Z</div><div class="line">Attempting <span class="keyword">with</span> key: ASIMOV</div><div class="line">&gt; Possible plaintext hack <span class="keyword">with</span> key ASIMOV:</div><div class="line">[ Alan Mathison Turing was a British mathematician, logician, cryptanalyst, <span class="keyword">and</span> computer scientist. He was highly influential <span class="keyword">in</span> the development of computer science, providing a formalisationof the con ]</div><div class="line">&gt; Enter (y)es <span class="keyword">for</span> done, <span class="keyword">or</span> press Enter <span class="keyword">for</span> <span class="keyword">continue</span>: y</div><div class="line"></div><div class="line">Alan Mathison Turing was a British mathematician, logician, cryptanalyst, <span class="keyword">and</span> computer scientist. He was highly influential <span class="keyword">in</span> the development of computer science, providing a formalisation of the concepts of <span class="string">"algorithm"</span> <span class="keyword">and</span> <span class="string">"computation"</span> <span class="keyword">with</span> the Turing machine. Turing <span class="keyword">is</span> widely considered to be the father of computer science <span class="keyword">and</span> artificial intelligence. During World War II, Turing worked <span class="keyword">for</span> the Government Code <span class="keyword">and</span> Cypher School (GCCS) at Bletchley Park, Britain<span class="string">'s codebreaking centre. For a time he was head of Hut 8, the section responsible for German naval cryptanalysis. He devised a number of techniques for breaking German ciphers, including the method of the bombe, an electromechanical machine that could find settings for the Enigma machine. After the war he worked at the National Physical Laboratory, where he created one of the first designs for a stored-program computer, the ACE. In 1948 Turing joined Max Newman'</span>s Computing Laboratory at Manchester University, where he assisted <span class="keyword">in</span> the development of the Manchester computers <span class="keyword">and</span> became interested <span class="keyword">in</span> mathematical biology. He wrote a paper on the chemical basis of morphogenesis, <span class="keyword">and</span> predicted oscillating chemical reactions such <span class="keyword">as</span> the Belousov-Zhabotinsky reaction, which were first observed <span class="keyword">in</span> the <span class="number">1960</span>s. Turing<span class="string">'s homosexuality resulted in a criminal prosecution in 1952, when homosexual acts were still illegal in the United Kingdom. He accepted treatment with female hormones (chemical castration) as an alternative to prison. Turing died in 1954, just over two weeks before his 42nd birthday, from cyanide poisoning. An inquest determined that his death was suicide; his mother and some others believed his death was accidental. On 10 September 2009,following an Internet campaign, British Prime Minister Gordon Brown made an official public apology on behalf of the British government for "the appalling way he was treated." As of May 2012 a private member'</span>s bill was before the House of Lords which would grant Turing a statutory pardon <span class="keyword">if</span> enacted.</div></pre></td></tr></table></figure><h2 id="仿射加密法"><a href="#仿射加密法" class="headerlink" title="仿射加密法"></a>仿射加密法</h2><p>仿射加密法类似凯撒加密法，只是它将凯撒加密中的加法改成了乘法和加法的结合。仿射加密中的加密和解密算法为：</p><p><code>C = Ek(m) = (k1 × m + k2) mod n</code><br><code>M = Dk(c) = k3(c - k2) mod n</code>，其中 <code>(k3 × k1) mod 26 = 1</code>。</p><p>仿射加密具有可逆性的条件是 <code>gcd(k1, n) = 1</code>。当 <code>k1 = 1</code> 时，仿射加密就变为了加法加密也就是凯撒加密，当 <code>k2 = 0</code> 时，仿射密码变为了乘法加密。这两种情况带来的加密效果都是较弱的，所以应尽量避免。</p><p>仿射加密中的密钥空间的大小为 <code>n·φ(n)</code>。当 n 为26个英文字母时，<code>φ(n) = 12</code>，因此仿射加密的密钥空间为 <code>12 × 26 = 312</code>。</p><p>因为其加密和解密大部分思路与凯撒加密、维吉尼亚加密相同，所以直接附上源代码。算法较难点就是求最大公因数的欧几里得除法和求模逆的拓展欧几里得除法，内容颇多，请参考度娘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line"><span class="comment">#LETTERS = """ !"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz&#123;|&#125;~""" # note the space at the front</span></div><div class="line">LETTERS = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">modInverse</span><span class="params">(a, m)</span>:</span></div><div class="line">    <span class="string">'''返回a的逆，使 a * a^-1 = 1 mod(m)'''</span></div><div class="line">    <span class="keyword">if</span> math.gcd(a, m) != <span class="number">1</span>:  <span class="comment"># 如果不 a 和 m 不互质，则 a^-1 不存在</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">    <span class="comment"># 欧几里得拓展除法</span></div><div class="line">    u1, u2, u3 = <span class="number">1</span>, <span class="number">0</span>, a</div><div class="line">    v1, v2, v3 = <span class="number">0</span>, <span class="number">1</span>, m</div><div class="line">    <span class="keyword">while</span> v3 != <span class="number">0</span>:</div><div class="line">        q = u3 // v3</div><div class="line">        v1, v2, v3, u1, u2, u3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3</div><div class="line">    <span class="keyword">return</span> u1 % m</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRandomKey</span><span class="params">()</span>:</span></div><div class="line">    <span class="string">'''生成一个随机的 key，其中 key = keyA * len(LETTERS) + keyB，且 keyA 和 len(LETTERS) 要互质'''</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        keyA = random.randint(<span class="number">2</span>, len(LETTERS))</div><div class="line">        keyB = random.randint(<span class="number">2</span>, len(LETTERS))</div><div class="line">        <span class="keyword">if</span> math.gcd(keyA, len(LETTERS)) == <span class="number">1</span>:</div><div class="line">            key = keyA * len(LETTERS) + keyB</div><div class="line">            print(<span class="string">'Generate key:'</span>, key)</div><div class="line">            <span class="keyword">return</span> key</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getKeyParts</span><span class="params">(key)</span>:</span></div><div class="line">    <span class="string">'''将给定的 key 分解成 keyA 和 keyB 两个 key'''</span></div><div class="line">    keyA, keyB = key // len(LETTERS), key % len(LETTERS)</div><div class="line">    <span class="keyword">return</span> (keyA, keyB)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkKeys</span><span class="params">(keyA, keyB, mode)</span>:</span></div><div class="line">    <span class="string">'''检查 keyA 和 keyB 是否符合标准'''</span></div><div class="line">    <span class="keyword">if</span> keyA == <span class="number">1</span> <span class="keyword">and</span> mode == <span class="string">'encrypt'</span>:</div><div class="line">        sys.exit(<span class="string">'The affine cipher becomes incredibly weak when key A is set to 1. Choose a different key.'</span>)</div><div class="line">    <span class="keyword">if</span> keyB == <span class="number">0</span> <span class="keyword">and</span> mode == <span class="string">'encrypt'</span>:</div><div class="line">        sys.exit(<span class="string">'The affine cipher becomes incredibly weak when key B is set to 0. Choose a different key.'</span>)</div><div class="line">    <span class="keyword">if</span> keyA &lt; <span class="number">0</span> <span class="keyword">or</span> keyB &lt; <span class="number">0</span> <span class="keyword">or</span> keyB &gt; len(LETTERS) - <span class="number">1</span>:</div><div class="line">        sys.exit(<span class="string">'Key A must be greater than 0 and Key B must be between 0 and %s.'</span> % (len(LETTERS) - <span class="number">1</span>))</div><div class="line">    <span class="keyword">if</span> math.gcd(keyA, len(LETTERS)) != <span class="number">1</span>:</div><div class="line">        sys.exit(<span class="string">'Key A (%s) and the letter set size (%s) are not relatively prime. Choose a different key.'</span> % (keyA, len(LETTERS)))</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">AffineEncrypt</span><span class="params">(message, key)</span>:</span></div><div class="line">    <span class="string">'''对信息用仿射加密法进行加密'''</span></div><div class="line">    keyA, keyB = getKeyParts(key)</div><div class="line">    checkKeys(keyA, keyB, <span class="string">'encrypt'</span>)</div><div class="line">    ciphertext = <span class="string">''</span></div><div class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> message:</div><div class="line">        <span class="keyword">if</span> letter.upper() <span class="keyword">in</span> LETTERS:</div><div class="line">            index = LETTERS.find(letter.upper())</div><div class="line">            <span class="keyword">if</span> letter.isupper():</div><div class="line">                ciphertext += LETTERS[(index * keyA + keyB) % len(LETTERS)]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                ciphertext += LETTERS[(index * keyA + keyB) % len(LETTERS)].lower()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            ciphertext += letter</div><div class="line">    <span class="keyword">return</span> ciphertext</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">AffineDecrypt</span><span class="params">(message, key)</span>:</span></div><div class="line">    <span class="string">'''对信息用仿射加密法进行解密'''</span></div><div class="line">    keyA, keyB = getKeyParts(key)</div><div class="line">    checkKeys(keyA, keyB, <span class="string">'decrypt'</span>)</div><div class="line">    plaintext = <span class="string">''</span></div><div class="line">    modInverseOfKeyA = modInverse(keyA, len(LETTERS))</div><div class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> message:</div><div class="line">        <span class="keyword">if</span> letter.upper() <span class="keyword">in</span> LETTERS:</div><div class="line">            index = LETTERS.find(letter.upper())</div><div class="line">            <span class="keyword">if</span> letter.isupper():</div><div class="line">                plaintext += LETTERS[(index - keyB) * modInverseOfKeyA % len(LETTERS)]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                plaintext += LETTERS[(index - keyB) * modInverseOfKeyA % len(LETTERS)].lower()</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            plaintext += letter</div><div class="line">    <span class="keyword">return</span> plaintext    </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    message = <span class="string">'Every human being is intended to have a character of his own; to be what no others are, and to do what no other can do.'</span></div><div class="line">    key = getRandomKey()</div><div class="line">    ciphertext = AffineEncrypt(message, key)</div><div class="line">    print(ciphertext)</div><div class="line">    plaintext = AffineDecrypt(ciphertext, key)</div><div class="line">    print(plaintext)</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Generate key: <span class="number">142</span></div><div class="line">Gngtc viumz rgazq ay azdgzbgb de vmng m wvmtmwdgt el vay esz; de rg svmd ze edvgty mtg, mzb de be svmd ze edvgt wmz be.</div><div class="line">Every human being <span class="keyword">is</span> intended to have a character of his own; to be what no others are, <span class="keyword">and</span> to do what no other can do.</div></pre></td></tr></table></figure><p>对仿射加密法，我们可以实施爆破，因为它实际的密钥数量并不多，带入每个可能的密钥进行解密，并判断解密后的字符串是否为准确的英文，如果是，就有可能是找到了正确的密钥。</p><p>所以，需要导入一个英文字典，根据字符是否在英文字典中，可以判断这个字符是不是英文字母。因为可能会有误差，所以需要设定误差的取值范围。</p><p>具体实现可以参考我的源码：<a href="https://files-1256123790.cos.ap-shanghai.myqcloud.com/detectEnglish.py" target="_blank" rel="external">detectEnglish.py</a> &amp; <a href="https://files-1256123790.cos.ap-shanghai.myqcloud.com/dictionary.txt" target="_blank" rel="external">dictionary.txt</a></p><p>根据上面的思路，我们可以实施爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> math</div><div class="line"><span class="keyword">import</span> affineCipher</div><div class="line"><span class="keyword">import</span> detectEnglish</div><div class="line"></div><div class="line">SILENT_MODE = <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hackAffine</span><span class="params">(message)</span>:</span></div><div class="line">    print(<span class="string">'Hacking...'</span>)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> range(len(affineCipher.LETTERS) ** <span class="number">2</span>):</div><div class="line">        keyA = affineCipher.getKeyParts(key)[<span class="number">0</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> math.gcd(keyA, len(affineCipher.LETTERS)) != <span class="number">1</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line"></div><div class="line">        decryptedText = affineCipher.AffineDecrypt(message, key)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> SILENT_MODE:</div><div class="line">            print(<span class="string">'Trying key &#123;&#125;... [&#123;&#125;]'</span>.format(key, decryptedText[:<span class="number">40</span>]))</div><div class="line"></div><div class="line">        <span class="keyword">if</span> detectEnglish.isEnglish(decryptedText):</div><div class="line">            print(<span class="string">'\nPossible plaintext:'</span>)</div><div class="line">            print(<span class="string">'Key: %s'</span> % (key))</div><div class="line">            print(<span class="string">'Plaintext: \n'</span> + decryptedText[:<span class="number">200</span>])</div><div class="line">            choice = input(<span class="string">'Enter (y)es for done, or press Enter for continue: '</span>)</div><div class="line">            <span class="keyword">if</span> choice == <span class="string">'y'</span> <span class="keyword">or</span> choice == <span class="string">'Y'</span>:</div><div class="line">                <span class="keyword">return</span> decryptedText</div><div class="line">            print()</div><div class="line">    <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    message = <span class="string">'Qfqda lyuob vqsbe sk sbrqbjqj ri lofq o clodocrqd ix lsk imb; ri vq mlor bi irlqdk odq, obj ri ji mlor bi irlqd cob ji.'</span></div><div class="line">    hackAffine(message)</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">Hacking...</div><div class="line">Trying key <span class="number">26.</span>.. [Qfqda lyuob vqsbe sk sbrqbjqj ri lofq o ]</div><div class="line">Trying key <span class="number">27.</span>.. [Pepcz kxtna uprad rj raqpaipi qh knep n ]</div><div class="line">Trying key <span class="number">28.</span>.. [Odoby jwsmz toqzc qi qzpozhoh pg jmdo m ]</div><div class="line">Trying key <span class="number">29.</span>.. [Ncnax ivrly snpyb ph pyonygng of ilcn l ]</div><div class="line">Trying key <span class="number">30.</span>.. [Mbmzw huqkx rmoxa og oxnmxfmf ne hkbm k ]</div><div class="line">Trying key <span class="number">31.</span>.. [Lalyv gtpjw qlnwz nf nwmlwele md gjal j ]</div><div class="line">Trying key <span class="number">32.</span>.. [Kzkxu fsoiv pkmvy me mvlkvdkd lc fizk i ]</div><div class="line">Trying key <span class="number">33.</span>.. [Jyjwt ernhu ojlux ld lukjucjc kb ehyj h ]</div><div class="line">Trying key <span class="number">34.</span>.. [Ixivs dqmgt niktw kc ktjitbib ja dgxi g ]</div><div class="line">Trying key <span class="number">35.</span>.. [Hwhur cplfs mhjsv jb jsihsaha iz cfwh f ]</div><div class="line">Trying key <span class="number">36.</span>.. [Gvgtq boker lgiru ia irhgrzgz hy bevg e ]</div><div class="line">Trying key <span class="number">37.</span>.. [Fufsp anjdq kfhqt hz hqgfqyfy gx aduf d ]</div><div class="line">Trying key <span class="number">38.</span>.. [Etero zmicp jegps gy gpfepxex fw zcte c ]</div><div class="line">Trying key <span class="number">39.</span>.. [Dsdqn ylhbo idfor fx foedowdw ev ybsd b ]</div><div class="line">Trying key <span class="number">40.</span>.. [Crcpm xkgan hcenq ew endcnvcv du xarc a ]</div><div class="line">Trying key <span class="number">41.</span>.. [Bqbol wjfzm gbdmp dv dmcbmubu ct wzqb z ]</div><div class="line">Trying key <span class="number">42.</span>.. [Apank vieyl faclo cu clbaltat bs vypa y ]</div><div class="line">Trying key <span class="number">43.</span>.. [Zozmj uhdxk ezbkn bt bkazkszs ar uxoz x ]</div><div class="line">Trying key <span class="number">44.</span>.. [Ynyli tgcwj dyajm <span class="keyword">as</span> ajzyjryr zq twny w ]</div><div class="line">Trying key <span class="number">45.</span>.. [Xmxkh sfbvi cxzil zr ziyxiqxq yp svmx v ]</div><div class="line">Trying key <span class="number">46.</span>.. [Wlwjg reauh bwyhk yq yhxwhpwp xo rulw u ]</div><div class="line">Trying key <span class="number">47.</span>.. [Vkvif qdztg avxgj xp xgwvgovo wn qtkv t ]</div><div class="line">Trying key <span class="number">48.</span>.. [Ujuhe pcysf zuwfi wo wfvufnun vm psju s ]</div><div class="line">Trying key <span class="number">49.</span>.. [Titgd obxre ytveh vn veutemtm ul orit r ]</div><div class="line">Trying key <span class="number">50.</span>.. [Shsfc nawqd xsudg um udtsdlsl tk nqhs q ]</div><div class="line">Trying key <span class="number">51.</span>.. [Rgreb mzvpc wrtcf tl tcsrckrk sj mpgr p ]</div><div class="line">Trying key <span class="number">78.</span>.. [Otoba viywj hogjk gm gjxojdod xu vwto w ]</div><div class="line">Trying key <span class="number">79.</span>.. [Fkfsr mzpna yfxab xd xaofaufu ol mnkf n ]</div><div class="line">Trying key <span class="number">80.</span>.. [Wbwji dqger pwors ou orfwrlwl fc debw e ]</div><div class="line">Trying key <span class="number">81.</span>.. [Nsnaz uhxvi gnfij fl fiwnicnc wt uvsn v ]</div><div class="line">Trying key <span class="number">82.</span>.. [Ejerq lyomz xewza wc wzneztet nk lmje m ]</div><div class="line">Trying key <span class="number">83.</span>.. [Vavih cpfdq ovnqr nt nqevqkvk eb cdav d ]</div><div class="line">Trying key <span class="number">84.</span>.. [Mrmzy tgwuh fmehi ek ehvmhbmb vs turm u ]</div><div class="line">Trying key <span class="number">85.</span>.. [Didqp kxnly wdvyz vb vymdysds mj klid l ]</div><div class="line">Trying key <span class="number">86.</span>.. [Uzuhg boecp numpq ms mpdupjuj da bczu c ]</div><div class="line">Trying key <span class="number">87.</span>.. [Lqlyx sfvtg eldgh dj dgulgala ur stql t ]</div><div class="line">Trying key <span class="number">88.</span>.. [Chcpo jwmkx vcuxy ua uxlcxrcr li jkhc k ]</div><div class="line">Trying key <span class="number">89.</span>.. [Tytgf andbo mtlop lr loctoiti cz abyt b ]</div><div class="line">Trying key <span class="number">90.</span>.. [Kpkxw reusf dkcfg ci cftkfzkz tq rspk s ]</div><div class="line">Trying key <span class="number">91.</span>.. [Bgbon ivljw ubtwx tz twkbwqbq kh ijgb j ]</div><div class="line">Trying key <span class="number">92.</span>.. [Sxsfe zmcan lskno kq knbsnhsh by zaxs a ]</div><div class="line">Trying key <span class="number">93.</span>.. [Jojwv qdtre cjbef bh besjeyjy sp qroj r ]</div><div class="line">Trying key <span class="number">94.</span>.. [Afanm hukiv tasvw sy svjavpap jg hifa i ]</div><div class="line">Trying key <span class="number">95.</span>.. [Rwred ylbzm krjmn jp jmarmgrg ax yzwr z ]</div><div class="line">Trying key <span class="number">96.</span>.. [Inivu pcsqd biade ag adridxix ro pqni q ]</div><div class="line">Trying key <span class="number">97.</span>.. [Zezml gtjhu szruv rx ruizuozo <span class="keyword">if</span> ghez h ]</div><div class="line">Trying key <span class="number">98.</span>.. [Qvqdc xkayl jqilm io ilzqlfqf zw xyvq y ]</div><div class="line">Trying key <span class="number">99.</span>.. [Hmhut obrpc ahzcd zf zcqhcwhw qn opmh p ]</div><div class="line">Trying key <span class="number">100.</span>.. [Ydylk fsigt ryqtu qw qthytnyn he fgdy g ]</div><div class="line">Trying key <span class="number">101.</span>.. [Pupcb wjzxk iphkl hn hkypkepe yv wxup x ]</div><div class="line">Trying key <span class="number">102.</span>.. [Glgts naqob zgybc ye ybpgbvgv pm nolg o ]</div><div class="line">Trying key <span class="number">103.</span>.. [Xcxkj erhfs qxpst pv psgxsmxm gd efcx f ]</div><div class="line">Trying key <span class="number">130.</span>.. [Ybyla xkeiv zyovg oc ovtyvhyh tm xiby i ]</div><div class="line">Trying key <span class="number">131.</span>.. [Dgdqf cpjna edtal th taydamdm yr cngd n ]</div><div class="line">Trying key <span class="number">132.</span>.. [Ilivk huosf jiyfq ym yfdifrir dw hsli s ]</div><div class="line">Trying key <span class="number">133.</span>.. [Nqnap mztxk ondkv dr dkinkwnw ib mxqn x ]</div><div class="line">Trying key <span class="number">134.</span>.. [Svsfu reycp tsipa iw ipnspbsb ng rcvs c ]</div><div class="line">Trying key <span class="number">135.</span>.. [Xaxkz wjdhu yxnuf nb nusxugxg sl whax h ]</div><div class="line">Trying key <span class="number">136.</span>.. [Cfcpe boimz dcszk sg szxczlcl xq bmfc m ]</div><div class="line">Trying key <span class="number">137.</span>.. [Hkhuj gtnre ihxep xl xecheqhq cv grkh r ]</div><div class="line">Trying key <span class="number">138.</span>.. [Mpmzo lyswj nmcju cq cjhmjvmv ha lwpm w ]</div><div class="line">Trying key <span class="number">139.</span>.. [Ruret qdxbo srhoz hv homroara mf qbur b ]</div><div class="line">Trying key <span class="number">140.</span>.. [Wzwjy vicgt xwmte ma mtrwtfwf rk vgzw g ]</div><div class="line">Trying key <span class="number">141.</span>.. [Bebod anhly cbryj rf rywbykbk wp aleb l ]</div><div class="line">Trying key <span class="number">142.</span>.. [Gjgti fsmqd hgwdo wk wdbgdpgp bu fqjg q ]</div><div class="line">Trying key <span class="number">143.</span>.. [Lolyn kxrvi mlbit bp bigliulu gz kvol v ]</div><div class="line">Trying key <span class="number">144.</span>.. [Qtqds pcwan rqgny gu gnlqnzqz le patq a ]</div><div class="line">Trying key <span class="number">145.</span>.. [Vyvix uhbfs wvlsd lz lsqvseve qj ufyv f ]</div><div class="line">Trying key <span class="number">146.</span>.. [Adanc zmgkx baqxi qe qxvaxjaj vo zkda k ]</div><div class="line">Trying key <span class="number">147.</span>.. [Fifsh erlpc gfvcn vj vcafcofo at epif p ]</div><div class="line">Trying key <span class="number">148.</span>.. [Knkxm jwquh lkahs ao ahfkhtkt fy junk u ]</div><div class="line">Trying key <span class="number">149.</span>.. [Pspcr obvzm qpfmx ft fmkpmypy kd ozsp z ]</div><div class="line">Trying key <span class="number">150.</span>.. [Uxuhw tgaer vukrc ky krpurdud pi texu e ]</div><div class="line">Trying key <span class="number">151.</span>.. [Zczmb ylfjw azpwh pd pwuzwizi un yjcz j ]</div><div class="line">Trying key <span class="number">152.</span>.. [Eherg dqkob feubm ui ubzebnen zs dohe o ]</div><div class="line">Trying key <span class="number">153.</span>.. [Jmjwl ivptg kjzgr zn zgejgsjs ex itmj t ]</div><div class="line">Trying key <span class="number">154.</span>.. [Orobq nauyl poelw es eljolxox jc nyro y ]</div><div class="line">Trying key <span class="number">155.</span>.. [Twtgv sfzdq utjqb jx jqotqctc oh sdwt d ]</div><div class="line">Trying key <span class="number">182.</span>.. [Gxgta jwocp dgkpi ku kpvgpfgf vq jcxg c ]</div><div class="line">Trying key <span class="number">183.</span>.. [Rirel uhzna orvat vf vagraqrq gb unir n ]</div><div class="line">Trying key <span class="number">184.</span>.. [Ctcpw fskyl zcgle gq glrclbcb rm fytc y ]</div><div class="line">Trying key <span class="number">185.</span>.. [Nenah qdvjw knrwp rb rwcnwmnm cx qjen j ]</div><div class="line">Trying key <span class="number">186.</span>.. [Ypyls boguh vycha cm chnyhxyx ni bupy u ]</div><div class="line">Trying key <span class="number">187.</span>.. [Jajwd mzrfs gjnsl nx nsyjsiji yt mfaj f ]</div><div class="line">Trying key <span class="number">188.</span>.. [Uluho xkcqd ruydw yi ydjudtut je xqlu q ]</div><div class="line">Trying key <span class="number">189.</span>.. [Fwfsz ivnbo cfjoh jt joufoefe up ibwf b ]</div><div class="line">Trying key <span class="number">190.</span>.. [Qhqdk tgymz nquzs ue uzfqzpqp fa tmhq m ]</div><div class="line">Trying key <span class="number">191.</span>.. [Bsbov erjxk ybfkd fp fkqbkaba ql exsb x ]</div><div class="line">Trying key <span class="number">192.</span>.. [Mdmzg pcuiv jmqvo qa qvbmvlml bw pidm i ]</div><div class="line">Trying key <span class="number">193.</span>.. [Xoxkr anftg uxbgz bl bgmxgwxw mh atox t ]</div><div class="line">Trying key <span class="number">194.</span>.. [Izivc lyqer fimrk mw mrxirhih xs lezi e ]</div><div class="line">Trying key <span class="number">195.</span>.. [Tktgn wjbpc qtxcv xh xcitcsts id wpkt p ]</div><div class="line">Trying key <span class="number">196.</span>.. [Every human being <span class="keyword">is</span> intended to have a ]</div><div class="line"></div><div class="line">Possible plaintext:</div><div class="line">Key: <span class="number">196</span></div><div class="line">Plaintext:</div><div class="line">Every human being <span class="keyword">is</span> intended to have a character of his own; to be what no others are, <span class="keyword">and</span> to do what no other can do.</div><div class="line">Enter (y)es <span class="keyword">for</span> done, <span class="keyword">or</span> press Enter <span class="keyword">for</span> <span class="keyword">continue</span>: y</div></pre></td></tr></table></figure><p>轻松爆破。所以可以得到：仿射加密法，其实也是很不安全的。</p><h2 id="Playfair-加密法"><a href="#Playfair-加密法" class="headerlink" title="Playfair 加密法"></a>Playfair 加密法</h2><blockquote><p>Playfair密码（英文：Playfair cipher 或 Playfair square）是一种使用一个关键词方格来加密字符对的加密法，1854年由查尔斯·惠斯通（Charles Wheatstone）的英国人发明。</p></blockquote><p>它有一些不太明显的特征：</p><ul><li>密文的字母数一定是偶数。</li><li>任意两个同组的字母都不会相同，如果出现这种字符必是乱码和虚码。 </li></ul><p>因为它使用方便而且可以让频度分析法变成瞎子，所以在1854到1855年的克里米亚战争和1899年的布尔战争中有广泛应用。但在1915年的一战中被破译了。  </p><p>Playfair 加密法编写分三步：</p><ol><li>编制密码表 </li><li>整理明文 </li><li>编写密文（构成部分：1.密钥 2.明文 3.密文）</li></ol><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><h4 id="编制密码表"><a href="#编制密码表" class="headerlink" title="编制密码表"></a>编制密码表</h4><p>第一步是编制密码表。在这个 <code>5 * 5</code> 的密码表中，共有5行5列字母。第一行（或第一列）是密钥，其余按照字母顺序。密钥是一个单词或词组，若有重复字母，可将后面重复的字母去掉。当然也要把使用频率最少的字母去掉。并且，如果密钥同时包含 <code>I</code> 和 <code>J</code>，可以将密钥中的 <code>J</code> 替换成 <code>I</code> 或者将密码表填充的时候去掉 <code>Q</code>。如：密钥是 <code>Live and learn</code>，格式化后则为 <code>liveandr</code>。如果密钥过长可占用第二行或列。<br>如密钥 <code>crazy dog</code>，可编制成：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">C</td><td style="text-align:center">R</td><td style="text-align:center">A</td><td style="text-align:center">Z</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">D</td><td style="text-align:center">O</td><td style="text-align:center">G</td><td style="text-align:center">B</td><td style="text-align:center">E</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">F</td><td style="text-align:center">H</td><td style="text-align:center">I \ J</td><td style="text-align:center">K</td><td style="text-align:center">L</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">M</td><td style="text-align:center">N</td><td style="text-align:center">P</td><td style="text-align:center">Q</td><td style="text-align:center">S</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">T</td><td style="text-align:center">U</td><td style="text-align:center">V</td><td style="text-align:center">W</td><td style="text-align:center">X</td></tr></tbody></table><p>或</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">0</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">C</td><td style="text-align:center">D</td><td style="text-align:center">F</td><td style="text-align:center">M</td><td style="text-align:center">T</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">R</td><td style="text-align:center">O</td><td style="text-align:center">H</td><td style="text-align:center">N</td><td style="text-align:center">U</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">A</td><td style="text-align:center">G</td><td style="text-align:center">I \ J</td><td style="text-align:center">P</td><td style="text-align:center">V</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">Z</td><td style="text-align:center">B</td><td style="text-align:center">K</td><td style="text-align:center">Q</td><td style="text-align:center">W</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">Y</td><td style="text-align:center">E</td><td style="text-align:center">L</td><td style="text-align:center">S</td><td style="text-align:center">X</td></tr></tbody></table><p>大部分资料使用的是第一种填充方式，所以这里选择第一种。</p><h4 id="整理明文"><a href="#整理明文" class="headerlink" title="整理明文"></a>整理明文</h4><p>第二步是整理明文。将明文每两个字母组成一组。如果出现两个相同的字母，则在第一个字母后添加 <code>X</code> 构成一组，第二个相同的字母与它后面的字母构成一组；如果只剩下最后一个字母，则在其后添加 <code>X</code> 构成一组。当然，也可以将 <code>X</code> 换成其它字母（比如 <code>Q</code>）。<br>如 <code>communist</code>，应整理成 <code>CO MX MU NI ST</code>；<code>balloon</code> 应整理成 <code>BA LX LO ON</code>。</p><h4 id="编写密文"><a href="#编写密文" class="headerlink" title="编写密文"></a>编写密文</h4><p>加密规则：</p><ol><li>每两个整理好的明文字符进行加密。</li><li>同行不同列：依次取右边一位。</li><li>同列不同行：依次取下边一位。</li><li>不同行且不同列：依次取对角线横向一位。</li></ol><p>如，依照第一个表，明文 <code>Where there is life, there is hope.</code>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">可先整理为：WH ER ET HE RE IS LI FE TH ER EI SH OP EX  </div><div class="line">然后密文为：UK OY DX LO YO LP FK LD UF OY GL NL GN LY</div></pre></td></tr></table></figure><h3 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h3><p>解密规则：</p><ol><li>同行不同列：依次取左边一位。</li><li>同列不同行：依次取上边一位。</li><li>不同行且不同列：依次取对角线竖向一位。</li></ol><p>根据以上思路，可以用 Python 去实现加解密算法：</p><ul><li>编制密码表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeDuplicate</span><span class="params">(key, dup=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    将 key 中的非字母字符和重复字符删去并返回一个新的 key 字符串</span></div><div class="line"><span class="string">    key: 需要格式化的密钥</span></div><div class="line"><span class="string">    dup: 代表密钥选择的格式化方法：将 I 和 J 都视为 I（dup=0）;将 I 和 J 视为两个字符，选择在填充密码表的时候去除 Q，</span></div><div class="line"><span class="string">    但是要确保密钥中不包含 Q，否则还是按照第一种格式化方法（dup=1)</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    key = key.upper()</div><div class="line">    <span class="keyword">if</span> dup == <span class="number">0</span>:  <span class="comment"># 根据格式化方法对 key 进行初步格式化</span></div><div class="line">        key = key.replace(<span class="string">'J'</span>, <span class="string">'I'</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> <span class="string">'Q'</span> <span class="keyword">in</span> key:</div><div class="line">            key = key.replace(<span class="string">'J'</span>, <span class="string">'I'</span>)</div><div class="line">    s, newKey= set(), list()  <span class="comment"># 建立一个过滤集合和 newKey 列表</span></div><div class="line">    temp = [ char <span class="keyword">for</span> char <span class="keyword">in</span> key <span class="keyword">if</span> char.isalpha() ]  <span class="comment"># 去除非字母符号并将字母大写</span></div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> temp:  <span class="comment"># 根据哈希表的原理查询当前字符是否已经存在</span></div><div class="line">        <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> s:</div><div class="line">            newKey.append(char)</div><div class="line">            s.add(char)</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(newKey)  <span class="comment"># 整理成字符串</span></div><div class="line">    </div><div class="line">print(removeDuplicate(<span class="string">'Crazy dog'</span>))</div><div class="line">print(removeDuplicate(<span class="string">'Live and learn'</span>))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">createTable</span><span class="params">(key, dup=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    根据格式化后的 newKey 建立密码表</span></div><div class="line"><span class="string">    key: 需要格式化的密钥</span></div><div class="line"><span class="string">    dup: 代表密钥选择的格式化方法：将 I 和 J 都视为 I（dup=0）;将 I 和 J 视为两个字符，选择在填充密码表的时候去除 Q，</span></div><div class="line"><span class="string">    但是要确保密钥中不包含 Q，否则还是按照第一种格式化方法（dup=1)</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    newKey = removeDuplicate(key, dup)  <span class="comment"># 返回格式化后的 key</span></div><div class="line">    letters = <span class="string">'ABCDEFGHIKLMNOPQRSTUVWXYZ'</span> <span class="keyword">if</span> dup == <span class="number">0</span> <span class="keyword">or</span> <span class="string">'Q'</span> <span class="keyword">in</span> newKey <span class="keyword">else</span> <span class="string">'ABCDEFGHIJKLMNOPRSTUVWXYZ'</span>  <span class="comment"># 根据格式化方法整理 letters</span></div><div class="line">    passwordTable = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>):</div><div class="line">        <span class="keyword">if</span> i &lt; len(newKey):</div><div class="line">            passwordTable.append(newKey[i])  <span class="comment"># 填充 newKey</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> letters:</div><div class="line">                <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> passwordTable:</div><div class="line">                    passwordTable.append(char)  <span class="comment"># 填充不在密码表中的英文字母</span></div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="comment"># return list(map(list, zip(*([iter(passwordTable)] * 5))))  # 将一维列表转化为二维列表</span></div><div class="line">    <span class="keyword">return</span> passwordTable</div><div class="line"></div><div class="line">print(createTable(<span class="string">'Crazy dog'</span>))</div><div class="line">print(createTable(<span class="string">'Live and learn'</span>))</div><div class="line">print(createTable(<span class="string">'Sliver'</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CRAZYDOG</div><div class="line">LIVEANDR</div><div class="line"></div><div class="line">[<span class="string">'C'</span>, <span class="string">'R'</span>, <span class="string">'A'</span>, <span class="string">'Z'</span>, <span class="string">'Y'</span>, <span class="string">'D'</span>, <span class="string">'O'</span>, <span class="string">'G'</span>, <span class="string">'B'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>]</div><div class="line">[<span class="string">'L'</span>, <span class="string">'I'</span>, <span class="string">'V'</span>, <span class="string">'E'</span>, <span class="string">'A'</span>, <span class="string">'N'</span>, <span class="string">'D'</span>, <span class="string">'R'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'K'</span>, <span class="string">'M'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>]</div><div class="line">[<span class="string">'S'</span>, <span class="string">'L'</span>, <span class="string">'I'</span>, <span class="string">'V'</span>, <span class="string">'E'</span>, <span class="string">'R'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'K'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>]</div></pre></td></tr></table></figure><ul><li>整理明文</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">arrangeText</span><span class="params">(message)</span>:</span></div><div class="line">    <span class="string">'''整理明文中的英文字符，并进行分组处理'''</span></div><div class="line">    temp = [ char.upper() <span class="keyword">for</span> char <span class="keyword">in</span> message <span class="keyword">if</span> char.isalpha() ]  <span class="comment"># 去除其他字符，保留英文字母并转化为大写</span></div><div class="line">    newMessage = []</div><div class="line">    <span class="keyword">while</span> temp:</div><div class="line">        <span class="keyword">if</span> len(temp) != <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> temp[<span class="number">1</span>] == temp[<span class="number">0</span>]:</div><div class="line">                newMessage.append((temp[<span class="number">0</span>], <span class="string">'X'</span>))</div><div class="line">                temp = temp[<span class="number">1</span>:]  <span class="comment"># 相当于剔除已经分组成功的字母</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                newMessage.append((temp[<span class="number">0</span>], temp[<span class="number">1</span>]))</div><div class="line">                temp = temp[<span class="number">2</span>:]</div><div class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果分组只剩最后一个字母时</span></div><div class="line">            newMessage.append((temp[<span class="number">0</span>], <span class="string">'X'</span>))</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">return</span> newMessage</div><div class="line"></div><div class="line">print(arrangeText(<span class="string">'I love you.'</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(<span class="string">'I'</span>, <span class="string">'L'</span>), (<span class="string">'O'</span>, <span class="string">'V'</span>), (<span class="string">'E'</span>, <span class="string">'Y'</span>), (<span class="string">'O'</span>, <span class="string">'U'</span>)]</div></pre></td></tr></table></figure><ul><li>对明文进行加密：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encryptPlayFair</span><span class="params">(message, key, dup=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''对明文使用密钥进行加密'''</span></div><div class="line">    newMessage = arrangeText(message)</div><div class="line">    table = createTable(key, dup)</div><div class="line">    translated = []</div><div class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> newMessage:</div><div class="line">        <span class="comment"># 获取 a 和 b 的下标</span></div><div class="line">        index1, index2, flag = table.index(a), table.index(b), <span class="keyword">False</span></div><div class="line"></div><div class="line">        <span class="comment"># 创建 [[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24]] ranged 区间列表</span></div><div class="line">        <span class="comment"># 判断 a 和 b 是否在同一行，如果在同一行，flag = True</span></div><div class="line">        ranged = list(map(list, zip(*([iter(range(<span class="number">25</span>))] * <span class="number">5</span>))))</div><div class="line">        <span class="keyword">for</span> group <span class="keyword">in</span> ranged:</div><div class="line">            <span class="keyword">if</span> index1 <span class="keyword">in</span> group <span class="keyword">and</span> index2 <span class="keyword">in</span> group:</div><div class="line">                flag = <span class="keyword">True</span></div><div class="line"></div><div class="line">        <span class="comment"># a 和 b 在同一列时</span></div><div class="line">        <span class="keyword">if</span> (index2 - index1) % <span class="number">5</span> == <span class="number">0</span>: <span class="comment"># </span></div><div class="line">            char1, char2 = table[(index1 + <span class="number">5</span>) % <span class="number">25</span>], table[(index2 + <span class="number">5</span>) % <span class="number">25</span>]</div><div class="line"></div><div class="line">        <span class="comment"># a 和 b 在同一行时</span></div><div class="line">        <span class="keyword">elif</span> flag:</div><div class="line">            <span class="keyword">if</span> index1 <span class="keyword">in</span> &#123;<span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">24</span>&#125;:</div><div class="line">                char1, char2 = table[index1 - <span class="number">4</span>], table[index1 + <span class="number">1</span>]</div><div class="line">            <span class="keyword">elif</span> index2 <span class="keyword">in</span> &#123;<span class="number">4</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">19</span>, <span class="number">24</span>&#125;:</div><div class="line">                char1, char2 = table[index1 + <span class="number">1</span>], table[index2 - <span class="number">4</span>]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                char1, char2 = table[index1 + <span class="number">1</span>], table[index2 + <span class="number">1</span>]</div><div class="line"></div><div class="line">        <span class="comment"># a 和 b 既不在同一行也不在同一列时</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            length1, length2 = index1 % <span class="number">5</span>, index2 % <span class="number">5</span></div><div class="line">            length = abs(length2 - length1)</div><div class="line">            <span class="keyword">if</span> length1 &gt; length2:</div><div class="line">                char1, char2 = table[index1 - length], table[index2 + length]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                char1, char2 = table[index1 + length], table[index2 - length]</div><div class="line">        </div><div class="line">        translated.append(char1 + char2)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(translated)</div><div class="line"></div><div class="line">print(encryptPlayFair(<span class="string">'I love you.'</span>, <span class="string">'Sliver'</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VIQLVZNW</div></pre></td></tr></table></figure><ul><li>对密文进行解密：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptPlayFair</span><span class="params">(message, key, dup=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''对密文使用密钥进行解密'''</span></div><div class="line">    </div><div class="line">    <span class="comment"># 大部分思路与加密相同</span></div><div class="line">    messageGroups = list(zip(*([iter(<span class="string">'VIQLVZNW'</span>)] * <span class="number">2</span>)))</div><div class="line">    table = createTable(key, dup)</div><div class="line">    translated = []</div><div class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> messageGroups:</div><div class="line">        index1, index2, flag = table.index(a), table.index(b), <span class="keyword">False</span></div><div class="line"></div><div class="line">        ranged = list(map(list, zip(*([iter(range(<span class="number">25</span>))] * <span class="number">5</span>))))</div><div class="line">        <span class="keyword">for</span> group <span class="keyword">in</span> ranged:</div><div class="line">            <span class="keyword">if</span> index1 <span class="keyword">in</span> group <span class="keyword">and</span> index2 <span class="keyword">in</span> group:</div><div class="line">                flag = <span class="keyword">True</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index2 - index1) % <span class="number">5</span> == <span class="number">0</span>:</div><div class="line">            char1, char2 = table[(index1 - <span class="number">5</span>) % <span class="number">25</span>], table[(index2 - <span class="number">5</span>) % <span class="number">25</span>]</div><div class="line"></div><div class="line">        <span class="keyword">elif</span> flag:</div><div class="line">            <span class="keyword">if</span> index1 <span class="keyword">in</span> &#123;<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>&#125;:</div><div class="line">                char1, char2 = table[index1 + <span class="number">4</span>], table[index1 - <span class="number">1</span>]</div><div class="line">            <span class="keyword">elif</span> index2 <span class="keyword">in</span> &#123;<span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>&#125;:</div><div class="line">                char1, char2 = table[index1 - <span class="number">1</span>], table[index2 + <span class="number">4</span>]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                char1, char2 = table[index1 - <span class="number">1</span>], table[index2 - <span class="number">1</span>]</div><div class="line"></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            length1, length2 = index1 % <span class="number">5</span>, index2 % <span class="number">5</span></div><div class="line">            length = abs(length2 - length1)</div><div class="line">            <span class="keyword">if</span> length1 &gt; length2:</div><div class="line">                char1, char2 = table[index1 - length], table[index2 + length]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                char1, char2 = table[index1 + length], table[index2 - length]</div><div class="line">        </div><div class="line">        translated.append(char1 + char2)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(translated)</div><div class="line"></div><div class="line">print(decryptPlayFair(<span class="string">'VIQLVZNW'</span>, <span class="string">'Sliver'</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ILOVEYOU</div></pre></td></tr></table></figure><h2 id="换位加密法"><a href="#换位加密法" class="headerlink" title="换位加密法"></a>换位加密法</h2><p>以上的加密法，其实都是将字母进行移位或替换来进行加密的。而换位加密法不是把字符替换成其他字符，而是搞乱消息符号的顺序，使原来的消息不可读。</p><p>从最简单的换位加密法来说，我们可以先拿 <code>Common sense is not so common.</code> 这个明文进行练手。在这里，先选择一个数字密钥 <code>8</code>。</p><p>我们创建一个 <code>4</code> 行 <code>8</code> 列的明文表格，这是根据 <code>row = len(message) // key + 1; col = key</code> 得出的，不全的地方不填充：</p><table><thead><tr><th style="text-align:center">C</th><th style="text-align:center">o</th><th style="text-align:center">m</th><th style="text-align:center">m</th><th style="text-align:center">o</th><th style="text-align:center">n</th><th style="text-align:center"></th><th style="text-align:center">s</th></tr></thead><tbody><tr><td style="text-align:center">e</td><td style="text-align:center">n</td><td style="text-align:center">s</td><td style="text-align:center">e</td><td style="text-align:center"></td><td style="text-align:center">i</td><td style="text-align:center">s</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">n</td><td style="text-align:center">o</td><td style="text-align:center">t</td><td style="text-align:center"></td><td style="text-align:center">s</td><td style="text-align:center">o</td><td style="text-align:center"></td><td style="text-align:center">c</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">m</td><td style="text-align:center">m</td><td style="text-align:center">o</td><td style="text-align:center">n</td><td style="text-align:center">.</td><td style="text-align:center">✖️</td><td style="text-align:center">✖️</td></tr></tbody></table><p>根据表格，我们选择每一列的字母，再见每一列的字母拼接，就是我们加密好的密文了，即 <code>Cenoonommstmme oo snnio. s s c</code>。</p><p>解密时，只需要将刚才的表格反转一下，再按列取字母拼接即可：</p><table><thead><tr><th style="text-align:center">C</th><th style="text-align:center">e</th><th style="text-align:center">n</th><th style="text-align:center">o</th></tr></thead><tbody><tr><td style="text-align:center">o</td><td style="text-align:center">n</td><td style="text-align:center">o</td><td style="text-align:center">m</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">s</td><td style="text-align:center">t</td><td style="text-align:center">m</td></tr><tr><td style="text-align:center">m</td><td style="text-align:center">e</td><td style="text-align:center"></td><td style="text-align:center">o</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center"></td><td style="text-align:center">s</td><td style="text-align:center">n</td></tr><tr><td style="text-align:center">n</td><td style="text-align:center">i</td><td style="text-align:center">o</td><td style="text-align:center">.</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">s</td><td style="text-align:center"></td><td style="text-align:center">✖️</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center"></td><td style="text-align:center">c</td><td style="text-align:center">✖️</td></tr></tbody></table><p>可得到明文为：<code>Common sense is not so common.</code></p><ul><li>加密代码实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">TranspositionEncrypt</span><span class="params">(message, key)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    message: 明文</span></div><div class="line"><span class="string">    key: 密钥（推荐是小于明文一半长度的数字）</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    cipherrext = [<span class="string">''</span>] * key  <span class="comment"># 创建密文列表，里面包含 key 个列，先用空字符初始化</span></div><div class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(key):</div><div class="line">        index = col</div><div class="line">        <span class="keyword">while</span> index &lt; len(message):</div><div class="line">            cipherrext[col] += message[index]  <span class="comment"># 相当与构建了 key 列 (len(message) // key + 1) 行的二维表格，每次取同一列的数据</span></div><div class="line">            index += key</div><div class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">''</span>.join(cipherrext) + <span class="string">']'</span>  <span class="comment"># 防止看不清尾部可能存在的空格，所以加上中括号进行包围</span></div><div class="line"></div><div class="line">print(TranspositionEncrypt(<span class="string">'When I see you again.'</span>, <span class="number">8</span>))</div><div class="line">print(TranspositionEncrypt(<span class="string">'Common sense is not so common.'</span>, <span class="number">8</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[Wegheae inyn o.Iu  sa]</div><div class="line">[Cenoonommstmme oo snnio. s s c]</div></pre></td></tr></table></figure><ul><li>解密代码实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">TranspositionDecrypt</span><span class="params">(message, key)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    message: 密文</span></div><div class="line"><span class="string">    key: 密钥（推荐是小于明文一半长度的数字）</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    numOfColumns, numOfRows = len(message) // key + <span class="number">1</span>, key</div><div class="line">    numOfShadedBoxex = numOfColumns * numOfRows - len(message)</div><div class="line">    plaintext = [<span class="string">''</span>] * numOfColumns</div><div class="line">    col, row = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> symbol <span class="keyword">in</span> message:</div><div class="line">        plaintext[col] += symbol</div><div class="line">        col += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> (col == numOfColumns) <span class="keyword">or</span> (col == numOfColumns - <span class="number">1</span> <span class="keyword">and</span> row &gt;= numOfRows - numOfShadedBoxex):</div><div class="line">            row, col = row + <span class="number">1</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(plaintext)</div><div class="line"></div><div class="line">print(TranspositionDecrypt(<span class="string">'Wegheae inyn o.Iu  sa'</span>, <span class="number">8</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">When I see you again.</div><div class="line">Common sense <span class="keyword">is</span> <span class="keyword">not</span> so common.</div></pre></td></tr></table></figure><p>也可以根据给定的置换进行换位加密，比如给定一个置换密钥对明文 <code>Hide the gold in the tree stump.</code> 进行加密：</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">5</td><td style="text-align:center">8</td><td style="text-align:center">6</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">7</td><td style="text-align:center">4</td></tr></tbody></table><p>首先需要将明文按照密钥的长度进行分组，即每组八个，不足八个就拿一开始的字母去凑，比如上面的明文可以整理成 <code>[&#39;Hide the&#39;] [&#39; gold in&#39;] [&#39; the tre&#39;] [&#39;e stump.&#39;]</code> 四组。</p><p>根据所给的置换密钥，对第一组数据，相当于是让原本是位置是第二个的字符，现在放在第一个，原本是第五个位置的字符，现在放在第二个…所以 <code>[&#39;Hide the&#39;]</code> 转化为 <code>[&#39;i etHdh&#39;]</code>，<code>[&#39; gold in&#39;]</code> 转化为 <code>[&#39;egdn  oi&#39;]</code>。</p><p>将所有置换后的字符拼接起来，可以得到加密密文：<code>i etHdhegdn  oilt et hre u.mespt</code></p><p>解密时，我们根据密钥求逆置换密钥，也就是：</p><table><thead><tr><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th></tr></thead><tbody><tr><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">6</td><td style="text-align:center">8</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">7</td><td style="text-align:center">3</td></tr></tbody></table><p>重复分组，分别置换，即可得到明文：<code>Hide the gold in the tree stump.</code></p><ul><li>加密代码实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PermutationEncrypt</span><span class="params">(message, key)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    message: 明文</span></div><div class="line"><span class="string">    key: 密钥（是一个数字字符串，里面的数字是连续的，但是位置是打乱的，如'25861374'）</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    newMessage = [char <span class="keyword">for</span> char <span class="keyword">in</span> message]  <span class="comment"># 不想保留其他字符时，可以改成：[char for char in message if char.isalpha()]</span></div><div class="line">    numOfChars, numOfGroups = len(key), len(newMessage) // len(key) + <span class="number">1</span></div><div class="line">    blanks = numOfGroups * len(key) - len(newMessage)  <span class="comment"># 计算出分组不足的空间</span></div><div class="line">    <span class="keyword">if</span> blanks &lt; len(key):</div><div class="line">        newMessage += newMessage[:blanks]  <span class="comment"># 用前面的字母进行补全以完成接下来分组</span></div><div class="line">    groups = list(map(list, zip(*[iter(newMessage)] * len(key))))  <span class="comment"># 按每组长度为 len(key) 进行分组</span></div><div class="line">    temp = []</div><div class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> groups:</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> key:</div><div class="line">            temp.append(group[int(index) - <span class="number">1</span>])  <span class="comment"># 根据置换密钥进行置换加密</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'['</span> + <span class="string">''</span>.join(temp) + <span class="string">']'</span>  <span class="comment"># 防止看不清尾部可能存在的空格，所以加上中括号进行包围</span></div><div class="line"></div><div class="line">print(PermutationEncrypt(<span class="string">'Hide the gold in the tree stump.'</span>, key = <span class="string">'25861374'</span>))</div><div class="line">print(PermutationEncrypt(<span class="string">'I hid the gold in the kitchen.'</span>, key = <span class="string">'25861374'</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[i etHdhegdn  oilt et hre u.mespt]</div><div class="line">[ dh Ihti lideg o ei ntkhcn .thIe]</div></pre></td></tr></table></figure><ul><li>解密代码实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">inversePermutation</span><span class="params">(key)</span>:</span></div><div class="line">    <span class="string">'''根据给定 key 求它的逆置换'''</span></div><div class="line">    <span class="comment"># 先根据给定的 key 创建映射，如 key = '25861374' 时，创建的映射为：&#123;'2': 1, '5': 2, '8': 3, '6': 4, '1': 5, '3': 6, '7': 7, '4': 8&#125;</span></div><div class="line">    dictMap = &#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> zip(key, range(<span class="number">1</span>, len(key) + <span class="number">1</span>))&#125;</div><div class="line">    <span class="comment"># 根据键排序，按上面的例子可以得到：[('1', 5), ('2', 1), ('3', 6), ('4', 8), ('5', 2), ('6', 4), ('7', 7), ('8', 3)]</span></div><div class="line">    sortedMap = sorted(dictMap.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</div><div class="line">    <span class="comment"># 得到排序好后的映射的值，也就是逆置换：['5', '1', '6', '8', '2', '4', '7', '3']</span></div><div class="line">    inverse = [str(item[<span class="number">1</span>]) <span class="keyword">for</span> item <span class="keyword">in</span> sortedMap]</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(inverse)  <span class="comment"># 将逆转置列表转化为字符串</span></div><div class="line"></div><div class="line">print(inversePermutation(<span class="string">'25861374'</span>))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">PermutationDecrypt</span><span class="params">(message, key)</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line"><span class="string">    message: 密文</span></div><div class="line"><span class="string">    key: 密钥（是一个数字字符串，里面的数字是连续的，但是位置是打乱的，如'25861374'）</span></div><div class="line"><span class="string">    '''</span></div><div class="line">    inverseKey = inversePermutation(key)</div><div class="line">    newMessage = list(map(list, zip(*[iter(message)] * len(inverseKey))))</div><div class="line">    temp = []</div><div class="line">    <span class="keyword">for</span> group <span class="keyword">in</span> newMessage:</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> inverseKey:</div><div class="line">            temp.append(group[int(index) - <span class="number">1</span>])</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(temp)</div><div class="line"></div><div class="line">print(PermutationDecrypt(<span class="string">'i etHdhegdn  oilt et hre u.mespt'</span>, <span class="string">'25861374'</span>))</div><div class="line">print(PermutationDecrypt(<span class="string">' dh Ihti lideg o ei ntkhcn .thIe'</span>, <span class="string">'25861374'</span>))</div></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Hide the gold <span class="keyword">in</span> the tree stump.</div><div class="line">I hid the gold <span class="keyword">in</span> the kitchen.I</div></pre></td></tr></table></figure><p>因为涉及补全字符的问题，所以输出结果跟原明文相比可能会多出几个字符。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://baike.baidu.com/item/%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="external">百度百科</a></li><li><a href="https://book.douban.com/subject/19986936/" target="_blank" rel="external">深入浅出密码学</a></li><li><a href="https://book.douban.com/subject/26869300/" target="_blank" rel="external">Python密码学编程</a></li><li><a href="http://blog.csdn.net/DLPointer/article/details/62891638" target="_blank" rel="external">Playfair密码(C语言实现)</a></li><li><a href="http://blog.csdn.net/white_idiot/article/details/61201864" target="_blank" rel="external">(密码学)维吉尼亚密码加解密原理及其破解算法Java实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“这是成为黑客的必经之路。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="教程" scheme="http://home.junyouxiaowu.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
      <category term="Cryptography" scheme="http://home.junyouxiaowu.top/tags/Cryptography/"/>
    
  </entry>
  
  <entry>
    <title>番茄工作法总结</title>
    <link href="http://home.junyouxiaowu.top/2018/03/04/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://home.junyouxiaowu.top/2018/03/04/番茄工作法总结/</id>
    <published>2018-03-04T14:39:27.000Z</published>
    <updated>2018-03-04T16:26:51.980Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“不得不说，这年头，番茄也能让你学会专注。”</p></blockquote><a id="more"></a><h2 id="什么是番茄工作法？"><a href="#什么是番茄工作法？" class="headerlink" title="什么是番茄工作法？"></a>什么是番茄工作法？</h2><blockquote><p>番茄工作法是弗朗西斯科•西里洛于1992年创立的。他在大学生活的头几年，曾一度苦于学习效率低下，“于是我和自己打赌，下猛药，狠狠鄙视自己说：‘我能学一会儿习吗？真正学上10分钟？’我得找个计时教练，谁来替我掐表呢？后来我找到了，是一枚厨房定时器，形状像‘西红柿’（Pomodoro ，意大利语的‘番茄’）。就这样，我邂逅了我的番茄钟。”</p></blockquote><p>番茄工作法是一套简单的工具和流程，用以提升你个人和所在团队的生产力，从而做到：</p><ul><li><p>减轻时间焦虑</p></li><li><p>提升集中力和注意力，减少中断</p></li><li><p>增强决策意识</p></li><li><p>唤醒激励和持久激励</p></li><li><p>巩固达成目标的决心</p></li><li><p>完善预估流程，精确地保质保量</p></li><li><p>改进工作学习流程</p></li><li><p>强化决断力，快刀斩乱麻</p></li></ul><h2 id="什么是番茄钟？"><a href="#什么是番茄钟？" class="headerlink" title="什么是番茄钟？"></a>什么是番茄钟？</h2><p>它仅仅是一个计时器，用来衡量设定好时间的时间周期。</p><p>以 <code>25</code> 分钟为一个番茄钟周期，周期开始时用计时器计时，抛弃脑中的时间焦虑，全身心投入手中的工作中，直到计时器响起，就立刻停止工作。以短时间作为目标，增加工作完成的满足感。<br>每个番茄钟之间用 <code>3~5</code> 分钟的时间进行休息，休息时，要全身心抛开工作任务，让大脑充分吸收过去 <code>25</code> 分钟的脑力震荡。劳逸结合，激发下个番茄钟工作的动力。<br>每 <code>4</code> 个番茄钟结束后应要多休息一会儿，时间设定为 <code>15~30</code> 分钟。</p><h2 id="如何制定番茄钟？"><a href="#如何制定番茄钟？" class="headerlink" title="如何制定番茄钟？"></a>如何制定番茄钟？</h2><p>所需工具：一枚番茄钟，一支铅笔，三张白纸（表格）。</p><p>第一张纸（活动清单）：记录近期事务的活动清单，将所有最近需要做的事情（20~30项）都记录在纸上，不分顺序，完成后即可划掉。可几天共用一张 <code>活动清单</code>。</p><p>第二张纸（今日待办）：记录今日待办事项。每天的工作开始前，选择活动清单中的事情按照今天的可分配时间放入 <code>今日待办</code> 表格中，并计划好执行这一任务所需的番茄钟数。</p><p>第三张纸（记录表格）：在每天工作结束之前需要记录三个方面的信息，以便日后对比改进自己的番茄钟。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">记录信息：</div><div class="line">①每日完成的番茄钟数。</div><div class="line">②早晨未想到后来临时加入的计划外紧急事务。</div><div class="line">③由于估计的时间不足以完成某一项目标，后来又加上的番茄钟数。</div></pre></td></tr></table></figure><h2 id="如何执行番茄钟？"><a href="#如何执行番茄钟？" class="headerlink" title="如何执行番茄钟？"></a>如何执行番茄钟？</h2><ul><li>记录近期事务到 <code>活动清单</code>。</li><li>每天早晨从 <code>活动清单</code> 中选择待办事项，抄入到 <code>今日待办</code>。</li><li>从 <code>今日待办</code> 中选择一项自己觉得最重要的一项活动，开始番茄钟。</li><li>番茄钟响铃后，停下工作，休息片刻，并记下一个番茄钟标记。</li><li>休息结束，开始下一个番茄钟。</li><li>完成后活动后记录，未未完成则放到下个番茄钟去完成或者选择其它时段去完成。</li><li>晚上下班前需要总结自己的番茄钟总数、活动完成数和番茄钟进行时的中断数，并添加到 <code>记录表格</code>。</li><li>在之后的番茄钟设定和流程执行时，根据 <code>记录表格</code> 进行分析、观察和改进，得到提高。</li></ul><h2 id="如何去处理执行中的中断？"><a href="#如何去处理执行中的中断？" class="headerlink" title="如何去处理执行中的中断？"></a>如何去处理执行中的中断？</h2><ul><li>内部中断（自身引起） <ul><li>可控制中断：如想喝水，需要回复某人电子邮件，突然想到要给谁打电话等。<br><strong>解决方法：</strong>接受、记录并继续。把中断记录到今日待办中的 <code>计划外紧急</code> 中，并做标记进行跟踪，然后继续自己的番茄钟。等到后续某个番茄钟完成，才处理这些 <code>计划外紧急</code> 任务。</li><li>不可控制中断：如想上厕所，要准时抢票等。<br><strong>解决方法：</strong>去完成这些不可控制的中断。但回来时，需要把刚才正在进行的番茄钟作废，而不能继续进行之前的番茄钟。以防养成容易中断的习惯，这将会打乱工作节奏。</li></ul></li></ul><ul><li>外部中断（外界引起）<ul><li>可延后中断：如电话来访，电子邮件寄来，同事需要与你商讨问题等。<br><strong>解决方法：</strong>可以告诉别人现在自己正忙，告诉他想在稍后再与他商量或者打电话，并将这件事记录到今日待办中的 <code>计划外紧急</code> 中，等到之后的某个番茄钟再进行事件处理。</li><li>不可延后中断：不可抗力因素事件等。<br><strong>解决方法：</strong>处理事件，并报废番茄钟。</li></ul></li></ul><h2 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a>小贴士</h2><ul><li>当一个番茄钟结束后，要立刻停止工作，把对时间的依赖完全交给番茄钟。</li><li>在番茄钟内提早完成了任务，应该回顾一下所做的或者重复一下所学的，直到番茄钟结束。</li><li>一些琐碎的占用时间少的事情可以放在一个番茄钟内完成。</li><li>在休息时间内，就不要想前一个番茄钟或后一个番茄钟的事情。要把握休息时间，劳逸结合。</li><li>番茄钟的选择要在休息结束后进行。</li><li>每个番茄钟开始后，要选择当前 <code>今日待办</code> 列表中最重要的事，而不一定是上个番茄钟未完成的的事。这样可以确保每次做的事都是有用、高效和重要的。</li><li>番茄钟的时间是处理事务时间的最小计量单位，不可拆分。</li><li>使用番茄钟时，只要认真专注于要处理的事项即可。而对全局的纵览和思考应该放到早晨的规划中。</li><li>晚间和月底，是计量工作效率和得失的好时光。</li><li>番茄钟不是一定要设定为 <code>25</code> 分钟，这只是作者在进行大量实践和总结后给的建议时间。使用者可以立足于自身情况对时间进行修改（比如执行番茄钟过程中中断很多，可以适当缩减番茄钟设定时间）。但都要在执行上一次设定的番茄钟周期一段时间（比如两周）后才能确认修改，以便确定它是不是真的适合自己。频繁的更改只会打乱供暖工作节奏，带来不好的影响。毕竟，长期的执行和感受，才能真正判断它是否合适自己。</li></ul><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><ul><li><a href="https://book.douban.com/subject/26099295/" target="_blank" rel="external">番茄工作法图解</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“不得不说，这年头，番茄也能让你学会专注。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://home.junyouxiaowu.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Notes" scheme="http://home.junyouxiaowu.top/tags/Notes/"/>
    
      <category term="Tomato" scheme="http://home.junyouxiaowu.top/tags/Tomato/"/>
    
      <category term="Work" scheme="http://home.junyouxiaowu.top/tags/Work/"/>
    
  </entry>
  
  <entry>
    <title>Python代码风格指南（自译）</title>
    <link href="http://home.junyouxiaowu.top/2018/03/03/Python%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <id>http://home.junyouxiaowu.top/2018/03/03/Python代码风格指南/</id>
    <published>2018-03-03T14:39:27.000Z</published>
    <updated>2018-03-04T07:07:07.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“人生苦短，我用 Python。”</p></blockquote><a id="more"></a><blockquote><p>英语渣，但就是很想翻译它。</p></blockquote><p>当你询问一个程序员为什么最爱 Python 语言的时候，他们常说它可读性很高。确实，高度的可读性是设计 Python 这门语言的核心。</p><p>一个使 Python 代码易读且易理解的原因是 Python 语言相对完善的编码指南和 Pythonic 风格。</p><p>并且，当一个经验丰富的 Python 开发者指着一段代码说：“这段代码并不 Pythonic” 的时候，这常常意味着这些代码没有遵循一个普遍的代码准则，没有通过最好的方式表达出它的意图。</p><p>虽然在一些极端情况下，关于如何用 Python 代码表达意图的最好方式没有达成共识，但这样的情况是比较少的。</p><h2 id="一般概念"><a href="#一般概念" class="headerlink" title="一般概念"></a>一般概念</h2><h3 id="明确的代码"><a href="#明确的代码" class="headerlink" title="明确的代码"></a>明确的代码</h3><p>虽然任何类型的魔法方法都可以通过 Python 来实现，但是最明确和最直接的方式往往是最好的。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_complex</span><span class="params">(*args)</span>:</span></div><div class="line">    x, y = args</div><div class="line">    <span class="keyword">return</span> dict(**locals())</div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_complex</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;</div></pre></td></tr></table></figure><p>在上面优秀的代码中，函数明确地显式调用 x 和 y, 明确的返回相关字典。开发者通过读第一行和最后一行就可以知道函数的用法。</p><h3 id="一行一句"><a href="#一行一句" class="headerlink" title="一行一句"></a>一行一句</h3><p>尽管在一些复杂语句中，例如 <code>列表生成式</code> 是被允许的，并且这些语句可以展现简洁的表达能力。但将不相关的语句放在同一行是很差的代码风格。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'one'</span>; <span class="keyword">print</span> <span class="string">'two'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> x == <span class="number">1</span>: <span class="keyword">print</span> <span class="string">'one'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> &lt;complex comparison&gt; <span class="keyword">and</span> &lt;other complex comparison&gt;:</div><div class="line">    <span class="comment"># do something</span></div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'one'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'two'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> x == <span class="number">1</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'one'</span></div><div class="line">    </div><div class="line">cond1 = &lt;complex comparison&gt;</div><div class="line">cond2 = &lt;other complex comparison&gt;</div><div class="line"><span class="keyword">if</span> cond1 <span class="keyword">and</span> cond2:</div><div class="line">    <span class="comment"># do something</span></div></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>函数的参数可以有四种不同的方式：</p><h4 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="1.位置参数"></a>1.位置参数</h4><p>位置参数是强制性的，并且它们没有默认值。它们是最简单的参数形式，可以用少量的函数参数，用来表达函数意义的全部部分，而它们的位置顺序是自然的，是被严格要求的。例如，在 <code>send(message, recipient)</code> 或者 <code>point(x, y)</code> 这些函数中，函数的使用者并不会对函数的使用觉得很困难，这些函数仅仅需要两个参数，并按照顺序传入即可。  </p><p>在这两种情况下，可以在调用函数时使用参数的名称赋值，这样做可以切换参数的顺序，例如调用实例 <code>send(recipient=&#39;World&#39;, message=&#39;Hello&#39;)</code> 和 <code>point(y=2, x=1)</code>，但与直接的调用 <code>send(&#39;Hello&#39;, &#39;World&#39;)</code> 和 <code>point(1, 2)</code> 相比，这会降低可读性并且将会不必要地冗长。</p><h4 id="2-关键字参数"><a href="#2-关键字参数" class="headerlink" title="2. 关键字参数"></a>2. 关键字参数</h4><p>关键字参数不是强制性的，并且它们具有默认值。它们通常是用于发送给函数的可选参数。当一个函数有多于两个或者三个位置参数的时候，函数参数样式就很难记忆了。这个时候，使用具有默认值的关键字参数是很有帮助的。例如，一个完整的 <code>send</code> 函数可以定义成 <code>send(message, to, cc=None, bcc=None)</code>，这里的 <code>cc</code> 和 <code>bcc</code> 参数是可选的，当没有传值时默认为 <code>None</code>。</p><p>使用关键字参数调用一个函数可以通过 Python 以多种方式完成。例如，可以在定义中遵循参数的顺序，而不必明确命名参数，比如 <code>send(&#39;Hello&#39;, &#39;World&#39;, &#39;Cthulhu&#39;, &#39;God&#39;)</code> 是将密件发送给上帝。我们也可以使用命名参数而无需遵循参数顺序来调用函数，比如 <code>send(&#39;Hello again&#39;, &#39;World&#39;, bcc=&#39;God&#39;, cc=&#39;Cthulhu&#39;)</code>。如果没有任何强有力的理由不去遵循最接近函数定义的语法： <code>send(&#39;Hello&#39;, &#39;World&#39;, cc=&#39;Cthulhu&#39;, bcc=&#39;God&#39;)</code>，那么这两种方式都应该是要极力避免的。</p><p>作为一个方面的说明，请遵循 <a href="http://en.wikipedia.org/wiki/You_ain&#39;t_gonna_need_it" target="_blank" rel="external">YAGNI</a> 原则。通常，移除一个用作“以防万一”但却看起来从未使用的可选参数（以及它在函数中的逻辑），比添加一个所需的新的可选参数和它的逻辑要来的困难。</p><h4 id="3-任意参数列表"><a href="#3-任意参数列表" class="headerlink" title="3. 任意参数列表"></a>3. 任意参数列表</h4><p>任意参数列表是函数传值的第三种方式，如果一个函数意图通过定义可扩展数目的位置参数实现更好的表达，那么可以定义 <code>*args</code> 的结构。在函数体中，<code>args</code> 是包含所有剩余参数的元组。例如，我们可以用任意长度的位置参数作为参数去调用 <code>send(message, *args)</code> 这个函数，比如 <code>send(&#39;Hello&#39;, &#39;God&#39;, &#39;Mom&#39;, &#39;Cthulhu&#39;)</code>。在此函数体中，<code>args</code> 相当于 <code>(&#39;God&#39;,&#39;Mom&#39;, &#39;Cthulhu&#39;)</code>。</p><p>尽管如此，这种结构有一些缺点，应谨慎使用。如果一个函数接收到相同性质的参数列表，通常将其定义为一个参数，这样函数为更为清晰，而这个参数可以是一个列表或其他任何序列。在这里，如果 <code>send</code> 参数有多个接受者，将之定义成 <code>send(message, recipients)</code> 会更明确。调用它时就使用 <code>send(&#39;Hello&#39;, [&#39;God&#39;, &#39;Mom&#39;, &#39;Cthulhu&#39;])</code>。这样的话，函数的使用者可以事先将接收者们维护成列表形式，这为传递各种不能被转变成其他序列的序列（包括迭代器）带来了可能。</p><h4 id="4-任意关键字参数字典"><a href="#4-任意关键字参数字典" class="headerlink" title="4. 任意关键字参数字典"></a>4. 任意关键字参数字典</h4><p>关键字参数字典是最后一种函数传参的方式，如果函数要求一系列待定的命名参数，我们可以使用 <code>**kwargs</code> 的结构。在函数体中，<code>kwargs</code> 是一个 字典，它包含所有传递给函数但没有被其他关键字参数捕捉的命名参数。</p><p>和<strong>任意参数列表</strong>中所需注意的一样，这些强大的技术是要用在被证明确实需要用到它们的时候，它们不应该被用在能用更简单和更明确的结构就可以充分表达意图的函数中。</p><p>编写函数的时候采用何种参数形式，是用位置参数，还是可选关键字参数，是否使用形如任意参数列表等的高级技术，这些都由程序员自己决定的。如果能明智地遵循上面的建议，就可能且非常愉悦地写出这样的 Python 函数：</p><ul><li>易读（名字和参数不需要解释）</li><li>易改（添加新的关键字参数不会破坏代码的其他部分）</li></ul><h3 id="避免魔法方法"><a href="#避免魔法方法" class="headerlink" title="避免魔法方法"></a>避免魔法方法</h3><p>Python 对黑客来说是一个强有力的工具，它拥有非常丰富的 <code>hooks</code> 和 <code>tools</code>，允许使用者施展几乎任何形式的技巧。比如，它可以做到：</p><ul><li>改变对象的创建和初始化的方式</li><li>改变 Python 解释器引入模块的方式</li><li>在 Python 中嵌入 C 程序代码</li></ul><p>然而，这些操作都有着许多缺陷，更好的方式是使用最直接的方式达到目的。这些操作最主要的缺陷在于当使用这些方式时，程序可读性将发生很大改变。许多代码分析工具，例如: <code>pylint</code> 或者 <code>pyflakes</code> 是无法解析这些 <code>&quot;magic&quot; code</code> 的。</p><p>Python 开发者应该知道这些近乎无限的可能性，因为它让我们拥有了 <code>没有不可能完成的任务</code> 的自信。但是知道如何，尤其是何时不能使用它们是非常重要的。</p><p>一个 <code>Pythonista</code> 就像一位功夫大师，他知道如何用一个手指杀死对方，但他从不会那么去做。</p><h3 id="我们都是负责任的用户"><a href="#我们都是负责任的用户" class="headerlink" title="我们都是负责任的用户"></a>我们都是负责任的用户</h3><p>通过上面知道 Python 有许多的技巧，但其中一些是有潜在危险的。一个好的范例是：任何用户都能够重写对象的属性和方法（Python中没有 “private” 关键字）。这种哲学不同于其他高级语言，如 <code>Java</code>。因为 <code>Java</code> 中有许多防止滥用的机制。而这种哲学其实是在表达： <code>We are all responsible users</code>。</p><p>这并不意味着，比如说，Python 中没有属性是私有的，也不意味着没有合适的封装方法。与其依赖在开发者和代码之间树立起的一道道隔墙，Python 社区更愿意依靠一些约定，来表明这些元素不应该被直接访问，而应该是私有的。</p><p>私有属性实现细节的主要约定是对所有的 <code>内部变量</code> 前添加一个下划线。如果用户破坏约定去访问前缀带有下划线的变量，当被修改后的代码产生问题时，都是客户端代码的责任。</p><p>使用这些约定是被广泛鼓励的：任何不想被客户端代码使用的属性或者方法都应该加上一个前缀下划线。这样可以更好的将代码进行职责划分，也方便对已有的代码进行修改；私有属性公有化总是有可能的，而公有属性私有化可能会是很难的操作。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>当一个函数变得复杂时，在函数体中使用有多个返回值的语句并不少见。然而，为了保证明确的意图和可读性，应在函数体中避免使用返回多个值的语句。</p><p>在函数中主要有两种返回情况：当函数正常运行时，返回结果；当一个错误的情况产生，返回输入错误的参数，或者其他导致函数不能正常运行的原因。</p><p>如果在第二种情况不想抛出异常，应该返回一个值（比如 <code>None</code> 或者 <code>False</code>），指明函数没有正常执行。在这种情况下，最好尽早返回检测到的错误信息。这将有利于后续改善函数的结构。</p><p>在正常情况下，当一个函数中有多个返回出口点时，会变得很难去调试和返回结果。所以最好保持单个出口点，这会有助于提取某些代码路径，并且，多个出口点往往意味着代码需要重构了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex_function</span><span class="params">(a, b, c)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span>  <span class="comment"># Raising an exception might be better</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> b:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span>  <span class="comment"># Raising an exception might be better</span></div><div class="line">    <span class="comment"># Some complex code trying to compute x from a, b and c</span></div><div class="line">    <span class="comment"># Resist temptation to return x if succeeded</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> x:</div><div class="line">        <span class="comment"># Some Plan-B computation of x</span></div><div class="line">    <span class="keyword">return</span> x  <span class="comment"># One single exit point for the returned value x will help</span></div><div class="line">              <span class="comment"># when maintaining the code.</span></div></pre></td></tr></table></figure><h2 id="惯用方法"><a href="#惯用方法" class="headerlink" title="惯用方法"></a>惯用方法</h2><p>编程惯用方法是一种代码编写的方式，Python 的惯用方法通常被称为 <code>Pythonic</code>。</p><p>尽管通常有一种（而且最好只有一种）明显的方式去将代码写得 <code>Pythonic</code>；但对 Python 初学者来说，写出惯用法式的 Python 代码的方式是不太明显的。所以，好的惯用法必须有意识地获取。</p><p>下面是一些 Python 惯用法：</p><h3 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h3><p>如果你知道一个列表或者元组的长度，你可以将其解包并为它的元素取名。比如，<code>enumerate()</code> 会对列表中的每个项提供包含索引和列表数据两个元素的元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(some_list):</div><div class="line">    <span class="comment"># 使用index和item做一些工作</span></div></pre></td></tr></table></figure><p>也可以通过这种方式交换两个变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a, b = b, a</div></pre></td></tr></table></figure><p>嵌套解包任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a, (b, c) = <span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure><p>在 Python3 中，扩展解包的新方法在 <a href="https://www.python.org/dev/peps/pep-3132" target="_blank" rel="external">PEP 3132</a> 有介绍:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a, *rest = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="comment"># a = 1, rest = [2, 3]</span></div><div class="line">a, *middle, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="comment"># a = 1, middle = [2, 3], c = 4</span></div></pre></td></tr></table></figure><h3 id="创建一个可忽略的变量"><a href="#创建一个可忽略的变量" class="headerlink" title="创建一个可忽略的变量"></a>创建一个可忽略的变量</h3><p>如果需要赋值但不需要变量（比如，使用解包方法），可以使用 <code>__</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">filename = <span class="string">'foobar.txt'</span></div><div class="line">basename, __, ext = filename.rpartition(<span class="string">'.'</span>)</div></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">许多 Python 风格指南建议使用单下划线而不是双下划线。</div><div class="line">然而，单下划线普遍在 gettext() 函数中用作别名，也常被用在交互式命令行中保存最后一次操作的值。</div><div class="line">所以，使用双下划线更清晰方便，并能够消除一些使用情况的干扰。</div></pre></td></tr></table></figure><h3 id="创建一个长度为-N-且所有元素相同的列表"><a href="#创建一个长度为-N-且所有元素相同的列表" class="headerlink" title="创建一个长度为 N 且所有元素相同的列表"></a>创建一个长度为 N 且所有元素相同的列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">four_nones = [<span class="keyword">None</span>] * <span class="number">4</span></div></pre></td></tr></table></figure><h3 id="创建一个长度为-N-的列表"><a href="#创建一个长度为-N-的列表" class="headerlink" title="创建一个长度为 N 的列表"></a>创建一个长度为 N 的列表</h3><p>因为列表是可变的，<code>*</code> 操作对于同样的列表会创建创建 N 个原列表的引用，这可能不是你想要的结果。正确的写法应该是使用列表生成式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">four_lists = [[] <span class="keyword">for</span> __ <span class="keyword">in</span> xrange(<span class="number">4</span>)]</div></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在 Python3 中应该使用 range() 而不是 xrange()。</div></pre></td></tr></table></figure><h3 id="根据列表来创建字符串"><a href="#根据列表来创建字符串" class="headerlink" title="根据列表来创建字符串"></a>根据列表来创建字符串</h3><p>根据列表来创建字符串的一个常见用法是在空的字符串上使用 <code>str.join(list)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">letters = [<span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>]</div><div class="line">word = <span class="string">''</span>.join(letters)</div></pre></td></tr></table></figure><p>这会将 <code>word</code> 变量赋值为 <code>spam</code>。这个惯用法可以用在列表和元组中。</p><h3 id="在序列中查找一个元素"><a href="#在序列中查找一个元素" class="headerlink" title="在序列中查找一个元素"></a>在序列中查找一个元素</h3><p>有时我们需要在序列中查找元素。让我们来看看这两个选择：列表和集合。</p><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s = set([<span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>])</div><div class="line">l = [<span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookup_set</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'s'</span> <span class="keyword">in</span> s</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookup_list</span><span class="params">(l)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'s'</span> <span class="keyword">in</span> l</div></pre></td></tr></table></figure><p>即使这两个函数看起来完全一样，但因为 <code>lookup_set(s)</code> 是利用了 Python 中的集合类型是 <code>可哈希</code> 的特性，两者的查询性能是完全不同的。为了判断一个项是否在列表中，Python 将会查看每个元素直到它找到匹配的项。这是非常耗时的，尤其是对长列表来说。另一方面，在集合中，项的哈希值将会告诉 Python 应在集合的哪里去查找匹配的元素。结果是，即使集合很大，但因为哈希表的原理，查询的速度也会很快。在字典中，查询也是同样的原理。</p><p>因为这些性能上的差异，在下列场合中使用集合或者字典而不是列表，通常会是个好主意：</p><ul><li>序列中包含大量的元素</li><li>需要在序列中重复地查找元素</li><li>序列中没有重复的项</li></ul><p>对于小的序列，或者你不会频繁查找的序列，建立哈希所消耗的额外时间和内存开销经常会大过改进搜索速度所节省的时间和内存开销。</p><h2 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h2><p>也被称为 <a href="">PEP 20</a>，它是 Python 设计的指导准则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> this</div><div class="line">The Zen of Python, by Tim Peters</div><div class="line"></div><div class="line">Beautiful <span class="keyword">is</span> better than ugly.</div><div class="line">Explicit <span class="keyword">is</span> better than implicit.</div><div class="line">Simple <span class="keyword">is</span> better than complex.</div><div class="line">Complex <span class="keyword">is</span> better than complicated.</div><div class="line">Flat <span class="keyword">is</span> better than nested.</div><div class="line">Sparse <span class="keyword">is</span> better than dense.</div><div class="line">Readability counts.</div><div class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></div><div class="line"><span class="string">Although practicality beats purity.</span></div><div class="line"><span class="string">Errors should never pass silently.</span></div><div class="line"><span class="string">Unless explicitly silenced.</span></div><div class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></div><div class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></div><div class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</div><div class="line">Now <span class="keyword">is</span> better than never.</div><div class="line">Although never <span class="keyword">is</span> often better than *right* now.</div><div class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">'s a bad idea.</span></div><div class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></div><div class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s do more of those!</div><div class="line"></div><div class="line">Python之禅 by Tim Peters</div><div class="line"></div><div class="line">优美胜于丑陋（Python以编写优美的代码为目标）</div><div class="line">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</div><div class="line">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</div><div class="line">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</div><div class="line">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</div><div class="line">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</div><div class="line">可读性很重要（优美的代码是可读的）</div><div class="line">即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</div><div class="line">不要包容所有错误，除非您确定需要这样做（精准地捕获异常，不写 <span class="keyword">except</span>:<span class="keyword">pass</span> 风格的代码）</div><div class="line">当存在多种可能，不要尝试去猜测</div><div class="line">而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</div><div class="line">虽然这并不容易，因为您不是 Python 之父（这里的 Dutch 是指 Guido ）</div><div class="line">做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</div><div class="line">如果您无法向人描述您的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</div><div class="line">命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</div></pre></td></tr></table></figure><p>如果想要了解一些具有 Python 风格的例子，可以访问 <a href="http://artifex.org/~hblanks/talks/2011/pep20_by_example.pdf" target="_blank" rel="external">these slides from a Python user group</a>。</p><h2 id="PEP8"><a href="#PEP8" class="headerlink" title="PEP8"></a>PEP8</h2><p><code>PEP 8</code> 是 Python 事实上的代码风格指南，我们可以在 <a href="http://pep8.org/" target="_blank" rel="external">pep8.org</a> 上获得高质量的 <code>PEP 8</code> 版本详细介绍。</p><p>强烈推荐阅读这部分。整个 Python 社区都尽力遵循本文档中规定的准则。一些项目可能受其影响，而其他项目可以参考修改建议。</p><p>也就是说，让你的 Python 代码遵循 <code>PEP 8</code> 通常是个好主意，这也有助于在与其他开发人员一起工作时使代码更加具有可持续性和维护性。命令行程序 <a href="https://github.com/PyCQA/pycodestyle" target="_blank" rel="external">pycodestyle</a>（以前叫做 <code>pep8</code>），可以检查代码一致性。可在终端上运行以下命令来安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> pip install pycodestyle</span></div></pre></td></tr></table></figure><p>然后在文件或者很多文件中运行，如果检测到问题，会得到违反 <code>PEP8</code> 准则的报告</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ pycodestyle optparse.py</div><div class="line">optparse.py:<span class="number">69</span>:<span class="number">11</span>: E401 multiple imports on one line</div><div class="line">optparse.py:<span class="number">77</span>:<span class="number">1</span>: E302 expected <span class="number">2</span> blank lines, found <span class="number">1</span></div><div class="line">optparse.py:<span class="number">88</span>:<span class="number">5</span>: E301 expected <span class="number">1</span> blank line, found <span class="number">0</span></div><div class="line">optparse.py:<span class="number">222</span>:<span class="number">34</span>: W602 deprecated form of raising exception</div><div class="line">optparse.py:<span class="number">347</span>:<span class="number">31</span>: E211 whitespace before <span class="string">'('</span></div><div class="line">optparse.py:<span class="number">357</span>:<span class="number">17</span>: E201 whitespace after <span class="string">'&#123;'</span></div><div class="line">optparse.py:<span class="number">472</span>:<span class="number">29</span>: E221 multiple spaces before operator</div><div class="line">optparse.py:<span class="number">544</span>:<span class="number">21</span>: W601 .has_key() <span class="keyword">is</span> deprecated, use <span class="string">'in'</span></div></pre></td></tr></table></figure><p>程序 <code>autopep8</code> 能自动将代码格式化成 <code>PEP 8</code> 风格。可用以下指令安装此程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> pip install autopep8</span></div></pre></td></tr></table></figure><p>使用以下命令来格式化一个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> autopep8 --<span class="keyword">in</span>-place optparse.py</span></div></pre></td></tr></table></figure><p>不包含 <code>--in-place</code> 标志将会使得程序直接将更改的代码输出到控制台，以供审查。<code>--aggressive</code> 标志则会执行更多实质性的变化，而且可以多次使用以达到更佳的效果。</p><h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p>遵循以下的一些约定可以以让您的代码更加易读。</p><h3 id="检查变量是否等于常量"><a href="#检查变量是否等于常量" class="headerlink" title="检查变量是否等于常量"></a>检查变量是否等于常量</h3><p>你不需要明确的与 <code>None</code>、<code>True</code> 或者 <code>0</code>比较，只需要直接使用 <code>if</code> 语句。也可以<a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" target="_blank" rel="external">查阅文档</a>，来查看什么会被判定为 <code>False</code>。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> attr == <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'True!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> attr == <span class="keyword">None</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'attr is None!'</span></div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Just check the value</span></div><div class="line"><span class="keyword">if</span> attr:</div><div class="line">    <span class="keyword">print</span> <span class="string">'attr is truthy!'</span></div><div class="line"></div><div class="line"><span class="comment"># or check for the opposite</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> attr:</div><div class="line">    <span class="keyword">print</span> <span class="string">'attr is falsey!'</span></div><div class="line"></div><div class="line"><span class="comment"># or, since None is considered false, explicitly check for it</span></div><div class="line"><span class="keyword">if</span> attr <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'attr is None!'</span></div></pre></td></tr></table></figure><h3 id="访问字典元素"><a href="#访问字典元素" class="headerlink" title="访问字典元素"></a>访问字典元素</h3><p>不要使用 <code>dict.has_key()</code> 方法，使用 <code>x in d</code> 语法或者传入一个默认参数到 <code>dict.get()</code>。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;</div><div class="line"><span class="keyword">if</span> d.has_key(<span class="string">'hello'</span>):</div><div class="line">    <span class="keyword">print</span> d[<span class="string">'hello'</span>]    <span class="comment"># prints 'world'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'default_value'</span></div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">print</span> d.get(<span class="string">'hello'</span>, <span class="string">'default_value'</span>) <span class="comment"># prints 'world'</span></div><div class="line"><span class="keyword">print</span> d.get(<span class="string">'thingy'</span>, <span class="string">'default_value'</span>) <span class="comment"># prints 'default_value'</span></div><div class="line"></div><div class="line"><span class="comment"># Or:</span></div><div class="line"><span class="keyword">if</span> <span class="string">'hello'</span> <span class="keyword">in</span> d:</div><div class="line">    <span class="keyword">print</span> d[<span class="string">'hello'</span>]</div></pre></td></tr></table></figure><h3 id="维护列表的捷径"><a href="#维护列表的捷径" class="headerlink" title="维护列表的捷径"></a>维护列表的捷径</h3><p><a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" target="_blank" rel="external">列表生成式</a>提供了强大简洁的列表工作方式。而且，<code>map()</code> 和 <code>filter()</code> 函数是用一种不同且更简洁的语法处理列表。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Filter elements greater than 4</span></div><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">b = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</div><div class="line">    <span class="keyword">if</span> i &gt; <span class="number">4</span>:</div><div class="line">        b.append(i)</div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">b = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &gt; <span class="number">4</span>]</div><div class="line"><span class="comment"># Or:</span></div><div class="line">b = filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">4</span>, a)</div></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add three to all list members.</span></div><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">    a[i] += <span class="number">3</span></div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">a = [i + <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> a]</div><div class="line"><span class="comment"># Or:</span></div><div class="line">a = map(<span class="keyword">lambda</span> i: i + <span class="number">3</span>, a)</div><div class="line">Use enumerate() keep a count of your place <span class="keyword">in</span> the list.</div><div class="line"></div><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(a):</div><div class="line">    <span class="keyword">print</span> i, item</div><div class="line"><span class="comment"># prints</span></div><div class="line"><span class="comment"># 0 3</span></div><div class="line"><span class="comment"># 1 4</span></div><div class="line"><span class="comment"># 2 5</span></div></pre></td></tr></table></figure><p>使用 <code>enumerate()</code> 函数比手动维护计数有更好的可读性。而且，它对 <code>迭代器</code> 进行了更好的优化。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>推荐使用 <code>with open</code> 语法来读取文件，它会自动关闭读取的文件。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">'file.txt'</span>)</div><div class="line">a = f.read()</div><div class="line"><span class="keyword">print</span> a</div><div class="line">f.close()</div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">        <span class="keyword">print</span> line</div></pre></td></tr></table></figure><p><code>with</code> 语句更好是因为它总是会去确定你的文件是否关闭，即使在 <code>with</code> 区块中引发了一个异常。</p><h3 id="行的延续"><a href="#行的延续" class="headerlink" title="行的延续"></a>行的延续</h3><p>当一个代码逻辑行长度超过可接受的限度时，需要划分为多行，如果一行最后一个字符是反斜杠 <code>\</code>， Python 解释器会连接下一行。这在一些情况下很有帮助。但是它非常脆弱，应该避免使用：比如在行末反斜杠后加一个空格，可能会破坏代码结构并产生意外的结果。</p><p>一个更好的解决方案是在元素周围使用括号。左边以一个未闭合的括号开头，Python 解释器会把行的结尾和下一行连接起来直到遇到闭合的括号。同样的行为适用中括号和大括号。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">my_very_big_string = <span class="string">"""For a long time I used to go to bed early. Sometimes, \</span></div><div class="line"><span class="string">    when I had put out my candle, my eyes would close so quickly that I had not even \</span></div><div class="line"><span class="string">    time to say “I’m going to sleep.”"""</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> some.deep.module.inside.a.module <span class="keyword">import</span> a_nice_function, another_nice_function, \</div><div class="line">    yet_another_nice_function</div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">my_very_big_string = (</div><div class="line">    <span class="string">"For a long time I used to go to bed early. Sometimes, "</span></div><div class="line">    <span class="string">"when I had put out my candle, my eyes would close so quickly "</span></div><div class="line">    <span class="string">"that I had not even time to say “I’m going to sleep.”"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">from</span> some.deep.module.inside.a.module <span class="keyword">import</span> (</div><div class="line">    a_nice_function, another_nice_function, yet_another_nice_function)</div></pre></td></tr></table></figure><p>尽管如此，更多时候对于很长的逻辑行并没有进行划分，毕竟试图同时做更多的事情，容易影响可读性。</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul><li><a href="http://docs.python-guide.org/en/latest/writing/style/#code-style" target="_blank" rel="external">Code Style</a></li></ul><p><a href="http://pythonguidecn.readthedocs.io/zh/latest/writing/style.html#id2" target="_blank" rel="external"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“人生苦短，我用 Python。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://home.junyouxiaowu.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
      <category term="Notes" scheme="http://home.junyouxiaowu.top/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="http://home.junyouxiaowu.top/2018/03/02/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://home.junyouxiaowu.top/2018/03/02/MongoDB学习笔记/</id>
    <published>2018-03-02T05:39:27.000Z</published>
    <updated>2018-03-31T07:30:31.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“It’s mongo, not mango.”</p></blockquote><a id="more"></a><h3 id="什么是-MongoDB？"><a href="#什么是-MongoDB？" class="headerlink" title="什么是 MongoDB？"></a>什么是 MongoDB？</h3><blockquote><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p></blockquote><h3 id="MongoDB-基础概念"><a href="#MongoDB-基础概念" class="headerlink" title="MongoDB 基础概念"></a>MongoDB 基础概念</h3><table><thead><tr><th style="text-align:center">MongoDB 术语</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">database</td><td style="text-align:center">数据库</td></tr><tr><td style="text-align:center">collection</td><td style="text-align:center">集合</td></tr><tr><td style="text-align:center">document</td><td style="text-align:center">文档</td></tr><tr><td style="text-align:center">field</td><td style="text-align:center">域</td></tr><tr><td style="text-align:center">index</td><td style="text-align:center">索引</td></tr><tr><td style="text-align:center">primary key</td><td style="text-align:center">主键，MongoDB 会自动将 _id 字段设置为主键</td></tr></tbody></table><h3 id="MongoDB-数据类型"><a href="#MongoDB-数据类型" class="headerlink" title="MongoDB 数据类型"></a>MongoDB 数据类型</h3><p>几种常用的数据类型：</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">String</td><td style="text-align:center">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td style="text-align:center">Integer</td><td style="text-align:center">整型数值。用于存储数值。根据所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td style="text-align:center">Boolean</td><td style="text-align:center">布尔值。用于存储布尔值（真/假）。</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">双精度浮点值。用于存储浮点值。</td></tr><tr><td style="text-align:center">Min/Max keys</td><td style="text-align:center">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td></tr><tr><td style="text-align:center">Array</td><td style="text-align:center">用于将数组或列表或多个值存储为一个键。</td></tr><tr><td style="text-align:center">Timestamp</td><td style="text-align:center">时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td style="text-align:center">Object</td><td style="text-align:center">用于内嵌文档。</td></tr><tr><td style="text-align:center">Null</td><td style="text-align:center">用于创建空值。</td></tr><tr><td style="text-align:center">Symbol</td><td style="text-align:center">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td style="text-align:center">Date</td><td style="text-align:center">日期时间。用 UNIX 时间格式来存储当前日期或时间。也可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td style="text-align:center">Object ID</td><td style="text-align:center">对象 ID。用于创建文档的 ID。</td></tr><tr><td style="text-align:center">Binary</td><td style="text-align:center">Data    二进制数据。用于存储二进制数据。</td></tr><tr><td style="text-align:center">Code</td><td style="text-align:center">代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td style="text-align:center">Regular expression</td><td style="text-align:center">正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><h4 id="启动-MongoDB-服务"><a href="#启动-MongoDB-服务" class="headerlink" title="启动 MongoDB 服务"></a>启动 MongoDB 服务</h4><ul><li>启动 MongoDB 服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> (sudo) mongod</span></div></pre></td></tr></table></figure><ul><li>连接 MongoDB</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mongo</span></div></pre></td></tr></table></figure><h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><ul><li>登录 admin</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> use admin</span></div><div class="line">switched to db admin</div></pre></td></tr></table></figure><ul><li>创建管理员账户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.createUser(&#123; user: <span class="string">"root"</span>, <span class="built_in">pwd</span>: <span class="string">"xxxxxx"</span>, roles: [&#123; role: <span class="string">"userAdminAnyDatabase"</span>, db: <span class="string">"admin"</span> &#125;] &#125;)</span></div><div class="line">Successfully added user: &#123;</div><div class="line">    "user" : "root",</div><div class="line">    "roles" : [</div><div class="line">        &#123;</div><div class="line">            "role" : "userAdminAnyDatabase",</div><div class="line">            "db" : "admin"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>验证登录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.auth(<span class="string">"root"</span>, <span class="string">"xxxxxx"</span>)</span></div><div class="line">1</div></pre></td></tr></table></figure><ul><li>修改配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/etc</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> vim mongod.conf</span></div><div class="line">security:</div><div class="line">   authorization: enabled</div></pre></td></tr></table></figure><ul><li>启动带访问控制的 Mongodb</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> sudo mongod --auth --port 27017</span></div></pre></td></tr></table></figure><ul><li>登录管理员账户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use admin</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.auth(<span class="string">"root"</span>, <span class="string">"xxxxxx"</span>)</span></div></pre></td></tr></table></figure><ul><li>创建一个数据库并添加所有者账户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> use flask</span></div><div class="line">switched to db flask</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.createUser(&#123; user: <span class="string">"sliver"</span>, <span class="built_in">pwd</span>: <span class="string">"xxxxxx"</span>, roles: [&#123; role: <span class="string">"dbOwner"</span>, db: <span class="string">"flask"</span> &#125;] &#125;)</span></div><div class="line">Successfully added user: &#123;</div><div class="line">    "user" : "sliver",</div><div class="line">    "roles" : [</div><div class="line">        &#123;</div><div class="line">            "role" : "dbOwner",</div><div class="line">            "db" : "flask"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>添加具有读写权限的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> use flask</span></div><div class="line">switched to db flask</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.createUser(&#123; user: <span class="string">"ariel"</span>, <span class="built_in">pwd</span>: <span class="string">"mm721027"</span>, roles: [&#123; role: <span class="string">"readWrite"</span>, db: <span class="string">"flask"</span> &#125;] &#125;)</span></div><div class="line">Successfully added user: &#123;</div><div class="line">    "user" : "ariel",</div><div class="line">    "roles" : [</div><div class="line">        &#123;</div><div class="line">            "role" : "readWrite",</div><div class="line">            "db" : "flask"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>登录所有者用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.auth(<span class="string">"sliveryou"</span>, <span class="string">"xxxxxx"</span>)</span></div><div class="line">1</div><div class="line"><span class="meta">&gt;</span><span class="bash"> show tables</span></div><div class="line">users</div><div class="line">blog</div></pre></td></tr></table></figure><ul><li>权限字符</li></ul><table><thead><tr><th style="text-align:center">权限字符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">Read</td><td style="text-align:center">允许用户读取指定数据库。</td></tr><tr><td style="text-align:center">readWriter</td><td style="text-align:center">允许用户读写指定数据库。</td></tr><tr><td style="text-align:center">dbAdmin</td><td style="text-align:center">允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问 system.profile。</td></tr><tr><td style="text-align:center">userAdmin</td><td style="text-align:center">允许用户向 system.users 集合写入，也可以在指定数据库里创建、删除和管理用户。</td></tr><tr><td style="text-align:center">clusterAdmin</td><td style="text-align:center">只在 admin 数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</td></tr><tr><td style="text-align:center">readAnyDatabase</td><td style="text-align:center">只在 admin 数据库中可用，赋予用户所有数据库的读权限。</td></tr><tr><td style="text-align:center">readWriteAnyDatabase</td><td style="text-align:center">只在 admin 数据库中可用，赋予用户所有数据库的读写权限。</td></tr><tr><td style="text-align:center">userAdminAnyDatabase</td><td style="text-align:center">只在 admin 数据库中可用，赋予用户所有数据库的 userAdmin 权限。</td></tr><tr><td style="text-align:center">dbAdminAnyDatabase</td><td style="text-align:center">只在 admin 数据库中可用，赋予用户所有数据库的 dbAdmin 权限。</td></tr><tr><td style="text-align:center">root</td><td style="text-align:center">只在 admin 数据库中可用。超级账号，超级权限。</td></tr></tbody></table><h4 id="创建和删除数据库"><a href="#创建和删除数据库" class="headerlink" title="创建和删除数据库"></a>创建和删除数据库</h4><ul><li>创建数据库：use DATABASE_NAME</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> use runoob</span></div><div class="line">switched to db runoob</div></pre></td></tr></table></figure><ul><li>显示当前数据库的名称</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db</span></div><div class="line">runoob</div></pre></td></tr></table></figure><p>MongoDB 中默认的数据库为 <code>test</code>，如果没有创建新的数据库，集合将存放在 <code>test</code> 数据库中。</p><ul><li>显示所有数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> show dbs</span></div><div class="line">admin   0.000GB</div><div class="line">config  0.000GB</div><div class="line">local   0.000GB</div><div class="line">runoob  0.000GB</div><div class="line">test    0.000GB</div></pre></td></tr></table></figure><ul><li>删除数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.dropDatabase()</span></div><div class="line">&#123; "dropped" : "runoob", "ok" : 1 &#125;</div></pre></td></tr></table></figure><h4 id="创建集合并插入文档"><a href="#创建集合并插入文档" class="headerlink" title="创建集合并插入文档"></a>创建集合并插入文档</h4><ul><li>向集合中插入文档：db.COLLECTION_NAME.insert(document)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.runoob.insert(&#123;<span class="string">"a"</span>: 1, <span class="string">"b"</span>: 2&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div></pre></td></tr></table></figure><p>往当前数据库 <code>runoob</code> 新建集合 <code>runoob</code> 并插入数据。</p><ul><li>显示所有集合</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> show tables</span></div><div class="line">foo</div><div class="line"><span class="meta">&gt;</span><span class="bash"> show collections</span></div><div class="line">foo</div></pre></td></tr></table></figure><ul><li>向指定集合插入单个文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.insertOne(&#123;<span class="string">"c"</span>: 3, <span class="string">"d"</span>: 4&#125;)</span></div><div class="line">&#123;</div><div class="line">"acknowledged" : true,</div><div class="line">"insertedId" : ObjectId("5a996150bcb5714f2f2ec2d9")</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>默认将创建 <code>foo</code> 集合。</p><ul><li>向指定集合插入多个文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.insertMany([&#123;<span class="string">"A"</span>: <span class="string">"a"</span>&#125;, &#123;<span class="string">"B"</span>: <span class="string">"b"</span>&#125;, &#123;<span class="string">"C"</span>: <span class="string">"c"</span>&#125;])</span></div><div class="line">&#123;</div><div class="line">    "acknowledged" : true,</div><div class="line">    "insertedIds" : [</div><div class="line">        ObjectId("5a8ce79553f8f9f2799791ff"),</div><div class="line">        ObjectId("5a8ce79553f8f9f279979200"),</div><div class="line">        ObjectId("5a8ce79553f8f9f279979201")</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>根据变量插入文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> document = (&#123;<span class="string">"title"</span>: <span class="string">"mongo"</span>, <span class="string">"description"</span>: <span class="string">"NoSQL"</span>, <span class="string">"tags"</span>: [<span class="string">"Nice"</span>, <span class="string">"SQL"</span>]&#125;)</span></div><div class="line">&#123;</div><div class="line">    "title" : "mongo",</div><div class="line">    "description" : "NoSQL",</div><div class="line">    "tags" : [</div><div class="line">        "Nice",</div><div class="line">        "SQL"</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.save(document)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div></pre></td></tr></table></figure><ul><li>删除集合</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.test.insertOne(&#123;<span class="string">'a'</span>: 5&#125;)</span></div><div class="line">&#123;</div><div class="line">"acknowledged" : true,</div><div class="line">"insertedId" : ObjectId("5a996ad17c2937a1639592ff")</div><div class="line">&#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.test.drop()</span></div><div class="line">true</div></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><ul><li>删除所有包含 “H”: 8 键值的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.remove(&#123;<span class="string">"H"</span>: 8&#125;)</span></div><div class="line">WriteResult(&#123; "nRemoved" : 3 &#125;)</div></pre></td></tr></table></figure><ul><li>删除一个包含 “H”: 8 键值的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.remove(&#123;<span class="string">"H"</span>: 8&#125;, 1)</span></div><div class="line">WriteResult(&#123; "nRemoved" : 1 &#125;)</div></pre></td></tr></table></figure><ul><li>删除一个包含 “H”: 8 键值的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.deleteOne(&#123;<span class="string">"H"</span>: 8&#125;)</span></div><div class="line">&#123; "acknowledged" : true, "deletedCount" : 1 &#125;</div></pre></td></tr></table></figure><ul><li>删除所有文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.deleteMany(&#123;&#125;)</span></div><div class="line">&#123; "acknowledged" : true, "deletedCount" : 3 &#125;</div></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p><code>&gt; db.collection.updateOne()</code><br>即使可能有多个文档通过过滤条件匹配到，但是也最多也只更新一个文档。</p><p><code>&gt; db.collection.updateMany()</code><br>更新所有通过过滤条件匹配到的文档.</p><p><code>&gt; db.collection.replaceOne()</code><br>即使可能有多个文档通过过滤条件匹配到，但是也最多也只替换一个文档。</p><p><code>&gt; db.collection.update()</code><br>即使可能有多个文档通过过滤条件匹配到，但是也最多也只更新或者替换一个文档。<br>默认情况下, db.collection.update() 只更新 一个 文档。要更新多个文档，请使用 multi 选项。</p><h5 id="文档替换"><a href="#文档替换" class="headerlink" title="文档替换"></a>文档替换</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> var joe = db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> joe.relationships = &#123;<span class="string">"friends"</span>: joe.friends, <span class="string">"enemies"</span>: joe.enemies&#125;</span></div><div class="line">&#123; "friends" : 32, "enemies" : 2 &#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> joe</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "joe",</div><div class="line">    "friends" : 32,</div><div class="line">    "enemies" : 2,</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> delete joe.friends</span></div><div class="line">true</div><div class="line"><span class="meta">&gt;</span><span class="bash"> delete joe.enemies</span></div><div class="line">true</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;, joe)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>找到所需数据后赋值给变量，对变量进行修改后，将整个变量当成更新结果进行更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> var joe = db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> joe.age = 20</span></div><div class="line">20</div><div class="line"><span class="meta">&gt;</span><span class="bash"> joe.age++</span></div><div class="line">20</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;, joe)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2</div><div class="line">    &#125;,</div><div class="line">    "age" : 21</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用相同方法增加年龄数据。</p><h5 id="使用-set-修改器增加键值"><a href="#使用-set-修改器增加键值" class="headerlink" title="使用 $set 修改器增加键值"></a>使用 <code>$set</code> 修改器增加键值</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;, &#123;<span class="string">"<span class="variable">$set</span>"</span>:&#123;<span class="string">"work"</span>: <span class="string">"teacher"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.updateOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;, &#123;<span class="string">"<span class="variable">$set</span>"</span>: &#123;<span class="string">"favorite book"</span>: [<span class="string">"Learning Python"</span>, <span class="string">"C Programing"</span>, <span class="string">"Ruby on Rails"</span>]&#125;&#125;)</span></div><div class="line">&#123; "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 &#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2</div><div class="line">    &#125;,</div><div class="line">    "age" : 21,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning Python",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-unset-修改器删除键值"><a href="#使用-unset-修改器删除键值" class="headerlink" title="使用 $unset 修改器删除键值"></a>使用 <code>$unset</code> 修改器删除键值</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;, &#123;<span class="string">"<span class="variable">$unset</span>"</span>: &#123;<span class="string">"work"</span>: 1&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "jack",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2,</div><div class="line">    &#125;,</div><div class="line">    "age" : 28,</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning C++",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-inc-修改器增加和减少数值"><a href="#使用-inc-修改器增加和减少数值" class="headerlink" title="使用 $inc 修改器增加和减少数值"></a>使用 <code>$inc</code> 修改器增加和减少数值</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;, &#123;<span class="string">"<span class="variable">$inc</span>"</span>: &#123;<span class="string">"age"</span>: 1&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;, &#123;<span class="string">"<span class="variable">$inc</span>"</span>: &#123;<span class="string">"age"</span>: 2&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "jack",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2,</div><div class="line">    &#125;,</div><div class="line">    "age" : 31,</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning C++",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-push-往数组添加单个元素"><a href="#使用-push-往数组添加单个元素" class="headerlink" title="使用 $push 往数组添加单个元素"></a>使用 <code>$push</code> 往数组添加单个元素</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$push</span>: &#123;<span class="string">"favorite book"</span>: <span class="string">"Effective Python"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div></pre></td></tr></table></figure><h5 id="使用-push-和-each-往数组添加多个元素"><a href="#使用-push-和-each-往数组添加多个元素" class="headerlink" title="使用 $push 和 $each 往数组添加多个元素"></a>使用 <code>$push</code> 和 <code>$each</code> 往数组添加多个元素</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$push</span>: &#123;<span class="string">"favorite book"</span>: &#123;<span class="variable">$each</span>: [<span class="string">"Effective C++"</span>, <span class="string">"Python Programing"</span>]&#125;&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div></pre></td></tr></table></figure><h5 id="使用-addToSet-往数组添加不重复的元素"><a href="#使用-addToSet-往数组添加不重复的元素" class="headerlink" title="使用 $addToSet 往数组添加不重复的元素"></a>使用 <code>$addToSet</code> 往数组添加不重复的元素</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$addToSet</span>: &#123;<span class="string">"favorite book"</span>: <span class="string">"Effective Python"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning Python",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        "Python Programing",</div><div class="line">        "Effective Python"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-pull-删除数组内所有指定元素"><a href="#使用-pull-删除数组内所有指定元素" class="headerlink" title="使用 $pull 删除数组内所有指定元素"></a>使用 <code>$pull</code> 删除数组内所有指定元素</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$pull</span>: &#123;<span class="string">"favorite book"</span>: <span class="string">"Effective Python"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning Python",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        "Python Programing"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-pop-删除数组内指定位置的元素（1-代表最后一个元素，-1-代表前面第一个元素）"><a href="#使用-pop-删除数组内指定位置的元素（1-代表最后一个元素，-1-代表前面第一个元素）" class="headerlink" title="使用 $pop 删除数组内指定位置的元素（1 代表最后一个元素，-1 代表前面第一个元素）"></a>使用 <code>$pop</code> 删除数组内指定位置的元素（1 代表最后一个元素，-1 代表前面第一个元素）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$pop</span>: &#123;<span class="string">"favorite book"</span>: 1&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$pop</span>: &#123;<span class="string">"favorite book"</span>: -1&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="基于位置的数组修改器"><a href="#基于位置的数组修改器" class="headerlink" title="基于位置的数组修改器"></a>基于位置的数组修改器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$addToSet</span>: &#123;<span class="string">"favorite book"</span>: &#123;<span class="string">"book name"</span>: <span class="string">"Effective Python"</span>, <span class="string">"language"</span>: <span class="string">"Python"</span>, <span class="string">"tag"</span>: <span class="string">"Fine"</span>&#125;&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        &#123;</div><div class="line">            "book name" : "Effective Python",</div><div class="line">            "language" : "Python",</div><div class="line">            "tag" : "Fine"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">"favorite book.3.tag"</span>: <span class="string">"Nice"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        &#123;</div><div class="line">            "book name" : "Effective Python",</div><div class="line">            "language" : "Python",</div><div class="line">            "tag" : "Nice"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"favorite book.book name"</span>: <span class="string">"Effective Python"</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">"favorite book.$.tag"</span>: <span class="string">"Good"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        &#123;</div><div class="line">            "book name" : "Effective Python",</div><div class="line">            "language" : "Python",</div><div class="line">            "tag" : "Good"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="upsert-更新"><a href="#upsert-更新" class="headerlink" title="upsert 更新"></a><code>upsert</code> 更新</h5><p>指定 <code>update</code> 的第三个参数为 <code>true</code> 即可。<br>当没有找到符合更新条件的文档，将会以该条件新建一个文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"sliver"</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">"work"</span>: <span class="string">"student"</span>&#125;&#125;, <span class="literal">true</span>)</span></div><div class="line">WriteResult(&#123;</div><div class="line">    "nMatched" : 0,</div><div class="line">    "nUpserted" : 1,</div><div class="line">    "nModified" : 0,</div><div class="line">    "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789")</div><div class="line">&#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"sliver"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"),</div><div class="line">    "name" : "sliver",</div><div class="line">    "work" : "student"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="更新多个文档"><a href="#更新多个文档" class="headerlink" title="更新多个文档"></a>更新多个文档</h5><p>指定 <code>update</code> 的第四个个参数为 <code>true</code> 即可或者使用 <code>updateMany()</code></p><h4 id="查找文档"><a href="#查找文档" class="headerlink" title="查找文档"></a>查找文档</h4><ul><li>找到集合 <code>foo</code> 中的所有文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find()</span></div><div class="line">&#123; "_id" : ObjectId("5a8cf74053f8f9f279979205"), "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125;, "age" : 31, "favorite book" : [ "Learning C++", "C Programing", "Ruby on Rails" ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student" &#125;</div></pre></td></tr></table></figure><ul><li>特定条件查询</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8cf74053f8f9f279979205"), "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125;, "age" : 31, "favorite book" : [ "Learning C++", "C Programing", "Ruby on Rails" ] &#125;</div></pre></td></tr></table></figure><ul><li>指定需要返回的键值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;&#125;, &#123;<span class="string">"name"</span>: 1, <span class="string">"_id"</span>: 0, <span class="string">"relationships"</span>: 1&#125;)</span></div><div class="line">&#123; "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125; &#125;</div><div class="line">&#123; "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125; &#125;</div><div class="line">&#123; "name" : "sliver" &#125;</div></pre></td></tr></table></figure><h4 id="包含特定大小关系的查找"><a href="#包含特定大小关系的查找" class="headerlink" title="包含特定大小关系的查找"></a>包含特定大小关系的查找</h4><h5 id="比较关系操作符"><a href="#比较关系操作符" class="headerlink" title="比较关系操作符"></a>比较关系操作符</h5><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">$lte</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">$lt</td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center">$gte</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">$gt</td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center">$eq</td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center">$ne</td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center">$in</td><td style="text-align:center">包含</td></tr><tr><td style="text-align:center">$nin</td><td style="text-align:center">不包含</td></tr></tbody></table><ul><li>查找年龄在 18 ~ 30 直接的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"age"</span>: &#123;<span class="variable">$gte</span>: 18, <span class="variable">$lte</span>:30&#125;&#125;)  // greater than or equel to 18, lower than or equel to 30</span></div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student", "age" : 20, "relationships" : [ &#123; "friends" : 25, "enemies" : 1, "lovers" : 1 &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>查找年龄为 22 或者 职业为 student 的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="variable">$or</span>: [&#123;<span class="string">"age"</span>: 22&#125;, &#123;<span class="string">"work"</span>: <span class="string">"student"</span>&#125;]&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student", "age" : 20, "relationships" : [ &#123; "friends" : 25, "enemies" : 1, "lovers" : 1 &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>查找年龄在 18 ~ 30 之间 并且 职业为 student 的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"age"</span>: &#123;<span class="variable">$gte</span>: 18, <span class="variable">$lte</span>:30&#125;, <span class="string">"work"</span>: <span class="string">"student"</span>&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student", "age" : 20, "relationships" : [ &#123; "friends" : 25, "enemies" : 1, "lovers" : 1 &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>查找 favorite book 中有 Ruby on Rails 和 C Programing 的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"favorite book"</span>: &#123;<span class="variable">$in</span>: [<span class="string">"Ruby on Rails"</span>, <span class="string">"C Programing"</span>]&#125;&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8cf74053f8f9f279979205"), "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125;, "age" : 31, "favorite book" : [ "Learning C++", "C Programing", "Ruby on Rails" ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>查找 favorite book 中没有 Java 的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"favorite book"</span> : &#123;<span class="variable">$nin</span>: [<span class="string">"Java"</span>]&#125;&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8cf74053f8f9f279979205"), "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125;, "age" : 31, "favorite book" : [ "Learning C++", "C Programing", "Ruby on Rails" ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student", "age" : 20, "relationships" : [ &#123; "friends" : 25, "enemies" : 1, "lovers" : 1 &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>null 会匹配某个键的值为 null 的文档，而且还会匹配不包含这个键的文档，查询时需要加上 <code>exists</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"z"</span>: &#123;<span class="variable">$in</span>: [null], <span class="variable">$exists</span>: <span class="literal">true</span>&#125;&#125;)</span></div></pre></td></tr></table></figure><h4 id="查找数组"><a href="#查找数组" class="headerlink" title="查找数组"></a>查找数组</h4><p>创建 <code>food</code> 集合：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.insert(&#123;<span class="string">"_id"</span>: 1, <span class="string">"fruit"</span>: [<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"peach"</span>]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.insert(&#123;<span class="string">"_id"</span>: 2, <span class="string">"fruit"</span>: [<span class="string">"apple"</span>, <span class="string">"kumguat"</span>, <span class="string">"orange"</span>]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.insert(&#123;<span class="string">"_id"</span>: 3, <span class="string">"fruit"</span>: [<span class="string">"cherry"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span>]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find()</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana", "peach" ] &#125;</div><div class="line">&#123; "_id" : 2, "fruit" : [ "apple", "kumguat", "orange" ] &#125;</div><div class="line">&#123; "_id" : 3, "fruit" : [ "cherry", "banana", "apple" ] &#125;</div></pre></td></tr></table></figure><ul><li>找到含有 <code>apple</code> 和 <code>banana</code> 数组的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$all</span>: [<span class="string">"apple"</span>, <span class="string">"banana"</span>]&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana", "peach" ] &#125;</div><div class="line">&#123; "_id" : 3, "fruit" : [ "cherry", "banana", "apple" ] &#125;</div></pre></td></tr></table></figure><ul><li>查询数组特定位置的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"fruit.2"</span>: <span class="string">"peach"</span>&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana", "peach" ] &#125;</div></pre></td></tr></table></figure><p>插入一个元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.update(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="variable">$addToSet</span>: &#123;<span class="string">"fruit"</span>: <span class="string">"mango"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div></pre></td></tr></table></figure><ul><li>找到 <code>fruit</code> 数组大小为4的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$size</span>: 4&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana", "peach", "mango" ] &#125;</div></pre></td></tr></table></figure><ul><li>找到 <code>fruit</code> 数组大小为3的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$size</span>: 3&#125;&#125;)</span></div><div class="line">&#123; "_id" : 2, "fruit" : [ "apple", "kumguat", "orange" ] &#125;</div><div class="line">&#123; "_id" : 3, "fruit" : [ "cherry", "banana", "apple" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回 <code>fruit</code> 数组最后两个元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: -2&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "peach", "mango" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回 <code>fruit</code> 数组前面两个元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: 2&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回 <code>fruit</code> 数组索引为2~3的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: [2, 2]&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "peach", "mango" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回 <code>fruit</code> 数组索引为1~2的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: [1, 2]&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "banana", "peach" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回所有文档里 <code>fruit</code> 数组的最后两个元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: -2&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "peach", "mango" ] &#125;</div><div class="line">&#123; "_id" : 2, "fruit" : [ "kumguat", "orange" ] &#125;</div><div class="line">&#123; "_id" : 3, "fruit" : [ "banana", "apple" ] &#125;</div></pre></td></tr></table></figure><p>创建 <code>grades</code> 集合：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.insert(&#123;<span class="string">"_id"</span>: 1, <span class="string">"grade"</span>: [90, 80 ,70]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.insert(&#123;<span class="string">"_id"</span>: 2, <span class="string">"grade"</span>: [91, 92 ,89]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.insert(&#123;<span class="string">"_id"</span>: 3, <span class="string">"grade"</span>: [71, 72 ,79]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.find()</span></div><div class="line">&#123; "_id" : 1, "grade" : [ 90, 80, 70 ] &#125;</div><div class="line">&#123; "_id" : 2, "grade" : [ 91, 92, 89 ] &#125;</div><div class="line">&#123; "_id" : 3, "grade" : [ 71, 72, 79 ] &#125;</div></pre></td></tr></table></figure><ul><li>查找 <code>grade</code> 数组包含范围为 (80, 95) 数据的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.find(&#123;<span class="string">"grade"</span>: &#123;<span class="variable">$elemMatch</span>: &#123;<span class="variable">$gt</span>: 80, <span class="variable">$lt</span>: 95&#125;&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "grade" : [ 90, 80, 70 ] &#125;</div><div class="line">&#123; "_id" : 2, "grade" : [ 91, 92, 89 ] &#125;</div></pre></td></tr></table></figure><ul><li>查找 <code>grade</code> 数组包含范围为 (70, 75) 数据的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.find(&#123;<span class="string">"grade"</span>: &#123;<span class="variable">$elemMatch</span>: &#123;<span class="variable">$gt</span>: 70, <span class="variable">$lt</span>: 75&#125;&#125;&#125;)</span></div><div class="line">&#123; "_id" : 3, "grade" : [ 71, 72, 79 ] &#125;</div></pre></td></tr></table></figure><p>创建 <code>blog</code> 集合：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.blog.insert(&#123;<span class="string">"content"</span>: <span class="string">"article"</span>, <span class="string">"comments"</span>: [&#123;<span class="string">"author"</span>: <span class="string">"joe"</span>, <span class="string">"score"</span>: 3, <span class="string">"comment"</span>: <span class="string">"nice post"</span>&#125;, &#123;<span class="string">"author"</span>: <span class="string">"mary"</span>, <span class="string">"score"</span>: 6, <span class="string">"comment"</span>: <span class="string">"terrible post"</span>&#125;, &#123;<span class="string">"author"</span>: <span class="string">"joe"</span>, <span class="string">"score"</span>: 5, <span class="string">"comment"</span>: <span class="string">"ok..."</span>&#125;]&#125;)</span></div></pre></td></tr></table></figure><ul><li>查找 <code>comments</code> 数组中作者为 <code>author</code> 或者分数大于等于3的文章 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.blog.find(&#123;<span class="string">"comments"</span>: &#123;<span class="variable">$elemMatch</span>: &#123;<span class="string">"author"</span>: <span class="string">"joe"</span>, <span class="string">"score"</span>: &#123;<span class="variable">$gte</span>: 3&#125;&#125;&#125;&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a9aaced52f59c4d6924b177"), "content" : "article", "comments" : [ &#123; "author" : "joe", "score" : 3, "comment" : "nice post" &#125;, &#123; "author" : "mary", "score" : 6, "comment" : "terrible post" &#125;, &#123; "author" : "joe", "score" : 5, "comment" : "ok..." &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>通过 <code>$where</code> 使用 <code>JavaScript</code> 函数查询文档</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.food.find(&#123;<span class="attr">$where</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>._id === <span class="number">1</span>&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">1</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"peach"</span>, <span class="string">"mango"</span> ] &#125;</div></pre></td></tr></table></figure><h4 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h4><p>创建 <code>collection</code> 集合：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">... db.collection.insert(&#123;<span class="string">"x"</span>: i&#125;)</div><div class="line">... &#125;</div><div class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</div></pre></td></tr></table></figure><p>创建并使用游标：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">var</span> cursor = db.collection.find();</div><div class="line">&gt; <span class="keyword">while</span> (cursor.hasNext()) &#123;</div><div class="line">... obj = cursor.next();</div><div class="line">... &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab0b652f59c4d6924b1db"</span>), <span class="string">"x"</span> : <span class="number">99</span> &#125;</div></pre></td></tr></table></figure><p>类似于迭代器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> cursor.hasNext()</span></div><div class="line">false</div></pre></td></tr></table></figure><h4 id="limit、skip-和-sort"><a href="#limit、skip-和-sort" class="headerlink" title="limit、skip 和 sort"></a><code>limit</code>、<code>skip</code> 和 <code>sort</code></h4><ul><li>按 <code>_id</code> 逆序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.food.find().sort(&#123;<span class="string">"_id"</span>: <span class="number">-1</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">3</span>, <span class="string">"fruit"</span> : [ <span class="string">"cherry"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">2</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"kumguat"</span>, <span class="string">"orange"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">1</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"peach"</span>, <span class="string">"mango"</span> ] &#125;</div></pre></td></tr></table></figure><ul><li>按 <code>_id</code> 正序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.food.find().sort(&#123;<span class="string">"_id"</span>: <span class="number">1</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">1</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"peach"</span>, <span class="string">"mango"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">2</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"kumguat"</span>, <span class="string">"orange"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">3</span>, <span class="string">"fruit"</span> : [ <span class="string">"cherry"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span> ] &#125;</div></pre></td></tr></table></figure><ul><li>跳过前面的数据从80开始到最后</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&gt; db.collection.find().skip(<span class="number">80</span>)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22c"</span>), <span class="string">"x"</span> : <span class="number">80</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22d"</span>), <span class="string">"x"</span> : <span class="number">81</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22e"</span>), <span class="string">"x"</span> : <span class="number">82</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22f"</span>), <span class="string">"x"</span> : <span class="number">83</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b230"</span>), <span class="string">"x"</span> : <span class="number">84</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b231"</span>), <span class="string">"x"</span> : <span class="number">85</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b232"</span>), <span class="string">"x"</span> : <span class="number">86</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b233"</span>), <span class="string">"x"</span> : <span class="number">87</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b234"</span>), <span class="string">"x"</span> : <span class="number">88</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b235"</span>), <span class="string">"x"</span> : <span class="number">89</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b236"</span>), <span class="string">"x"</span> : <span class="number">90</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b237"</span>), <span class="string">"x"</span> : <span class="number">91</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b238"</span>), <span class="string">"x"</span> : <span class="number">92</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b239"</span>), <span class="string">"x"</span> : <span class="number">93</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23a"</span>), <span class="string">"x"</span> : <span class="number">94</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23b"</span>), <span class="string">"x"</span> : <span class="number">95</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23c"</span>), <span class="string">"x"</span> : <span class="number">96</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23d"</span>), <span class="string">"x"</span> : <span class="number">97</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23e"</span>), <span class="string">"x"</span> : <span class="number">98</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23f"</span>), <span class="string">"x"</span> : <span class="number">99</span> &#125;</div></pre></td></tr></table></figure><ul><li>跳过前面的数据从80开始，但是限制数量为10个</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt; db.collection.find().skip(<span class="number">80</span>).limit(<span class="number">10</span>)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22c"</span>), <span class="string">"x"</span> : <span class="number">80</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22d"</span>), <span class="string">"x"</span> : <span class="number">81</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22e"</span>), <span class="string">"x"</span> : <span class="number">82</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22f"</span>), <span class="string">"x"</span> : <span class="number">83</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b230"</span>), <span class="string">"x"</span> : <span class="number">84</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b231"</span>), <span class="string">"x"</span> : <span class="number">85</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b232"</span>), <span class="string">"x"</span> : <span class="number">86</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b233"</span>), <span class="string">"x"</span> : <span class="number">87</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b234"</span>), <span class="string">"x"</span> : <span class="number">88</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b235"</span>), <span class="string">"x"</span> : <span class="number">89</span> &#125;</div></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://www.mongodb.org.cn/manual/" target="_blank" rel="external">MongoDB 中文手册</a></li><li><a href="https://docs.mongodb.com/manual/reference/operator/update-array/" target="_blank" rel="external">MongoDB 官方文档</a></li><li><a href="https://book.douban.com/subject/25798102/" target="_blank" rel="external">MongoDB 权威指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“It’s mongo, not mango.”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://home.junyouxiaowu.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MongoDB" scheme="http://home.junyouxiaowu.top/tags/MongoDB/"/>
    
      <category term="Notes" scheme="http://home.junyouxiaowu.top/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2常用快捷键</title>
    <link href="http://home.junyouxiaowu.top/2018/03/02/iTerm2%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://home.junyouxiaowu.top/2018/03/02/iTerm2快捷键/</id>
    <published>2018-03-02T04:39:27.000Z</published>
    <updated>2018-03-02T05:46:10.349Z</updated>
    
    <content type="html"><![CDATA[<p>你不能不知道的 iTerm2 技巧。</p><a id="more"></a><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgiTerm2.jpg" width="600px"></p><h3 id="常用功能快捷键"><a href="#常用功能快捷键" class="headerlink" title="常用功能快捷键"></a>常用功能快捷键</h3><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">新建标签</td><td style="text-align:center">command + t</td></tr><tr><td style="text-align:center">关闭标签</td><td style="text-align:center">command + w</td></tr><tr><td style="text-align:center">切换标签</td><td style="text-align:center">command + 数字 / command + 左右方向键</td></tr><tr><td style="text-align:center">切换全屏</td><td style="text-align:center">command + enter</td></tr><tr><td style="text-align:center">查找</td><td style="text-align:center">command + f</td></tr><tr><td style="text-align:center">垂直分屏</td><td style="text-align:center">command + d</td></tr><tr><td style="text-align:center">水平分屏</td><td style="text-align:center">command + shift + d</td></tr><tr><td style="text-align:center">切换屏幕</td><td style="text-align:center">command + option + 左右方向键 / command + [ / command + ]</td></tr><tr><td style="text-align:center">查看历史命令</td><td style="text-align:center">command + ;</td></tr><tr><td style="text-align:center">查看剪贴板历史</td><td style="text-align:center">command + shift + h</td></tr><tr><td style="text-align:center">清除当前行</td><td style="text-align:center">ctrl + u</td></tr><tr><td style="text-align:center">光标到行首</td><td style="text-align:center">ctrl + a</td></tr><tr><td style="text-align:center">光标到行尾</td><td style="text-align:center">ctrl + e</td></tr><tr><td style="text-align:center">光标前进后退</td><td style="text-align:center">ctrl + f/b (相当于左右方向键)</td></tr><tr><td style="text-align:center">上一条命令</td><td style="text-align:center">ctrl + p</td></tr><tr><td style="text-align:center">搜索命令历史</td><td style="text-align:center">ctrl + r</td></tr><tr><td style="text-align:center">删除当前光标的字符</td><td style="text-align:center">ctrl + d</td></tr><tr><td style="text-align:center">删除光标之前的字符</td><td style="text-align:center">ctrl + h</td></tr><tr><td style="text-align:center">删除光标之前的单词</td><td style="text-align:center">ctrl + w</td></tr><tr><td style="text-align:center">删除光标之后的字符</td><td style="text-align:center">ctrl + k</td></tr><tr><td style="text-align:center">交换光标处文本</td><td style="text-align:center">ctrl + t</td></tr><tr><td style="text-align:center">清屏</td><td style="text-align:center">command + r / ctrl + l</td></tr></tbody></table><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><p>简单配置一些插件，往往能显著提高工作效率。<br>只要在 <code>~/.zshrc</code> 文件的 <code>plugin</code> 下面添加上想要的插件名称就可以了，并且 <code>oh-my-zsh</code> 自带了很多插件，可以通过 <code>ls ~/.oh-my-zsh/plugins</code> 来查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(git-extras git mvn svn osx brew brew-cask npm  colored-man colorize copydir history sublime command-not-found zsh-syntax-highlighting Z)</div></pre></td></tr></table></figure><ul><li>git：当你处于一个 git 受控的目录下时，shell 会明确显示 <code>git</code> 和 <code>branch</code>，另外对 git 很多命令进行了简化，例如 <code>gco=’git checkout’</code>、<code>gd=’git diff’</code>、<code>gst=’git status’</code>、<code>g=’git’</code> 等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考 <code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code>。</li><li>textmate：<code>mr</code> 可以创建 ruby 的框架项目，<code>tm finename</code> 可以用 textmate 打开指定文件。<br>osx：tab 增强，<code>quick-look filename</code> 可以直接预览文件，<code>man-preview grep</code> 可以生成 grep 手册的 pdf 版本等。</li><li>git-extras: Git extras 工具与 zsh 的继承，很方便，在 git 仓库目录下试试 <code>git summary</code> 即可看到整个仓库的汇总信息。</li><li>sublime : 此插件能够在终端下使用命令 <code>stt</code> 在 SublimeText 中打开当前文件夹，使用 <code>subl</code> 或者 <code>st</code> 来编辑某个特定文件，比如 <code>st 1.txt</code>，当然前提你得安装了 SublimeText。</li><li>zsh-syntax-highlighting: 让终端的每一条命令智能显示颜色，就像在 IDE 里面写代码一样，强烈推荐，安装只需要输入 <code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code> 命令再添加 <code>zsh-syntax-highlighting</code> 插件即可。</li><li>z : Z is awesome ，让你在不同的目录中快速跳转，比如想访问 <code>~/work/code/project/testApp</code>，只要是之前访问过，直接输入 <code>z testApp</code> 按 <code>tab</code> 键直接显示完整目录，按 <code>enter</code> 键直接进入当前目录，即使只输入了 <code>z testa</code> 也能完成同样的工作，大大提升效率。</li><li>ag: 终端里面快速搜索当前目录下所有文件中所匹配的关键字的命令，类似与 <code>awk</code>，但是速度极快，速度极快，速度极快，使用 <code>brew install</code>，其实就是组件 <code>the_silver_searcher</code> ，详细参考地址 GitHub 。</li><li>tree : mac 下的 <code>tree</code> 命令，方便排查问题，直接 <code>brew install tree</code> 即可。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://blog.csdn.net/ws1352864983/article/details/51512904" target="_blank" rel="external">http://blog.csdn.net/ws1352864983/article/details/51512904</a></li><li><a href="https://www.jianshu.com/p/5ec4ba334102" target="_blank" rel="external">https://www.jianshu.com/p/5ec4ba334102</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你不能不知道的 iTerm2 技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://home.junyouxiaowu.top/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
      <category term="iTerm2" scheme="http://home.junyouxiaowu.top/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo自定义Markdown渲染</title>
    <link href="http://home.junyouxiaowu.top/2018/02/27/%E8%87%AA%E5%AE%9A%E4%B9%89markdown/"/>
    <id>http://home.junyouxiaowu.top/2018/02/27/自定义markdown/</id>
    <published>2018-02-27T10:09:27.000Z</published>
    <updated>2018-02-28T03:23:31.076Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>看惯俗粉，不如魔改。</p></blockquote><a id="more"></a><p>首先需要修改 <code>Hexo</code> 默认的 <code>Markdown</code> 插件，是在 <code>node_modules/hexo-renderer-marked/lib/</code> 目录下的 <code>renderer.js</code> 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> marked = <span class="built_in">require</span>(<span class="string">'marked'</span>);</div><div class="line"><span class="keyword">var</span> assign = <span class="built_in">require</span>(<span class="string">'object-assign'</span>);</div><div class="line"><span class="keyword">var</span> stripIndent = <span class="built_in">require</span>(<span class="string">'strip-indent'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'hexo-util'</span>);</div><div class="line"><span class="keyword">var</span> highlight = util.highlight;</div><div class="line"><span class="keyword">var</span> stripHTML = util.stripHTML;</div><div class="line"><span class="keyword">var</span> MarkedRenderer = marked.Renderer;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Renderer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    MarkedRenderer.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>._headingId = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'util'</span>).inherits(Renderer, MarkedRenderer);</div><div class="line"></div><div class="line"><span class="comment">// Add id attribute to headings</span></div><div class="line">Renderer.prototype.heading = <span class="function"><span class="keyword">function</span>(<span class="params">text, level</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> id = anchorId(stripHTML(text));</div><div class="line">    <span class="keyword">var</span> headingId = <span class="keyword">this</span>._headingId;</div><div class="line"></div><div class="line">    <span class="comment">// Add a number after id if repeated</span></div><div class="line">    <span class="keyword">if</span> (headingId[id]) &#123;</div><div class="line">        id += <span class="string">'-'</span> + headingId[id]++;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        headingId[id] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// add headerlink</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;h'</span> + level + <span class="string">' id="'</span> + id + <span class="string">'"&gt;&lt;a href="#'</span> + id + <span class="string">'" class="headerlink" title="'</span> + stripHTML(text) + <span class="string">'"&gt;&lt;/a&gt;'</span> + text + <span class="string">'&lt;/h'</span> + level + <span class="string">'&gt;'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anchorId</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="comment">// Add support for Chinese</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">escape</span>(str</div><div class="line">        .replace(<span class="regexp">/\s+/g</span>, <span class="string">'_'</span>)</div><div class="line">        .replace(<span class="regexp">/\./g</span>, <span class="string">'-'</span>)</div><div class="line">        .replace(<span class="regexp">/-&#123;2,&#125;/g</span>, <span class="string">'-'</span>)).replace(<span class="regexp">/%/g</span>, <span class="string">'_'</span>).replace(<span class="regexp">/^[\-_]+|[\-_]+$/g</span>, <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">marked.setOptions(&#123;</div><div class="line">    langPrefix: <span class="string">''</span>,</div><div class="line">    highlight: <span class="function"><span class="keyword">function</span>(<span class="params">code, lang</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> highlight(stripIndent(code), &#123;</div><div class="line">            lang: lang,</div><div class="line">            gutter: <span class="literal">false</span>,</div><div class="line">            wrap: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">data, options</span>) </span>&#123;</div><div class="line">    <span class="comment">// return marked(data.text, assign(&#123;</span></div><div class="line">    <span class="comment">//    renderer: new Renderer()</span></div><div class="line">    <span class="comment">//  &#125;, this.config.marked, options));</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> curRender = <span class="keyword">new</span> Renderer(),</div><div class="line">        markedRenderer = <span class="keyword">this</span>.markedRenderer;</div><div class="line"></div><div class="line">    <span class="comment">// init function</span></div><div class="line">    <span class="keyword">if</span> (markedRenderer &amp;&amp; <span class="keyword">typeof</span>(markedRenderer.init) == <span class="string">'function'</span>) &#123;</div><div class="line">        markedRenderer.init.call(<span class="keyword">this</span>, data, options);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// override marked.Render</span></div><div class="line">    <span class="keyword">if</span> (markedRenderer) &#123;</div><div class="line">        curRender = assign(curRender, markedRenderer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// get html content</span></div><div class="line">    <span class="keyword">var</span> html = marked(data.text, assign(&#123;</div><div class="line">        renderer: curRender</div><div class="line">    &#125;, <span class="keyword">this</span>.config.marked, options));</div><div class="line"></div><div class="line">    <span class="comment">// complete function</span></div><div class="line">    <span class="keyword">if</span> (markedRenderer &amp;&amp; <span class="keyword">typeof</span>(markedRenderer.complete) == <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">var</span> tmpHtml = markedRenderer.complete.call(<span class="keyword">this</span>, html);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!tmpHtml) &#123;</div><div class="line">            html = tmpHtml;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> html;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>修改 <code>module.exports = function(data, options)</code> 后的部分即可，这里附上所有代码，如上。</p><p>接下来在所用主题目录 <code>yourtheme/scripts/</code>，创建 <code>marked-renderer.js</code> 并写入:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">hexo.markedRenderer = &#123;</div><div class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// console.log("hexo.markedRenderer init!");</span></div><div class="line">        <span class="comment">// Called before rendering </span></div><div class="line">    &#125;,</div><div class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">        <span class="comment">// console.log("hexo.markedRenderer complete!");</span></div><div class="line">        <span class="comment">// Called after rendered</span></div><div class="line">        </div><div class="line">        <span class="comment">// Deal with html here ...</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> html;</div><div class="line">    &#125;,</div><div class="line">    image: <span class="function"><span class="keyword">function</span>(<span class="params">href, title, alt</span>) </span>&#123;</div><div class="line">        <span class="comment">// Default method can be accessed via:</span></div><div class="line">        <span class="comment">// this._super.heading(text, level)</span></div><div class="line">        <span class="keyword">var</span> orimg = <span class="string">'&lt;img data-original="'</span> + href;</div><div class="line">        <span class="keyword">if</span> (title) orimg += <span class="string">'" title="'</span> + title;</div><div class="line">        <span class="keyword">if</span> (alt) orimg += <span class="string">'" alt="'</span> + alt;</div><div class="line">        <span class="keyword">return</span> orimg + <span class="string">'"&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>大功告成。<br>感谢 <code>Github</code> 大佬们：<a href="https://github.com/helinjiang/hexo-renderer-marked-enhanced" target="_blank" rel="external">https://github.com/helinjiang/hexo-renderer-marked-enhanced</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;看惯俗粉，不如魔改。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="魔改" scheme="http://home.junyouxiaowu.top/categories/%E9%AD%94%E6%94%B9/"/>
    
    
      <category term="Hexo" scheme="http://home.junyouxiaowu.top/tags/Hexo/"/>
    
      <category term="Markdown" scheme="http://home.junyouxiaowu.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Python小课堂之命名元组、频度统计和排序技巧</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/Python%E5%B0%8F%E8%AF%BE%E5%A0%821/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/Python小课堂1/</id>
    <published>2018-02-25T11:49:27.000Z</published>
    <updated>2018-02-28T03:07:53.777Z</updated>
    
    <content type="html"><![CDATA[<p>写给女朋友的小课堂 One🌟</p><a id="more"></a><h3 id="如何为元组中的每个元素命名，提高程序可读性？"><a href="#如何为元组中的每个元素命名，提高程序可读性？" class="headerlink" title="如何为元组中的每个元素命名，提高程序可读性？"></a>如何为元组中的每个元素命名，提高程序可读性？</h3><p>我们知道，C 语言中存在结构体，如一个链表节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    ElemType data; </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></div><div class="line">&#125; LNode;</div></pre></td></tr></table></figure><p>结构体的引入，使程序的可读性有显著的提高，我们可以使用如 <code>L.data</code> 访问元素。<br>在 Python 中，我们可以使用命名元组来提高程序可读性。</p><p>现在，我们来创建一个 Student 命名元组：</p><p>in[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"></div><div class="line"><span class="comment"># 第一个变量是元组名称，第二个参数是一个列表，包含了元组里想要包含的元素 </span></div><div class="line">Student = namedtuple(<span class="string">'Student'</span>, [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>, <span class="string">'grade'</span>])</div><div class="line"></div><div class="line">student1 = Student(<span class="string">'Sliver'</span>, <span class="number">20</span>, <span class="string">'male'</span>, <span class="number">99</span>) <span class="comment"># 默认赋值</span></div><div class="line">student2 = Student(name=<span class="string">'Arial'</span>, grade=<span class="number">100</span>, age=<span class="number">18</span>, sex=<span class="string">'female'</span>) <span class="comment"># 通过关键字赋值</span></div><div class="line">print(student1)</div><div class="line">print(student2)</div></pre></td></tr></table></figure><p>out[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student(name=<span class="string">'Sliver'</span>, age=<span class="number">20</span>, sex=<span class="string">'male'</span>, grade=<span class="number">99</span>)</div><div class="line">Student(name=<span class="string">'Arial'</span>, age=<span class="number">18</span>, sex=<span class="string">'female'</span>, grade=<span class="number">100</span>)</div></pre></td></tr></table></figure><p>现在我们可以直接通过属性来访问数据，其内存占用不高，比普通元组也只是大了一点，在迭代方面与元组等效。</p><p>in[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> s <span class="keyword">in</span> student1:</div><div class="line">    print(s)</div><div class="line">print()</div><div class="line">print(student1.name, student1.age, student1.sex, student1.grade); print()</div></pre></td></tr></table></figure><p>out[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Sliver</div><div class="line"><span class="number">20</span></div><div class="line">male</div><div class="line"><span class="number">99</span></div><div class="line"></div><div class="line">Sliver <span class="number">20</span> male <span class="number">99</span></div></pre></td></tr></table></figure><h3 id="如何统计序列中元素出现的频度？"><a href="#如何统计序列中元素出现的频度？" class="headerlink" title="如何统计序列中元素出现的频度？"></a>如何统计序列中元素出现的频度？</h3><p>我们先创建一个在[0, 20]之间数量为30个的随机列表，这样肯定会有重复的元素：</p><p>in[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line">l1 = [random.randint(<span class="number">0</span>, <span class="number">20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>)] </div><div class="line">print(l1)</div></pre></td></tr></table></figure><p>out[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">2</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">19</span>]</div></pre></td></tr></table></figure><p>我们想知道每个数据出现的次数，比如2出现了5次，3出现了2次等，这样其实很符合字典的构造，因为字典其实就是一个 <code>key-value</code> 形式，如 <code>{2: 5, 3:2}</code> 可以表示2出现了5次，3出现了2次。<br>现在我们来根据这个思路来统计出现次数，也就是频度：</p><p>in[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = dict.fromkeys(l1, <span class="number">0</span>) </div><div class="line">print(data)</div></pre></td></tr></table></figure><p><code>dict.fromkeys()</code> 是字典对象的一个方法，第一个参数是要取键值的序列，第二个参数是默认让每个键对应的值，这里我们选0进行赋值，因为字典不允许有重复的键，这样我们也就把序列中的唯一元素都取了出来。</p><p><strong>PS: 字典的键的定义是不是和集合很像？所以他们都是用{}表示~</strong></p><p>out[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">2</span>: <span class="number">0</span>, <span class="number">12</span>: <span class="number">0</span>, <span class="number">7</span>: <span class="number">0</span>, <span class="number">11</span>: <span class="number">0</span>, <span class="number">14</span>: <span class="number">0</span>, <span class="number">6</span>: <span class="number">0</span>, <span class="number">16</span>: <span class="number">0</span>, <span class="number">18</span>: <span class="number">0</span>, <span class="number">19</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">0</span>, <span class="number">9</span>: <span class="number">0</span>, <span class="number">10</span>: <span class="number">0</span>, <span class="number">20</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">0</span>&#125;</div></pre></td></tr></table></figure><p>这个时候我们遍历原来的序列，为之前创建的data字典加1。<br>为什么呢？<br>因为遍历原来的序列，如果碰到相同的就加1，也就相当于计算了这个元素在原来序列中的个数了。</p><p>in[2]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> l1:</div><div class="line">    data[x] += <span class="number">1</span> </div><div class="line">print(data)</div></pre></td></tr></table></figure><p>out[2]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">12</span>: <span class="number">2</span>, <span class="number">7</span>: <span class="number">4</span>, <span class="number">11</span>: <span class="number">1</span>, <span class="number">14</span>: <span class="number">3</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">16</span>: <span class="number">4</span>, <span class="number">18</span>: <span class="number">1</span>, <span class="number">19</span>: <span class="number">2</span>, <span class="number">5</span>: <span class="number">3</span>, <span class="number">9</span>: <span class="number">4</span>, <span class="number">10</span>: <span class="number">1</span>, <span class="number">20</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure><p>但是如果要找频度最高的元素，就又要重新遍历得到的字典了，数据很大的时候，这样的效率并不高：</p><p>in[3]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> kv <span class="keyword">in</span> sorted(data.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="keyword">True</span>)[<span class="number">0</span>:<span class="number">3</span>]:</div><div class="line">    print(<span class="string">'频度排名前三的键值对：'</span>,kv)</div></pre></td></tr></table></figure><p>out[3]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">频度排名前三的键值对： (<span class="number">7</span>, <span class="number">4</span>)</div><div class="line">频度排名前三的键值对： (<span class="number">16</span>, <span class="number">4</span>)</div><div class="line">频度排名前三的键值对： (<span class="number">9</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure><p>这里介绍一下 <code>sort()</code> 函数：  </p><p>它的第一个参数是一个可迭代的序列，<code>reverse=True</code> 代表的是从高到低排序，默认是从低到高排。<br><code>key</code> 参数接受一个函数，有点像 <code>map</code> 和 <code>filter</code>，都需要给它一个函数，<code>key</code> 是给 <code>sorted</code> 一个排序的参考点，也就是告诉sorted，我们要按照哪个值排序。  </p><p><code>data.items()</code> 返回的是一个类似元组的结果，也就是我们的键值是这样返回来的：<code>(k, v)</code><br>我们要对它排序，是按照 <code>k</code> 的大小排呢？还是按照 <code>v</code> 的大小排呢？  </p><p>如果让 <code>kv = (k, v)</code>, 那么 <code>kv[0]</code> 就代表了 <code>k</code>, <code>kv[1]</code> 代表了 <code>v</code>。 </p><p><code>key=lambda x: x[1]</code> 就是代表我们按照 <code>kv[1]</code> 也就是值的大小进行排序。</p><p>相比前面这么多的代码量，倒是有更加简洁的代码，运行效率不高，却也不失为 <code>Pythonic</code>。</p><p>in[4]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">temp = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> l1&#125;</div><div class="line">d1 = &#123;k: l1.count(k) <span class="keyword">for</span> k <span class="keyword">in</span> temp&#125; <span class="comment"># 可以简洁地得出每个数据的频度</span></div><div class="line">print(d1); print()</div></pre></td></tr></table></figure><p>out[4]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">5</span>: <span class="number">3</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">4</span>, <span class="number">9</span>: <span class="number">4</span>, <span class="number">10</span>: <span class="number">1</span>, <span class="number">11</span>: <span class="number">1</span>, <span class="number">12</span>: <span class="number">2</span>, <span class="number">14</span>: <span class="number">3</span>, <span class="number">16</span>: <span class="number">4</span>, <span class="number">18</span>: <span class="number">1</span>, <span class="number">19</span>: <span class="number">2</span>, <span class="number">20</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure><p><strong>不要害怕，还有另一个方法：</strong></p><p>in[5]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"></div><div class="line"><span class="comment"># Python 内置模块 collections 包含了统计频度的 Counter 对象</span></div><div class="line">c = Counter(l1)</div><div class="line">print(c); print()</div><div class="line">print(type(c))  <span class="comment"># 它是一个Counter对象，但更加直观</span></div></pre></td></tr></table></figure><p>out[5]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Counter(&#123;<span class="number">7</span>: <span class="number">4</span>, <span class="number">16</span>: <span class="number">4</span>, <span class="number">9</span>: <span class="number">4</span>, <span class="number">14</span>: <span class="number">3</span>, <span class="number">5</span>: <span class="number">3</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">12</span>: <span class="number">2</span>, <span class="number">19</span>: <span class="number">2</span>, <span class="number">11</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">18</span>: <span class="number">1</span>, <span class="number">10</span>: <span class="number">1</span>, <span class="number">20</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">1</span>&#125;)</div><div class="line"></div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">collections</span>.<span class="title">Counter</span>'&gt;</span></div></pre></td></tr></table></figure><p><code>Counter</code> 对象的 <code>most_common()</code> 方法可以返回频度排名由高到低的列表，列表里面包含了键值对元组。<br>现在我们来得到频度排名前3的键值对：</p><p>in[6]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(c.most_common(<span class="number">3</span>)); print()<span class="comment"># 得到频度排名前5的键值对</span></div><div class="line">print(c.most_common(<span class="number">5</span>))</div></pre></td></tr></table></figure><p>out[6]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[(<span class="number">7</span>, <span class="number">4</span>), (<span class="number">16</span>, <span class="number">4</span>), (<span class="number">9</span>, <span class="number">4</span>)]</div><div class="line"></div><div class="line">[(<span class="number">7</span>, <span class="number">4</span>), (<span class="number">16</span>, <span class="number">4</span>), (<span class="number">9</span>, <span class="number">4</span>), (<span class="number">14</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">3</span>)]</div></pre></td></tr></table></figure><p>我们可以试着随便统计一下一堆字符串中单词的频度了：</p><p>in[7]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">poem = <span class="string">'''</span></div><div class="line"><span class="string">Down by the salley gardens my love and I did meet; </span></div><div class="line"><span class="string">She passed the salley gardens with little snow-white feet.</span></div><div class="line"><span class="string">She bid me take love easy, as the leaves grow on the tree;</span></div><div class="line"><span class="string">But I being young and foolish, with her would not agree.</span></div><div class="line"><span class="string">In a field by the river my love and I did stand,</span></div><div class="line"><span class="string">And on my leaning shoulder she laid her snow-white hand.</span></div><div class="line"><span class="string">She bid me take life easy, as the grass grows on the weirs;</span></div><div class="line"><span class="string">But I was young and foolish, and now i m full of tears.</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">poem_list = re.split(<span class="string">'\s+'</span>, poem) <span class="comment"># re.split() 方法按照空字符去拆分字符串</span></div><div class="line">print(Counter(poem_list))</div></pre></td></tr></table></figure><p>out[7]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Counter(&#123;<span class="string">'the'</span>: <span class="number">7</span>, <span class="string">'and'</span>: <span class="number">5</span>, <span class="string">'I'</span>: <span class="number">4</span>, <span class="string">'my'</span>: <span class="number">3</span>, <span class="string">'love'</span>: <span class="number">3</span>, <span class="string">'She'</span>: <span class="number">3</span>, <span class="string">'on'</span>: <span class="number">3</span>, <span class="string">''</span>: <span class="number">2</span>, <span class="string">'by'</span>: <span class="number">2</span>, <span class="string">'salley'</span>: <span class="number">2</span>, <span class="string">'gardens'</span>: <span class="number">2</span>, <span class="string">'did'</span>: <span class="number">2</span>, <span class="string">'with'</span>: <span class="number">2</span>, <span class="string">'snow-white'</span>: <span class="number">2</span>, <span class="string">'bid'</span>: <span class="number">2</span>, <span class="string">'me'</span>: <span class="number">2</span>, <span class="string">'take'</span>: <span class="number">2</span>, <span class="string">'easy,'</span>: <span class="number">2</span>, <span class="string">'as'</span>: <span class="number">2</span>, <span class="string">'But'</span>: <span class="number">2</span>, <span class="string">'young'</span>: <span class="number">2</span>, <span class="string">'foolish,'</span>: <span class="number">2</span>, <span class="string">'her'</span>: <span class="number">2</span>, <span class="string">'Down'</span>: <span class="number">1</span>,<span class="string">'meet;'</span>: <span class="number">1</span>, <span class="string">'passed'</span>: <span class="number">1</span>, <span class="string">'little'</span>: <span class="number">1</span>, <span class="string">'feet.'</span>: <span class="number">1</span>, <span class="string">'leaves'</span>: <span class="number">1</span>, <span class="string">'grow'</span>: <span class="number">1</span>, <span class="string">'tree;'</span>: <span class="number">1</span>, <span class="string">'being'</span>: <span class="number">1</span>, <span class="string">'would'</span>: <span class="number">1</span>, <span class="string">'not'</span>: <span class="number">1</span>, <span class="string">'agree.'</span>: <span class="number">1</span>,<span class="string">'In'</span>: <span class="number">1</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'field'</span>: <span class="number">1</span>, <span class="string">'river'</span>: <span class="number">1</span>, <span class="string">'stand,'</span>: <span class="number">1</span>, <span class="string">'And'</span>: <span class="number">1</span>, <span class="string">'leaning'</span>: <span class="number">1</span>, <span class="string">'shoulder'</span>: <span class="number">1</span>, <span class="string">'she'</span>: <span class="number">1</span>, <span class="string">'laid'</span>: <span class="number">1</span>, <span class="string">'hand.'</span>: <span class="number">1</span>, <span class="string">'life'</span>: <span class="number">1</span>, <span class="string">'grass'</span>: <span class="number">1</span>, <span class="string">'grows'</span>: <span class="number">1</span>, <span class="string">'weirs;'</span>: <span class="number">1</span>, <span class="string">'was'</span>: <span class="number">1</span>, <span class="string">'now'</span>: <span class="number">1</span>, <span class="string">'i'</span>: <span class="number">1</span>, <span class="string">'m'</span>: <span class="number">1</span>, <span class="string">'full'</span>: <span class="number">1</span>, <span class="string">'of'</span>: <span class="number">1</span>, <span class="string">'tears.'</span>: <span class="number">1</span>&#125;)</div></pre></td></tr></table></figure><h3 id="如何根据字典中值的大小，对数据项进行排序？"><a href="#如何根据字典中值的大小，对数据项进行排序？" class="headerlink" title="如何根据字典中值的大小，对数据项进行排序？"></a>如何根据字典中值的大小，对数据项进行排序？</h3><p>我们可以用sorted()函数先对一个列表进行排序:</p><p>in[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">l1 = [random.randint(<span class="number">0</span>,<span class="number">40</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>)]</div><div class="line">print(sorted(l1)) <span class="comment"># 从小到大输出</span></div><div class="line">print(sorted(l1, reverse=<span class="keyword">True</span>)) <span class="comment"># 从大到小输出</span></div></pre></td></tr></table></figure><p>out[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>]</div><div class="line">[<span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">33</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">28</span>, <span class="number">26</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure><p>现在我们创建一个学生成绩字典：</p><p>in[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d1 = &#123;name: random.randint(<span class="number">40</span>,<span class="number">100</span>) <span class="keyword">for</span> name <span class="keyword">in</span> <span class="string">'ABCDEFGHIJ'</span>&#125; <span class="comment"># 字典生成式</span></div><div class="line">print(d1)</div></pre></td></tr></table></figure><p>out[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'A'</span>: <span class="number">87</span>, <span class="string">'B'</span>: <span class="number">67</span>, <span class="string">'C'</span>: <span class="number">68</span>, <span class="string">'D'</span>: <span class="number">76</span>, <span class="string">'E'</span>: <span class="number">91</span>, <span class="string">'F'</span>: <span class="number">53</span>, <span class="string">'G'</span>: <span class="number">54</span>, <span class="string">'H'</span>: <span class="number">61</span>, <span class="string">'I'</span>: <span class="number">48</span>, <span class="string">'J'</span>: <span class="number">51</span>&#125;</div></pre></td></tr></table></figure><p>试试sorted()进行排序：</p><p>in[2]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(sorted(d1))</div></pre></td></tr></table></figure><p>out[2]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>]</div></pre></td></tr></table></figure><p>默认将键进行了排序，那该怎么让它根据值进行排序呢？</p><p>in[3]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(sorted(d1.items(), key=<span class="keyword">lambda</span> items:items[<span class="number">1</span>]))</div></pre></td></tr></table></figure><p>out[3]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(<span class="string">'I'</span>, <span class="number">48</span>), (<span class="string">'J'</span>, <span class="number">51</span>), (<span class="string">'F'</span>, <span class="number">53</span>), (<span class="string">'G'</span>, <span class="number">54</span>), (<span class="string">'H'</span>, <span class="number">61</span>), (<span class="string">'B'</span>, <span class="number">67</span>), (<span class="string">'C'</span>, <span class="number">68</span>), (<span class="string">'D'</span>, <span class="number">76</span>), (<span class="string">'A'</span>, <span class="number">87</span>), (<span class="string">'E'</span>, <span class="number">91</span>)]</div></pre></td></tr></table></figure><p>给 <code>reverse</code> 参数赋值，进行从大到小排序:</p><p>in[4]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(sorted(d1.items(), key=<span class="keyword">lambda</span> items:items[<span class="number">1</span>] ,reverse=<span class="keyword">True</span>))</div></pre></td></tr></table></figure><p>out[4]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(<span class="string">'E'</span>, <span class="number">91</span>), (<span class="string">'A'</span>, <span class="number">87</span>), (<span class="string">'D'</span>, <span class="number">76</span>), (<span class="string">'C'</span>, <span class="number">68</span>), (<span class="string">'B'</span>, <span class="number">67</span>), (<span class="string">'H'</span>, <span class="number">61</span>), (<span class="string">'G'</span>, <span class="number">54</span>), (<span class="string">'F'</span>, <span class="number">53</span>), (<span class="string">'J'</span>, <span class="number">51</span>), (<span class="string">'I'</span>, <span class="number">48</span>)]</div></pre></td></tr></table></figure><p>试试zip，思考为什么这样就可以排序了？</p><p>in[5]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(sorted(zip(d1.values(), d1.keys()), reverse=<span class="keyword">True</span>))</div></pre></td></tr></table></figure><p>out[5]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(<span class="number">91</span>, <span class="string">'E'</span>), (<span class="number">87</span>, <span class="string">'A'</span>), (<span class="number">76</span>, <span class="string">'D'</span>), (<span class="number">68</span>, <span class="string">'C'</span>), (<span class="number">67</span>, <span class="string">'B'</span>), (<span class="number">61</span>, <span class="string">'H'</span>), (<span class="number">54</span>, <span class="string">'G'</span>), (<span class="number">53</span>, <span class="string">'F'</span>), (<span class="number">51</span>, <span class="string">'J'</span>), (<span class="number">48</span>, <span class="string">'I'</span>)]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写给女朋友的小课堂 One🌟&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://home.junyouxiaowu.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>Battle Ship</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/BattleShip/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/BattleShip/</id>
    <published>2018-02-25T09:49:27.000Z</published>
    <updated>2018-02-28T08:14:25.449Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>少年，你，想不想成为一个 Captain 呢？</p></blockquote><a id="more"></a><p>标题误导向 hhh。  </p><p>前段时间学习了 <code>JavaScript</code> 这门语言，相比于 <code>Python</code>，它也是有很多优点的。结合之前看的 <code>Head First HTML &amp; CSS</code> 这本书，我写了一个普通的小游戏，仅为娱乐。</p><p><strong>游戏规则：</strong></p><p>有一个 <code>7 * 7</code> 的航海区域，敌方有三艘潜艇潜伏其中，每艘潜艇占据三格长度，它可能是竖着潜伏，也有可能是横着潜伏。我方有很多炮弹鱼雷，但希望在尽量少的发射次数下，击沉敌方三艘潜艇。</p><p><strong>击沉条件：</strong> </p><p>因为潜艇占据三格长度，所以需要将炮弹击打在潜艇的三个部位才能将其击沉，重复击打是无效的。</p><p><strong>温馨提醒：</strong></p><ul><li>请多多注意左上角的提示。</li><li>游戏有彩蛋，懂前端的一定能到找到。</li></ul><p>⚡️<a href="/assets/BattleShip/battleship.html">Battle Start</a>⚡️</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;少年，你，想不想成为一个 Captain 呢？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="娱乐" scheme="http://home.junyouxiaowu.top/categories/%E5%A8%B1%E4%B9%90/"/>
    
    
      <category term="Game" scheme="http://home.junyouxiaowu.top/tags/Game/"/>
    
      <category term="JavaScript" scheme="http://home.junyouxiaowu.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0021 Merge Two Sorted Lists</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0021-Merge-Two-Sorted-Lists/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0021-Merge-Two-Sorted-Lists/</id>
    <published>2018-02-25T09:44:47.000Z</published>
    <updated>2018-02-28T03:17:14.788Z</updated>
    
    <content type="html"><![CDATA[<p><strong>21. Merge Two Sorted Lists</strong></p><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><a id="more"></a><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</div><div class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</div></pre></td></tr></table></figure><p><strong>Analysis:</strong></p><p>看到这道题有似曾相识的感觉，其实就是当初上数据结构，老师讲了半天的链表合并题，印象很深刻，所以还原了一下他说的算法，代码虽然很丑很长，但是时间效率还是挺高的 <code>O(m+n)</code>。<br>当然，这道题用递归来解决会更加的简便，因为给我们的两个链表是已经排序好的，如果当前l1的节点的值比l2的节点的值大，就将两个节点交换，要注意的是，这样的交换会将节点指向的后续节点也一起交换了，然后递归判断后续节点直到遍历结束，返回结果。</p><p><strong>Answer: 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode:</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type l1: ListNode</span></div><div class="line"><span class="string">        :type l2: ListNode</span></div><div class="line"><span class="string">        :rtype: ListNode</span></div><div class="line"><span class="string">        """</span></div><div class="line">        output = ListNode(<span class="number">0</span>)</div><div class="line">        temp = output</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</div><div class="line">            <span class="keyword">if</span> l1.val &gt; l2.val:</div><div class="line">                temp.next = ListNode(<span class="number">0</span>)</div><div class="line">                temp.next.val, l2 = l2.val, l2.next</div><div class="line">                temp = temp.next</div><div class="line">            <span class="keyword">elif</span> l1.val &lt; l2.val:</div><div class="line">                temp.next = ListNode(<span class="number">0</span>)</div><div class="line">                temp.next.val, l1 = l1.val, l1.next</div><div class="line">                temp = temp.next</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                temp.next = ListNode(<span class="number">0</span>)</div><div class="line">                temp.next.next = ListNode(<span class="number">0</span>)</div><div class="line">                temp.next.val, temp.next.next.val= l1.val, l1.val</div><div class="line">                temp, l1, l2 = temp.next.next, l1.next, l2.next</div><div class="line">                </div><div class="line">        <span class="keyword">if</span> l1:</div><div class="line">            temp.next = ListNode(<span class="number">0</span>)</div><div class="line">            temp.next.next = ListNode(<span class="number">0</span>)</div><div class="line">            temp.next.val = l1.val</div><div class="line">            temp.next.next = l1.next</div><div class="line">            </div><div class="line">        <span class="keyword">elif</span> l2:</div><div class="line">            temp.next = ListNode(<span class="number">0</span>)</div><div class="line">            temp.next.next = ListNode(<span class="number">0</span>)</div><div class="line">            temp.next.val = l2.val</div><div class="line">            temp.next.next = l2.next</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> output.next</div></pre></td></tr></table></figure><p><strong>Answer 2:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode:</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type l1: ListNode</span></div><div class="line"><span class="string">        :type l2: ListNode</span></div><div class="line"><span class="string">        :rtype: ListNode</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> l1 <span class="keyword">and</span> l2:</div><div class="line">            <span class="keyword">if</span> l1.val &gt; l2.val:</div><div class="line">                l1, l2 = l2, l1</div><div class="line">            l1.next = self.mergeTwoLists(l1.next, l2)</div><div class="line">        <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;21. Merge Two Sorted Lists&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0020 Valid Parentheses</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0020-Valid-Parentheses/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0020-Valid-Parentheses/</id>
    <published>2018-02-25T09:44:46.000Z</published>
    <updated>2018-02-25T12:43:05.586Z</updated>
    
    <content type="html"><![CDATA[<p><strong>20. Valid Parentheses</strong></p><p>Given a string containing just the characters <code>&#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;</code>, determine if the input string is valid.</p><a id="more"></a><p>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not.</p><p><strong>Analysis:</strong></p><p>在这里，我们可以把列表当成栈来使用，然后遍历字符串且不断 <code>push</code> 数据到栈中，在插入数据后要判断当前栈顶两个元素能否构成合法的括号表达式，如果可以，就把这两个元素都 <code>pop</code> 出栈，当循环结束后，如果整个字符串是合法的，栈必为空，否则是非法的。<br><code>Answer 1</code> 我是将数据插入列表后再判断是否合法，合法会 <code>pop</code> 两次数据，有点浪费时间和空间，所以 <code>Answer 2</code> 改成插入前就判断数据是否合法，合法就不插入数据，直接 <code>pop</code> 一次数据。<br>当然也看到高人的答案，具体请看 <code>Answer 3</code>。</p><p><strong>Answer 1:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type s: str</span></div><div class="line"><span class="string">        :rtype: bool</span></div><div class="line"><span class="string">        """</span></div><div class="line">        stack = []</div><div class="line">        d = [<span class="string">'()'</span>, <span class="string">'&#123;&#125;'</span>, <span class="string">'[]'</span>]</div><div class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</div><div class="line">            stack.append(char)</div><div class="line">            <span class="keyword">if</span> len(stack) &gt;= <span class="number">2</span> <span class="keyword">and</span> (stack[<span class="number">-2</span>] + stack[<span class="number">-1</span>]) <span class="keyword">in</span> d:</div><div class="line">                stack.pop()</div><div class="line">                stack.pop()</div><div class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</div></pre></td></tr></table></figure><p><strong>Answer 2:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type s: str</span></div><div class="line"><span class="string">        :rtype: bool</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> len(s) % <span class="number">2</span> != <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        d = &#123;<span class="string">')'</span>:<span class="string">'('</span>, <span class="string">'&#125;'</span>:<span class="string">'&#123;'</span>, <span class="string">']'</span>:<span class="string">'['</span>&#125;</div><div class="line">        stack = []</div><div class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> stack <span class="keyword">and</span> (char <span class="keyword">in</span> d <span class="keyword">and</span> stack[<span class="number">-1</span>] == d[char]):</div><div class="line">                stack.pop()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                stack.append(char)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</div></pre></td></tr></table></figure><p><strong>Answer 3:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type s: str</span></div><div class="line"><span class="string">        :rtype: bool</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">while</span> <span class="string">"()"</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">"&#123;&#125;"</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">"[]"</span> <span class="keyword">in</span> s:</div><div class="line">            s = s.replace(<span class="string">"()"</span>,<span class="string">""</span>).replace(<span class="string">"&#123;&#125;"</span>,<span class="string">""</span>).replace(<span class="string">"[]"</span>,<span class="string">""</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">not</span> s</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;20. Valid Parentheses&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;, &amp;#39;)&amp;#39;, &amp;#39;{&amp;#39;, &amp;#39;}&amp;#39;, &amp;#39;[&amp;#39; and &amp;#39;]&amp;#39;&lt;/code&gt;, determine if the input string is valid.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0019 Remove Nth Node From End of List</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0019-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0019-Remove-Nth-Node-From-End-of-List/</id>
    <published>2018-02-25T09:44:45.000Z</published>
    <updated>2018-02-25T12:42:57.578Z</updated>
    
    <content type="html"><![CDATA[<p><strong>19. Remove Nth Node From End of List</strong></p><p>Given a linked list, remove the nth node from the end of list and return its head.</p><a id="more"></a><p><strong>For example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</div><div class="line"></div><div class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</div></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Given n will always be valid.<br>Try to do this in one pass.</p><p><strong>Analysis:</strong></p><p>思路很简单，直接遍历整个链表得到长度 <code>length</code>，令 <code>flag = length - n</code>，这就是我们需要到达删除的位置的循环次数，如果为0，说明要删除的是头节点，直接返回 <code>head.next</code>即可，不为0时，要循环链表到低要删除的位置的前一个位置，改变指针指向节点即可。</p><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode:</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type head: ListNode</span></div><div class="line"><span class="string">        :type n: int</span></div><div class="line"><span class="string">        :rtype: ListNode</span></div><div class="line"><span class="string">        """</span></div><div class="line">        p, q, length = head, head, <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> p:</div><div class="line">            p = p.next</div><div class="line">            length += <span class="number">1</span></div><div class="line">        flag = length - n</div><div class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> head.next</div><div class="line">        <span class="keyword">while</span> flag &gt; <span class="number">1</span> :</div><div class="line">            q = q.next</div><div class="line">            flag -= <span class="number">1</span></div><div class="line">        q.next = q.next.next</div><div class="line">        <span class="keyword">return</span> head</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;19. Remove Nth Node From End of List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a linked list, remove the nth node from the end of list and return its head.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0018 4Sum</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0018-4Sum/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0018-4Sum/</id>
    <published>2018-02-25T09:44:44.000Z</published>
    <updated>2018-02-25T12:42:49.157Z</updated>
    
    <content type="html"><![CDATA[<p><strong>18. 4Sum</strong></p><p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p><a id="more"></a><p><strong>Note:</strong></p><p>The solution set must not contain duplicate quadruplets.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1,  0, 0, 1],</div><div class="line">  [-2, -1, 1, 2],</div><div class="line">  [-2,  0, 0, 2]</div><div class="line">]</div></pre></td></tr></table></figure><p><strong>Analysis:</strong></p><p>本题思路与15题 <code>3Sum</code> 相同，因为多了一个数求和，所以需要多枚举一个数，也就多了一个循环，其余解法同15题，排序后只需要不断移动首尾两个指针，碰到重复的数跳过循环即可。</p><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fourSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type nums: List[int]</span></div><div class="line"><span class="string">        :type target: int</span></div><div class="line"><span class="string">        :rtype: List[List[int]]</span></div><div class="line"><span class="string">        """</span></div><div class="line">        nums.sort()</div><div class="line">        output, length = [], len(nums)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</div><div class="line">            <span class="keyword">if</span> i <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, length):</div><div class="line">                <span class="keyword">if</span> j != i + <span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                sum = target - nums[i] - nums[j]</div><div class="line">                start, end = j + <span class="number">1</span>, length - <span class="number">1</span></div><div class="line">                <span class="keyword">while</span> start &lt; end:</div><div class="line">                    <span class="keyword">if</span> nums[start] + nums[end] &gt; sum:</div><div class="line">                        end -= <span class="number">1</span></div><div class="line">                    <span class="keyword">elif</span> nums[start] + nums[end] &lt; sum:</div><div class="line">                        start += <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        output.append([nums[i], nums[j], nums[start], nums[end]])</div><div class="line">                        start, end = start + <span class="number">1</span>, end - <span class="number">1</span></div><div class="line">                        <span class="keyword">while</span> start &lt; end <span class="keyword">and</span> nums[start] == nums[start - <span class="number">1</span>]:</div><div class="line">                            start += <span class="number">1</span></div><div class="line">                        <span class="keyword">while</span> start &lt; end <span class="keyword">and</span> nums[end] == nums[end + <span class="number">1</span>]:</div><div class="line">                            end -= <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> output</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;18. 4Sum&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0017 Letter Combinations of a Phone Number</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0017-Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0017-Letter-Combinations-of-a-Phone-Number/</id>
    <published>2018-02-25T09:44:43.000Z</published>
    <updated>2018-02-25T12:42:40.984Z</updated>
    
    <content type="html"><![CDATA[<p><strong>17. Letter Combinations of a Phone Number</strong></p><p>Given a digit string, return all possible letter combinations that the number could represent.</p><a id="more"></a><p>A mapping of digit to letters (just like on the telephone buttons) is given below.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="telephone buttons"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input:Digit string &quot;23&quot;</div><div class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</div></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p><p><strong>Analysis:</strong></p><p>考察的就是映射和排列组合，通过三层循环再不断更新组合列表即可。<br>需要注意的有效数字只有 <code>2~9</code>，构造这个范围内的数字映射即可。</p><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type digits: str</span></div><div class="line"><span class="string">        :rtype: List[str]</span></div><div class="line"><span class="string">        """</span></div><div class="line">        map = &#123;<span class="string">'2'</span>: <span class="string">'abc'</span>, <span class="string">'3'</span>: <span class="string">'def'</span>, <span class="string">'4'</span>: <span class="string">'ghi'</span>, <span class="string">'5'</span>: <span class="string">'jkl'</span>, </div><div class="line">               <span class="string">'6'</span>: <span class="string">'mno'</span>, <span class="string">'7'</span>: <span class="string">'pqrs'</span>, <span class="string">'8'</span>: <span class="string">'tuv'</span>, <span class="string">'9'</span>: <span class="string">'wxyz'</span>&#125; </div><div class="line">        combinations = [<span class="string">''</span>] <span class="keyword">if</span> digits <span class="keyword">else</span> []</div><div class="line">        <span class="keyword">for</span> digit <span class="keyword">in</span> digits:</div><div class="line">            new_combinations = []</div><div class="line">            <span class="keyword">for</span> letter <span class="keyword">in</span> map[digit]:</div><div class="line">                <span class="keyword">for</span> combination <span class="keyword">in</span> combinations:</div><div class="line">                    new_combinations.append(combination + letter)</div><div class="line">            combinations = new_combinations</div><div class="line">        <span class="keyword">return</span> combinations</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;17. Letter Combinations of a Phone Number&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a digit string, return all possible letter combinations that the number could represent.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
</feed>
