<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>青柚</title>
  
  <subtitle>琴瑟在御 莫不静好</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://home.junyouxiaowu.top/"/>
  <updated>2018-03-04T07:02:22.006Z</updated>
  <id>http://home.junyouxiaowu.top/</id>
  
  <author>
    <name>Sliver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python代码风格指南（自译）</title>
    <link href="http://home.junyouxiaowu.top/2018/03/03/Python%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <id>http://home.junyouxiaowu.top/2018/03/03/Python代码风格指南/</id>
    <published>2018-03-03T14:39:27.000Z</published>
    <updated>2018-03-04T07:02:22.006Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“人生苦短，我用 Python。”</p></blockquote><a id="more"></a><blockquote><p>英语渣，但就是很想翻译它。</p></blockquote><p>当你询问一个程序员为什么最爱 Python 语言的时候，他们常说它可读性很高。确实，高度的可读性是设计 Python 这门语言的核心。</p><p>一个使 Python 代码易读且易理解的原因是 Python 语言相对完善的编码指南和 Pythonic 风格。</p><p>并且，当一个经验丰富的 Python 开发者指着一段代码说：“这段代码并不 Pythonic” 的时候，这常常意味着这些代码没有遵循一个普遍的代码准则，没有通过最好的方式表达出它的意图。</p><p>虽然在一些极端情况下，关于如何用 Python 代码表达意图的最好方式没有达成共识，但这样的情况是比较少的。</p><h2 id="一般概念"><a href="#一般概念" class="headerlink" title="一般概念"></a>一般概念</h2><h3 id="明确的代码"><a href="#明确的代码" class="headerlink" title="明确的代码"></a>明确的代码</h3><p>虽然任何类型的魔法方法都可以通过 Python 来实现，但是最明确和最直接的方式往往是最好的。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_complex</span><span class="params">(*args)</span>:</span></div><div class="line">    x, y = args</div><div class="line">    <span class="keyword">return</span> dict(**locals())</div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_complex</span><span class="params">(x, y)</span>:</span></div><div class="line">    <span class="keyword">return</span> &#123;<span class="string">'x'</span>: x, <span class="string">'y'</span>: y&#125;</div></pre></td></tr></table></figure><p>在上面优秀的代码中，函数明确地显式调用 x 和 y, 明确的返回相关字典。开发者通过读第一行和最后一行就可以知道函数的用法。</p><h3 id="一行一句"><a href="#一行一句" class="headerlink" title="一行一句"></a>一行一句</h3><p>尽管在一些复杂语句中，例如 <code>列表生成式</code> 是被允许的，并且这些语句可以展现简洁的表达能力。但将不相关的语句放在同一行是很差的代码风格。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'one'</span>; <span class="keyword">print</span> <span class="string">'two'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> x == <span class="number">1</span>: <span class="keyword">print</span> <span class="string">'one'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> &lt;complex comparison&gt; <span class="keyword">and</span> &lt;other complex comparison&gt;:</div><div class="line">    <span class="comment"># do something</span></div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'one'</span></div><div class="line"><span class="keyword">print</span> <span class="string">'two'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> x == <span class="number">1</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'one'</span></div><div class="line">    </div><div class="line">cond1 = &lt;complex comparison&gt;</div><div class="line">cond2 = &lt;other complex comparison&gt;</div><div class="line"><span class="keyword">if</span> cond1 <span class="keyword">and</span> cond2:</div><div class="line">    <span class="comment"># do something</span></div></pre></td></tr></table></figure><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><p>函数的参数可以有四种不同的方式：</p><h4 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="1.位置参数"></a>1.位置参数</h4><p>位置参数是强制性的，并且它们没有默认值。它们是最简单的参数形式，可以用少量的函数参数，用来表达函数意义的全部部分，而它们的位置顺序是自然的，是被严格要求的。例如，在 <code>send(message, recipient)</code> 或者 <code>point(x, y)</code> 这些函数中，函数的使用者并不会对函数的使用觉得很困难，这些函数仅仅需要两个参数，并按照顺序传入即可。  </p><p>在这两种情况下，可以在调用函数时使用参数的名称赋值，这样做可以切换参数的顺序，例如调用实例 <code>send(recipient=&#39;World&#39;, message=&#39;Hello&#39;)</code> 和 <code>point(y=2, x=1)</code>，但与直接的调用 <code>send(&#39;Hello&#39;, &#39;World&#39;)</code> 和 <code>point(1, 2)</code> 相比，这会降低可读性并且将会不必要地冗长。</p><h4 id="2-关键字参数"><a href="#2-关键字参数" class="headerlink" title="2. 关键字参数"></a>2. 关键字参数</h4><p>关键字参数不是强制性的，并且它们具有默认值。它们通常是用于发送给函数的可选参数。当一个函数有多于两个或者三个位置参数的时候，函数参数样式就很难记忆了。这个时候，使用具有默认值的关键字参数是很有帮助的。例如，一个完整的 <code>send</code> 函数可以定义成 <code>send(message, to, cc=None, bcc=None)</code>，这里的 <code>cc</code> 和 <code>bcc</code> 参数是可选的，当没有传值时默认为 <code>None</code>。</p><p>使用关键字参数调用一个函数可以通过 Python 以多种方式完成。例如，可以在定义中遵循参数的顺序，而不必明确命名参数，比如 <code>send(&#39;Hello&#39;, &#39;World&#39;, &#39;Cthulhu&#39;, &#39;God&#39;)</code> 是将密件发送给上帝。我们也可以使用命名参数而无需遵循参数顺序来调用函数，比如 <code>send(&#39;Hello again&#39;, &#39;World&#39;, bcc=&#39;God&#39;, cc=&#39;Cthulhu&#39;)</code>。如果没有任何强有力的理由不去遵循最接近函数定义的语法： <code>send(&#39;Hello&#39;, &#39;World&#39;, cc=&#39;Cthulhu&#39;, bcc=&#39;God&#39;)</code>，那么这两种方式都应该是要极力避免的。</p><p>作为一个方面的说明，请遵循 <a href="http://en.wikipedia.org/wiki/You_ain&#39;t_gonna_need_it" target="_blank" rel="external">YAGNI</a> 原则。通常，移除一个用作“以防万一”但却看起来从未使用的可选参数（以及它在函数中的逻辑），比添加一个所需的新的可选参数和它的逻辑要来的困难。</p><h4 id="3-任意参数列表"><a href="#3-任意参数列表" class="headerlink" title="3. 任意参数列表"></a>3. 任意参数列表</h4><p>任意参数列表是函数传值的第三种方式，如果一个函数意图通过定义可扩展数目的位置参数实现更好的表达，那么可以定义 <code>*args</code> 的结构。在函数体中，<code>args</code> 是包含所有剩余参数的元组。例如，我们可以用任意长度的位置参数作为参数去调用 <code>send(message, *args)</code> 这个函数，比如 <code>send(&#39;Hello&#39;, &#39;God&#39;, &#39;Mom&#39;, &#39;Cthulhu&#39;)</code>。在此函数体中，<code>args</code> 相当于 <code>(&#39;God&#39;,&#39;Mom&#39;, &#39;Cthulhu&#39;)</code>。</p><p>尽管如此，这种结构有一些缺点，应谨慎使用。如果一个函数接收到相同性质的参数列表，通常将其定义为一个参数，这样函数为更为清晰，而这个参数可以是一个列表或其他任何序列。在这里，如果 <code>send</code> 参数有多个接受者，将之定义成 <code>send(message, recipients)</code> 会更明确。调用它时就使用 <code>send(&#39;Hello&#39;, [&#39;God&#39;, &#39;Mom&#39;, &#39;Cthulhu&#39;])</code>。这样的话，函数的使用者可以事先将接收者们维护成列表形式，这为传递各种不能被转变成其他序列的序列（包括迭代器）带来了可能。</p><h4 id="4-任意关键字参数字典"><a href="#4-任意关键字参数字典" class="headerlink" title="4. 任意关键字参数字典"></a>4. 任意关键字参数字典</h4><p>关键字参数字典是最后一种函数传参的方式，如果函数要求一系列待定的命名参数，我们可以使用 <code>**kwargs</code> 的结构。在函数体中，<code>kwargs</code> 是一个 字典，它包含所有传递给函数但没有被其他关键字参数捕捉的命名参数。</p><p>和<strong>任意参数列表</strong>中所需注意的一样，这些强大的技术是要用在被证明确实需要用到它们的时候，它们不应该被用在能用更简单和更明确的结构就可以充分表达意图的函数中。</p><p>编写函数的时候采用何种参数形式，是用位置参数，还是可选关键字参数，是否使用形如任意参数列表等的高级技术，这些都由程序员自己决定的。如果能明智地遵循上面的建议，就可能且非常愉悦地写出这样的 Python 函数：</p><ul><li>易读（名字和参数不需要解释）</li><li>易改（添加新的关键字参数不会破坏代码的其他部分）</li></ul><h3 id="避免魔法方法"><a href="#避免魔法方法" class="headerlink" title="避免魔法方法"></a>避免魔法方法</h3><p>Python 对黑客来说是一个强有力的工具，它拥有非常丰富的 <code>hooks</code> 和 <code>tools</code>，允许使用者施展几乎任何形式的技巧。比如，它可以做到：</p><ul><li>改变对象的创建和初始化的方式</li><li>改变 Python 解释器引入模块的方式</li><li>在 Python 中嵌入 C 程序代码</li></ul><p>然而，这些操作都有着许多缺陷，更好的方式是使用最直接的方式达到目的。这些操作最主要的缺陷在于当使用这些方式时，程序可读性将发生很大改变。许多代码分析工具，例如: <code>pylint</code> 或者 <code>pyflakes</code> 是无法解析这些 <code>&quot;magic&quot; code</code> 的。</p><p>Python 开发者应该知道这些近乎无限的可能性，因为它让我们拥有了 <code>没有不可能完成的任务</code> 的自信。但是知道如何，尤其是何时不能使用它们是非常重要的。</p><p>一个 <code>Pythonista</code> 就像一位功夫大师，他知道如何用一个手指杀死对方，但他从不会那么去做。</p><h3 id="我们都是负责任的用户"><a href="#我们都是负责任的用户" class="headerlink" title="我们都是负责任的用户"></a>我们都是负责任的用户</h3><p>通过上面知道 Python 有许多的技巧，但其中一些是有潜在危险的。一个好的范例是：任何用户都能够重写对象的属性和方法（Python中没有 “private” 关键字）。这种哲学不同于其他高级语言，如 <code>Java</code>。因为 <code>Java</code> 中有许多防止滥用的机制。而这种哲学其实是在表达： <code>We are all responsible users</code>。</p><p>这并不意味着，比如说，Python 中没有属性是私有的，也不意味着没有合适的封装方法。与其依赖在开发者和代码之间树立起的一道道隔墙，Python 社区更愿意依靠一些约定，来表明这些元素不应该被直接访问，而应该是私有的。</p><p>私有属性实现细节的主要约定是对所有的 <code>内部变量</code> 前添加一个下划线。如果用户破坏约定去访问前缀带有下划线的变量，当被修改后的代码产生问题时，都是客户端代码的责任。</p><p>使用这些约定是被广泛鼓励的：任何不想被客户端代码使用的属性或者方法都应该加上一个前缀下划线。这样可以更好的将代码进行职责划分，也方便对已有的代码进行修改；私有属性公有化总是有可能的，而公有属性私有化可能会是很难的操作。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>当一个函数变得复杂时，在函数体中使用有多个返回值的语句并不少见。然而，为了保证明确的意图和可读性，应在函数体中避免使用返回多个值的语句。</p><p>在函数中主要有两种返回情况：当函数正常运行时，返回结果；当一个错误的情况产生，返回输入错误的参数，或者其他导致函数不能正常运行的原因。</p><p>如果在第二种情况不想抛出异常，应该返回一个值（比如 <code>None</code> 或者 <code>False</code>），指明函数没有正常执行。在这种情况下，最好尽早返回检测到的错误信息。这将有利于后续改善函数的结构。</p><p>在正常情况下，当一个函数中有多个返回出口点时，会变得很难去调试和返回结果。所以最好保持单个出口点，这会有助于提取某些代码路径，并且，多个出口点往往意味着代码需要重构了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex_function</span><span class="params">(a, b, c)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span>  <span class="comment"># Raising an exception might be better</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> b:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">None</span>  <span class="comment"># Raising an exception might be better</span></div><div class="line">    <span class="comment"># Some complex code trying to compute x from a, b and c</span></div><div class="line">    <span class="comment"># Resist temptation to return x if succeeded</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> x:</div><div class="line">        <span class="comment"># Some Plan-B computation of x</span></div><div class="line">    <span class="keyword">return</span> x  <span class="comment"># One single exit point for the returned value x will help</span></div><div class="line">              <span class="comment"># when maintaining the code.</span></div></pre></td></tr></table></figure><h2 id="惯用方法"><a href="#惯用方法" class="headerlink" title="惯用方法"></a>惯用方法</h2><p>编程惯用方法是一种代码编写的方式，Python 的惯用方法通常被称为 <code>Pythonic</code>。</p><p>尽管通常有一种（而且最好只有一种）明显的方式去将代码写得 <code>Pythonic</code>；但对 Python 初学者来说，写出惯用法式的 Python 代码的方式是不太明显的。所以，好的惯用法必须有意识地获取。</p><p>下面是一些 Python 惯用法：</p><h3 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h3><p>如果你知道一个列表或者元组的长度，你可以将其解包并为它的元素取名。比如，<code>enumerate()</code> 会对列表中的每个项提供包含索引和列表数据两个元素的元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> enumerate(some_list):</div><div class="line">    <span class="comment"># 使用index和item做一些工作</span></div></pre></td></tr></table></figure><p>也可以通过这种方式交换两个变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a, b = b, a</div></pre></td></tr></table></figure><p>嵌套解包任务：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a, (b, c) = <span class="number">1</span>, (<span class="number">2</span>, <span class="number">3</span>)</div></pre></td></tr></table></figure><p>在 Python3 中，扩展解包的新方法在 <a href="https://www.python.org/dev/peps/pep-3132" target="_blank" rel="external">PEP 3132</a> 有介绍:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a, *rest = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="comment"># a = 1, rest = [2, 3]</span></div><div class="line">a, *middle, c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="comment"># a = 1, middle = [2, 3], c = 4</span></div></pre></td></tr></table></figure><h3 id="创建一个可忽略的变量"><a href="#创建一个可忽略的变量" class="headerlink" title="创建一个可忽略的变量"></a>创建一个可忽略的变量</h3><p>如果需要赋值但不需要变量（比如，使用解包方法），可以使用 <code>__</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">filename = <span class="string">'foobar.txt'</span></div><div class="line">basename, __, ext = filename.rpartition(<span class="string">'.'</span>)</div></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">许多 Python 风格指南建议使用单下划线而不是双下划线。</div><div class="line">然而，单下划线普遍在 gettext() 函数中用作别名，也常被用在交互式命令行中保存最后一次操作的值。</div><div class="line">所以，使用双下划线更清晰方便，并能够消除一些使用情况的干扰。</div></pre></td></tr></table></figure><h3 id="创建一个长度为-N-且所有元素相同的列表"><a href="#创建一个长度为-N-且所有元素相同的列表" class="headerlink" title="创建一个长度为 N 且所有元素相同的列表"></a>创建一个长度为 N 且所有元素相同的列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">four_nones = [<span class="keyword">None</span>] * <span class="number">4</span></div></pre></td></tr></table></figure><h3 id="创建一个长度为-N-的列表"><a href="#创建一个长度为-N-的列表" class="headerlink" title="创建一个长度为 N 的列表"></a>创建一个长度为 N 的列表</h3><p>因为列表是可变的，<code>*</code> 操作对于同样的列表会创建创建 N 个原列表的引用，这可能不是你想要的结果。正确的写法应该是使用列表生成式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">four_lists = [[] <span class="keyword">for</span> __ <span class="keyword">in</span> xrange(<span class="number">4</span>)]</div></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在 Python3 中应该使用 range() 而不是 xrange()。</div></pre></td></tr></table></figure><h3 id="根据列表来创建字符串"><a href="#根据列表来创建字符串" class="headerlink" title="根据列表来创建字符串"></a>根据列表来创建字符串</h3><p>根据列表来创建字符串的一个常见用法是在空的字符串上使用 <code>str.join(list)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">letters = [<span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>]</div><div class="line">word = <span class="string">''</span>.join(letters)</div></pre></td></tr></table></figure><p>这会将 <code>word</code> 变量赋值为 <code>spam</code>。这个惯用法可以用在列表和元组中。</p><h3 id="在序列中查找一个元素"><a href="#在序列中查找一个元素" class="headerlink" title="在序列中查找一个元素"></a>在序列中查找一个元素</h3><p>有时我们需要在序列中查找元素。让我们来看看这两个选择：列表和集合。</p><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">s = set([<span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>])</div><div class="line">l = [<span class="string">'s'</span>, <span class="string">'p'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookup_set</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'s'</span> <span class="keyword">in</span> s</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lookup_list</span><span class="params">(l)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'s'</span> <span class="keyword">in</span> l</div></pre></td></tr></table></figure><p>即使这两个函数看起来完全一样，但因为 <code>lookup_set(s)</code> 是利用了 Python 中的集合类型是 <code>可哈希</code> 的特性，两者的查询性能是完全不同的。为了判断一个项是否在列表中，Python 将会查看每个元素直到它找到匹配的项。这是非常耗时的，尤其是对长列表来说。另一方面，在集合中，项的哈希值将会告诉 Python 应在集合的哪里去查找匹配的元素。结果是，即使集合很大，但因为哈希表的原理，查询的速度也会很快。在字典中，查询也是同样的原理。</p><p>因为这些性能上的差异，在下列场合中使用集合或者字典而不是列表，通常会是个好主意：</p><ul><li>序列中包含大量的元素</li><li>需要在序列中重复地查找元素</li><li>序列中没有重复的项</li></ul><p>对于小的序列，或者你不会频繁查找的序列，建立哈希所消耗的额外时间和内存开销经常会大过改进搜索速度所节省的时间和内存开销。</p><h2 id="Python之禅"><a href="#Python之禅" class="headerlink" title="Python之禅"></a>Python之禅</h2><p>也被称为 <a href="">PEP 20</a>，它是 Python 设计的指导准则。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> this</div><div class="line">The Zen of Python, by Tim Peters</div><div class="line"></div><div class="line">Beautiful <span class="keyword">is</span> better than ugly.</div><div class="line">Explicit <span class="keyword">is</span> better than implicit.</div><div class="line">Simple <span class="keyword">is</span> better than complex.</div><div class="line">Complex <span class="keyword">is</span> better than complicated.</div><div class="line">Flat <span class="keyword">is</span> better than nested.</div><div class="line">Sparse <span class="keyword">is</span> better than dense.</div><div class="line">Readability counts.</div><div class="line">Special cases aren<span class="string">'t special enough to break the rules.</span></div><div class="line"><span class="string">Although practicality beats purity.</span></div><div class="line"><span class="string">Errors should never pass silently.</span></div><div class="line"><span class="string">Unless explicitly silenced.</span></div><div class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.</span></div><div class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.</span></div><div class="line"><span class="string">Although that way may not be obvious at first unless you'</span>re Dutch.</div><div class="line">Now <span class="keyword">is</span> better than never.</div><div class="line">Although never <span class="keyword">is</span> often better than *right* now.</div><div class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">'s a bad idea.</span></div><div class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.</span></div><div class="line"><span class="string">Namespaces are one honking great idea -- let'</span>s do more of those!</div><div class="line"></div><div class="line">Python之禅 by Tim Peters</div><div class="line"></div><div class="line">优美胜于丑陋（Python以编写优美的代码为目标）</div><div class="line">明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</div><div class="line">简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</div><div class="line">复杂胜于凌乱（如果复杂不可避免，那代码间也不能有难懂的关系，要保持接口简洁）</div><div class="line">扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</div><div class="line">间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</div><div class="line">可读性很重要（优美的代码是可读的）</div><div class="line">即便假借特例的实用性之名，也不可违背这些规则（这些规则至高无上）</div><div class="line">不要包容所有错误，除非您确定需要这样做（精准地捕获异常，不写 <span class="keyword">except</span>:<span class="keyword">pass</span> 风格的代码）</div><div class="line">当存在多种可能，不要尝试去猜测</div><div class="line">而是尽量找一种，最好是唯一一种明显的解决方案（如果不确定，就用穷举法）</div><div class="line">虽然这并不容易，因为您不是 Python 之父（这里的 Dutch 是指 Guido ）</div><div class="line">做也许好过不做，但不假思索就动手还不如不做（动手之前要细思量）</div><div class="line">如果您无法向人描述您的方案，那肯定不是一个好方案；反之亦然（方案测评标准）</div><div class="line">命名空间是一种绝妙的理念，我们应当多加利用（倡导与号召）</div></pre></td></tr></table></figure><p>如果想要了解一些具有 Python 风格的例子，可以访问 <a href="http://artifex.org/~hblanks/talks/2011/pep20_by_example.pdf" target="_blank" rel="external">these slides from a Python user group</a>。</p><h2 id="PEP8"><a href="#PEP8" class="headerlink" title="PEP8"></a>PEP8</h2><p><code>PEP 8</code> 是 Python 事实上的代码风格指南，我们可以在 <a href="http://pep8.org/" target="_blank" rel="external">pep8.org</a> 上获得高质量的 <code>PEP 8</code> 版本详细介绍。</p><p>强烈推荐阅读这部分。整个 Python 社区都尽力遵循本文档中规定的准则。一些项目可能受其影响，而其他项目可以参考修改建议。</p><p>也就是说，让你的 Python 代码遵循 <code>PEP 8</code> 通常是个好主意，这也有助于在与其他开发人员一起工作时使代码更加具有可持续性和维护性。命令行程序 <a href="https://github.com/PyCQA/pycodestyle" target="_blank" rel="external">pycodestyle</a>（以前叫做 <code>pep8</code>），可以检查代码一致性。可在终端上运行以下命令来安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> pip install pycodestyle</span></div></pre></td></tr></table></figure><p>然后在文件或者很多文件中运行，如果检测到问题，会得到违反 <code>PEP8</code> 准则的报告</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ pycodestyle optparse.py</div><div class="line">optparse.py:<span class="number">69</span>:<span class="number">11</span>: E401 multiple imports on one line</div><div class="line">optparse.py:<span class="number">77</span>:<span class="number">1</span>: E302 expected <span class="number">2</span> blank lines, found <span class="number">1</span></div><div class="line">optparse.py:<span class="number">88</span>:<span class="number">5</span>: E301 expected <span class="number">1</span> blank line, found <span class="number">0</span></div><div class="line">optparse.py:<span class="number">222</span>:<span class="number">34</span>: W602 deprecated form of raising exception</div><div class="line">optparse.py:<span class="number">347</span>:<span class="number">31</span>: E211 whitespace before <span class="string">'('</span></div><div class="line">optparse.py:<span class="number">357</span>:<span class="number">17</span>: E201 whitespace after <span class="string">'&#123;'</span></div><div class="line">optparse.py:<span class="number">472</span>:<span class="number">29</span>: E221 multiple spaces before operator</div><div class="line">optparse.py:<span class="number">544</span>:<span class="number">21</span>: W601 .has_key() <span class="keyword">is</span> deprecated, use <span class="string">'in'</span></div></pre></td></tr></table></figure><p>程序 <code>autopep8</code> 能自动将代码格式化成 <code>PEP 8</code> 风格。可用以下指令安装此程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> pip install autopep8</span></div></pre></td></tr></table></figure><p>使用以下命令来格式化一个文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> autopep8 --<span class="keyword">in</span>-place optparse.py</span></div></pre></td></tr></table></figure><p>不包含 <code>--in-place</code> 标志将会使得程序直接将更改的代码输出到控制台，以供审查。<code>--aggressive</code> 标志则会执行更多实质性的变化，而且可以多次使用以达到更佳的效果。</p><h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p>遵循以下的一些约定可以以让您的代码更加易读。</p><h3 id="检查变量是否等于常量"><a href="#检查变量是否等于常量" class="headerlink" title="检查变量是否等于常量"></a>检查变量是否等于常量</h3><p>你不需要明确的与 <code>None</code>、<code>True</code> 或者 <code>0</code>比较，只需要直接使用 <code>if</code> 语句。也可以<a href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing" target="_blank" rel="external">查阅文档</a>，来查看什么会被判定为 <code>False</code>。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> attr == <span class="keyword">True</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'True!'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> attr == <span class="keyword">None</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'attr is None!'</span></div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Just check the value</span></div><div class="line"><span class="keyword">if</span> attr:</div><div class="line">    <span class="keyword">print</span> <span class="string">'attr is truthy!'</span></div><div class="line"></div><div class="line"><span class="comment"># or check for the opposite</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> attr:</div><div class="line">    <span class="keyword">print</span> <span class="string">'attr is falsey!'</span></div><div class="line"></div><div class="line"><span class="comment"># or, since None is considered false, explicitly check for it</span></div><div class="line"><span class="keyword">if</span> attr <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'attr is None!'</span></div></pre></td></tr></table></figure><h3 id="访问字典元素"><a href="#访问字典元素" class="headerlink" title="访问字典元素"></a>访问字典元素</h3><p>不要使用 <code>dict.has_key()</code> 方法，使用 <code>x in d</code> 语法或者传入一个默认参数到 <code>dict.get()</code>。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;</div><div class="line"><span class="keyword">if</span> d.has_key(<span class="string">'hello'</span>):</div><div class="line">    <span class="keyword">print</span> d[<span class="string">'hello'</span>]    <span class="comment"># prints 'world'</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">'default_value'</span></div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">d = &#123;<span class="string">'hello'</span>: <span class="string">'world'</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">print</span> d.get(<span class="string">'hello'</span>, <span class="string">'default_value'</span>) <span class="comment"># prints 'world'</span></div><div class="line"><span class="keyword">print</span> d.get(<span class="string">'thingy'</span>, <span class="string">'default_value'</span>) <span class="comment"># prints 'default_value'</span></div><div class="line"></div><div class="line"><span class="comment"># Or:</span></div><div class="line"><span class="keyword">if</span> <span class="string">'hello'</span> <span class="keyword">in</span> d:</div><div class="line">    <span class="keyword">print</span> d[<span class="string">'hello'</span>]</div></pre></td></tr></table></figure><h3 id="维护列表的捷径"><a href="#维护列表的捷径" class="headerlink" title="维护列表的捷径"></a>维护列表的捷径</h3><p><a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" target="_blank" rel="external">列表生成式</a>提供了强大简洁的列表工作方式。而且，<code>map()</code> 和 <code>filter()</code> 函数是用一种不同且更简洁的语法处理列表。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Filter elements greater than 4</span></div><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">b = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</div><div class="line">    <span class="keyword">if</span> i &gt; <span class="number">4</span>:</div><div class="line">        b.append(i)</div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">b = [i <span class="keyword">for</span> i <span class="keyword">in</span> a <span class="keyword">if</span> i &gt; <span class="number">4</span>]</div><div class="line"><span class="comment"># Or:</span></div><div class="line">b = filter(<span class="keyword">lambda</span> x: x &gt; <span class="number">4</span>, a)</div></pre></td></tr></table></figure><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add three to all list members.</span></div><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(a)):</div><div class="line">    a[i] += <span class="number">3</span></div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line">a = [i + <span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> a]</div><div class="line"><span class="comment"># Or:</span></div><div class="line">a = map(<span class="keyword">lambda</span> i: i + <span class="number">3</span>, a)</div><div class="line">Use enumerate() keep a count of your place <span class="keyword">in</span> the list.</div><div class="line"></div><div class="line">a = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> enumerate(a):</div><div class="line">    <span class="keyword">print</span> i, item</div><div class="line"><span class="comment"># prints</span></div><div class="line"><span class="comment"># 0 3</span></div><div class="line"><span class="comment"># 1 4</span></div><div class="line"><span class="comment"># 2 5</span></div></pre></td></tr></table></figure><p>使用 <code>enumerate()</code> 函数比手动维护计数有更好的可读性。而且，它对 <code>迭代器</code> 进行了更好的优化。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>推荐使用 <code>with open</code> 语法来读取文件，它会自动关闭读取的文件。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f = open(<span class="string">'file.txt'</span>)</div><div class="line">a = f.read()</div><div class="line"><span class="keyword">print</span> a</div><div class="line">f.close()</div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'file.txt'</span>) <span class="keyword">as</span> f:</div><div class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</div><div class="line">        <span class="keyword">print</span> line</div></pre></td></tr></table></figure><p><code>with</code> 语句更好是因为它总是会去确定你的文件是否关闭，即使在 <code>with</code> 区块中引发了一个异常。</p><h3 id="行的延续"><a href="#行的延续" class="headerlink" title="行的延续"></a>行的延续</h3><p>当一个代码逻辑行长度超过可接受的限度时，需要划分为多行，如果一行最后一个字符是反斜杠 <code>\</code>， Python 解释器会连接下一行。这在一些情况下很有帮助。但是它非常脆弱，应该避免使用：比如在行末反斜杠后加一个空格，可能会破坏代码结构并产生意外的结果。</p><p>一个更好的解决方案是在元素周围使用括号。左边以一个未闭合的括号开头，Python 解释器会把行的结尾和下一行连接起来直到遇到闭合的括号。同样的行为适用中括号和大括号。</p><p><strong>Bad</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">my_very_big_string = <span class="string">"""For a long time I used to go to bed early. Sometimes, \</span></div><div class="line"><span class="string">    when I had put out my candle, my eyes would close so quickly that I had not even \</span></div><div class="line"><span class="string">    time to say “I’m going to sleep.”"""</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> some.deep.module.inside.a.module <span class="keyword">import</span> a_nice_function, another_nice_function, \</div><div class="line">    yet_another_nice_function</div></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">my_very_big_string = (</div><div class="line">    <span class="string">"For a long time I used to go to bed early. Sometimes, "</span></div><div class="line">    <span class="string">"when I had put out my candle, my eyes would close so quickly "</span></div><div class="line">    <span class="string">"that I had not even time to say “I’m going to sleep.”"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">from</span> some.deep.module.inside.a.module <span class="keyword">import</span> (</div><div class="line">    a_nice_function, another_nice_function, yet_another_nice_function)</div></pre></td></tr></table></figure><p>尽管如此，更多时候对于很长的逻辑行并没有进行划分，毕竟试图同时做更多的事情，容易影响可读性。</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><ul><li><a href="http://docs.python-guide.org/en/latest/writing/style/#code-style" target="_blank" rel="external">Code Style</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“人生苦短，我用 Python。”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://home.junyouxiaowu.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
      <category term="Notes" scheme="http://home.junyouxiaowu.top/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="http://home.junyouxiaowu.top/2018/03/02/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://home.junyouxiaowu.top/2018/03/02/MongoDB学习笔记/</id>
    <published>2018-03-02T05:39:27.000Z</published>
    <updated>2018-03-03T15:24:25.372Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>“It’s mongo, not mango.”</p></blockquote><a id="more"></a><h3 id="什么是-MongoDB？"><a href="#什么是-MongoDB？" class="headerlink" title="什么是 MongoDB？"></a>什么是 MongoDB？</h3><blockquote><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p></blockquote><h3 id="MongoDB-基础概念"><a href="#MongoDB-基础概念" class="headerlink" title="MongoDB 基础概念"></a>MongoDB 基础概念</h3><table><thead><tr><th style="text-align:center">MongoDB 术语</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">database</td><td style="text-align:center">数据库</td></tr><tr><td style="text-align:center">collection</td><td style="text-align:center">集合</td></tr><tr><td style="text-align:center">document</td><td style="text-align:center">文档</td></tr><tr><td style="text-align:center">field</td><td style="text-align:center">域</td></tr><tr><td style="text-align:center">index</td><td style="text-align:center">索引</td></tr><tr><td style="text-align:center">primary key</td><td style="text-align:center">主键，MongoDB 会自动将 _id 字段设置为主键</td></tr></tbody></table><h3 id="MongoDB-数据类型"><a href="#MongoDB-数据类型" class="headerlink" title="MongoDB 数据类型"></a>MongoDB 数据类型</h3><p>几种常用的数据类型：</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">String</td><td style="text-align:center">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td style="text-align:center">Integer</td><td style="text-align:center">整型数值。用于存储数值。根据所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td style="text-align:center">Boolean</td><td style="text-align:center">布尔值。用于存储布尔值（真/假）。</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">双精度浮点值。用于存储浮点值。</td></tr><tr><td style="text-align:center">Min/Max keys</td><td style="text-align:center">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td></tr><tr><td style="text-align:center">Array</td><td style="text-align:center">用于将数组或列表或多个值存储为一个键。</td></tr><tr><td style="text-align:center">Timestamp</td><td style="text-align:center">时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td style="text-align:center">Object</td><td style="text-align:center">用于内嵌文档。</td></tr><tr><td style="text-align:center">Null</td><td style="text-align:center">用于创建空值。</td></tr><tr><td style="text-align:center">Symbol</td><td style="text-align:center">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td style="text-align:center">Date</td><td style="text-align:center">日期时间。用 UNIX 时间格式来存储当前日期或时间。也可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td style="text-align:center">Object ID</td><td style="text-align:center">对象 ID。用于创建文档的 ID。</td></tr><tr><td style="text-align:center">Binary</td><td style="text-align:center">Data    二进制数据。用于存储二进制数据。</td></tr><tr><td style="text-align:center">Code</td><td style="text-align:center">代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td style="text-align:center">Regular expression</td><td style="text-align:center">正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><h3 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h3><h4 id="启动-MongoDB-服务"><a href="#启动-MongoDB-服务" class="headerlink" title="启动 MongoDB 服务"></a>启动 MongoDB 服务</h4><ul><li>启动 MongoDB 服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> (sudo) mongod</span></div></pre></td></tr></table></figure><ul><li>连接 MongoDB</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> mongo</span></div></pre></td></tr></table></figure><h4 id="创建和删除数据库"><a href="#创建和删除数据库" class="headerlink" title="创建和删除数据库"></a>创建和删除数据库</h4><ul><li>创建数据库：use DATABASE_NAME</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> use runoob</span></div><div class="line">switched to db runoob</div></pre></td></tr></table></figure><ul><li>显示当前数据库的名称</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db</span></div><div class="line">runoob</div></pre></td></tr></table></figure><p>MongoDB 中默认的数据库为 <code>test</code>，如果没有创建新的数据库，集合将存放在 <code>test</code> 数据库中。</p><ul><li>显示所有数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> show dbs</span></div><div class="line">admin   0.000GB</div><div class="line">config  0.000GB</div><div class="line">local   0.000GB</div><div class="line">runoob  0.000GB</div><div class="line">test    0.000GB</div></pre></td></tr></table></figure><ul><li>删除数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.dropDatabase()</span></div><div class="line">&#123; "dropped" : "runoob", "ok" : 1 &#125;</div></pre></td></tr></table></figure><h4 id="创建集合并插入文档"><a href="#创建集合并插入文档" class="headerlink" title="创建集合并插入文档"></a>创建集合并插入文档</h4><ul><li>向集合中插入文档：db.COLLECTION_NAME.insert(document)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.runoob.insert(&#123;<span class="string">"a"</span>: 1, <span class="string">"b"</span>: 2&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div></pre></td></tr></table></figure><p>往当前数据库 <code>runoob</code> 新建集合 <code>runoob</code> 并插入数据。</p><ul><li>显示所有集合</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> show tables</span></div><div class="line">foo</div><div class="line"><span class="meta">&gt;</span><span class="bash"> show collections</span></div><div class="line">foo</div></pre></td></tr></table></figure><ul><li>向指定集合插入单个文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.insertOne(&#123;<span class="string">"c"</span>: 3, <span class="string">"d"</span>: 4&#125;)</span></div><div class="line">&#123;</div><div class="line">"acknowledged" : true,</div><div class="line">"insertedId" : ObjectId("5a996150bcb5714f2f2ec2d9")</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>默认将创建 <code>foo</code> 集合。</p><ul><li>向指定集合插入多个文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.insertMany([&#123;<span class="string">"A"</span>: <span class="string">"a"</span>&#125;, &#123;<span class="string">"B"</span>: <span class="string">"b"</span>&#125;, &#123;<span class="string">"C"</span>: <span class="string">"c"</span>&#125;])</span></div><div class="line">&#123;</div><div class="line">    "acknowledged" : true,</div><div class="line">    "insertedIds" : [</div><div class="line">        ObjectId("5a8ce79553f8f9f2799791ff"),</div><div class="line">        ObjectId("5a8ce79553f8f9f279979200"),</div><div class="line">        ObjectId("5a8ce79553f8f9f279979201")</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>根据变量插入文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> document = (&#123;<span class="string">"title"</span>: <span class="string">"mongo"</span>, <span class="string">"description"</span>: <span class="string">"NoSQL"</span>, <span class="string">"tags"</span>: [<span class="string">"Nice"</span>, <span class="string">"SQL"</span>]&#125;)</span></div><div class="line">&#123;</div><div class="line">    "title" : "mongo",</div><div class="line">    "description" : "NoSQL",</div><div class="line">    "tags" : [</div><div class="line">        "Nice",</div><div class="line">        "SQL"</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.save(document)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div></pre></td></tr></table></figure><ul><li>删除集合</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.test.insertOne(&#123;<span class="string">'a'</span>: 5&#125;)</span></div><div class="line">&#123;</div><div class="line">"acknowledged" : true,</div><div class="line">"insertedId" : ObjectId("5a996ad17c2937a1639592ff")</div><div class="line">&#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.test.drop()</span></div><div class="line">true</div></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><ul><li>删除所有包含 “H”: 8 键值的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.remove(&#123;<span class="string">"H"</span>: 8&#125;)</span></div><div class="line">WriteResult(&#123; "nRemoved" : 3 &#125;)</div></pre></td></tr></table></figure><ul><li>删除一个包含 “H”: 8 键值的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.remove(&#123;<span class="string">"H"</span>: 8&#125;, 1)</span></div><div class="line">WriteResult(&#123; "nRemoved" : 1 &#125;)</div></pre></td></tr></table></figure><ul><li>删除一个包含 “H”: 8 键值的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.deleteOne(&#123;<span class="string">"H"</span>: 8&#125;)</span></div><div class="line">&#123; "acknowledged" : true, "deletedCount" : 1 &#125;</div></pre></td></tr></table></figure><ul><li>删除所有文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.deleteMany(&#123;&#125;)</span></div><div class="line">&#123; "acknowledged" : true, "deletedCount" : 3 &#125;</div></pre></td></tr></table></figure><h4 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h4><p><code>&gt; db.collection.updateOne()</code><br>即使可能有多个文档通过过滤条件匹配到，但是也最多也只更新一个文档。</p><p><code>&gt; db.collection.updateMany()</code><br>更新所有通过过滤条件匹配到的文档.</p><p><code>&gt; db.collection.replaceOne()</code><br>即使可能有多个文档通过过滤条件匹配到，但是也最多也只替换一个文档。</p><p><code>&gt; db.collection.update()</code><br>即使可能有多个文档通过过滤条件匹配到，但是也最多也只更新或者替换一个文档。<br>默认情况下, db.collection.update() 只更新 一个 文档。要更新多个文档，请使用 multi 选项。</p><h5 id="文档替换"><a href="#文档替换" class="headerlink" title="文档替换"></a>文档替换</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> var joe = db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> joe.relationships = &#123;<span class="string">"friends"</span>: joe.friends, <span class="string">"enemies"</span>: joe.enemies&#125;</span></div><div class="line">&#123; "friends" : 32, "enemies" : 2 &#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> joe</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "joe",</div><div class="line">    "friends" : 32,</div><div class="line">    "enemies" : 2,</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> delete joe.friends</span></div><div class="line">true</div><div class="line"><span class="meta">&gt;</span><span class="bash"> delete joe.enemies</span></div><div class="line">true</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;, joe)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>找到所需数据后赋值给变量，对变量进行修改后，将整个变量当成更新结果进行更新。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> var joe = db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line"><span class="meta">&gt;</span><span class="bash"> joe.age = 20</span></div><div class="line">20</div><div class="line"><span class="meta">&gt;</span><span class="bash"> joe.age++</span></div><div class="line">20</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;, joe)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2</div><div class="line">    &#125;,</div><div class="line">    "age" : 21</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>用相同方法增加年龄数据。</p><h5 id="使用-set-修改器增加键值"><a href="#使用-set-修改器增加键值" class="headerlink" title="使用 $set 修改器增加键值"></a>使用 <code>$set</code> 修改器增加键值</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;, &#123;<span class="string">"<span class="variable">$set</span>"</span>:&#123;<span class="string">"work"</span>: <span class="string">"teacher"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.updateOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;, &#123;<span class="string">"<span class="variable">$set</span>"</span>: &#123;<span class="string">"favorite book"</span>: [<span class="string">"Learning Python"</span>, <span class="string">"C Programing"</span>, <span class="string">"Ruby on Rails"</span>]&#125;&#125;)</span></div><div class="line">&#123; "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 &#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span> : <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2</div><div class="line">    &#125;,</div><div class="line">    "age" : 21,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning Python",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-unset-修改器删除键值"><a href="#使用-unset-修改器删除键值" class="headerlink" title="使用 $unset 修改器删除键值"></a>使用 <code>$unset</code> 修改器删除键值</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;, &#123;<span class="string">"<span class="variable">$unset</span>"</span>: &#123;<span class="string">"work"</span>: 1&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "jack",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2,</div><div class="line">    &#125;,</div><div class="line">    "age" : 28,</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning C++",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-inc-修改器增加和减少数值"><a href="#使用-inc-修改器增加和减少数值" class="headerlink" title="使用 $inc 修改器增加和减少数值"></a>使用 <code>$inc</code> 修改器增加和减少数值</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;, &#123;<span class="string">"<span class="variable">$inc</span>"</span>: &#123;<span class="string">"age"</span>: 1&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;, &#123;<span class="string">"<span class="variable">$inc</span>"</span>: &#123;<span class="string">"age"</span>: 2&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8cf74053f8f9f279979205"),</div><div class="line">    "name" : "jack",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 32,</div><div class="line">        "enemies" : 2,</div><div class="line">    &#125;,</div><div class="line">    "age" : 31,</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning C++",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-push-往数组添加单个元素"><a href="#使用-push-往数组添加单个元素" class="headerlink" title="使用 $push 往数组添加单个元素"></a>使用 <code>$push</code> 往数组添加单个元素</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$push</span>: &#123;<span class="string">"favorite book"</span>: <span class="string">"Effective Python"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div></pre></td></tr></table></figure><h5 id="使用-push-和-each-往数组添加多个元素"><a href="#使用-push-和-each-往数组添加多个元素" class="headerlink" title="使用 $push 和 $each 往数组添加多个元素"></a>使用 <code>$push</code> 和 <code>$each</code> 往数组添加多个元素</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$push</span>: &#123;<span class="string">"favorite book"</span>: &#123;<span class="variable">$each</span>: [<span class="string">"Effective C++"</span>, <span class="string">"Python Programing"</span>]&#125;&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div></pre></td></tr></table></figure><h5 id="使用-addToSet-往数组添加不重复的元素"><a href="#使用-addToSet-往数组添加不重复的元素" class="headerlink" title="使用 $addToSet 往数组添加不重复的元素"></a>使用 <code>$addToSet</code> 往数组添加不重复的元素</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$addToSet</span>: &#123;<span class="string">"favorite book"</span>: <span class="string">"Effective Python"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning Python",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        "Python Programing",</div><div class="line">        "Effective Python"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-pull-删除数组内所有指定元素"><a href="#使用-pull-删除数组内所有指定元素" class="headerlink" title="使用 $pull 删除数组内所有指定元素"></a>使用 <code>$pull</code> 删除数组内所有指定元素</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$pull</span>: &#123;<span class="string">"favorite book"</span>: <span class="string">"Effective Python"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "Learning Python",</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        "Python Programing"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="使用-pop-删除数组内指定位置的元素（1-代表最后一个元素，-1-代表前面第一个元素）"><a href="#使用-pop-删除数组内指定位置的元素（1-代表最后一个元素，-1-代表前面第一个元素）" class="headerlink" title="使用 $pop 删除数组内指定位置的元素（1 代表最后一个元素，-1 代表前面第一个元素）"></a>使用 <code>$pop</code> 删除数组内指定位置的元素（1 代表最后一个元素，-1 代表前面第一个元素）</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$pop</span>: &#123;<span class="string">"favorite book"</span>: 1&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$pop</span>: &#123;<span class="string">"favorite book"</span>: -1&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++"</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="基于位置的数组修改器"><a href="#基于位置的数组修改器" class="headerlink" title="基于位置的数组修改器"></a>基于位置的数组修改器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$addToSet</span>: &#123;<span class="string">"favorite book"</span>: &#123;<span class="string">"book name"</span>: <span class="string">"Effective Python"</span>, <span class="string">"language"</span>: <span class="string">"Python"</span>, <span class="string">"tag"</span>: <span class="string">"Fine"</span>&#125;&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        &#123;</div><div class="line">            "book name" : "Effective Python",</div><div class="line">            "language" : "Python",</div><div class="line">            "tag" : "Fine"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">"favorite book.3.tag"</span>: <span class="string">"Nice"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        &#123;</div><div class="line">            "book name" : "Effective Python",</div><div class="line">            "language" : "Python",</div><div class="line">            "tag" : "Nice"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"favorite book.book name"</span>: <span class="string">"Effective Python"</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">"favorite book.$.tag"</span>: <span class="string">"Good"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"joe"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d02d053f8f9f279979206"),</div><div class="line">    "name" : "joe",</div><div class="line">    "relationships" : &#123;</div><div class="line">        "friends" : 25,</div><div class="line">        "enemies" : 5</div><div class="line">    &#125;,</div><div class="line">    "age" : 22,</div><div class="line">    "work" : "teacher",</div><div class="line">    "favorite book" : [</div><div class="line">        "C Programing",</div><div class="line">        "Ruby on Rails",</div><div class="line">        "Effective C++",</div><div class="line">        &#123;</div><div class="line">            "book name" : "Effective Python",</div><div class="line">            "language" : "Python",</div><div class="line">            "tag" : "Good"</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="upsert-更新"><a href="#upsert-更新" class="headerlink" title="upsert 更新"></a><code>upsert</code> 更新</h5><p>指定 <code>update</code> 的第三个参数为 <code>true</code> 即可。<br>当没有找到符合更新条件的文档，将会以该条件新建一个文档。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.update(&#123;<span class="string">"name"</span>: <span class="string">"sliver"</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">"work"</span>: <span class="string">"student"</span>&#125;&#125;, <span class="literal">true</span>)</span></div><div class="line">WriteResult(&#123;</div><div class="line">    "nMatched" : 0,</div><div class="line">    "nUpserted" : 1,</div><div class="line">    "nModified" : 0,</div><div class="line">    "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789")</div><div class="line">&#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.findOne(&#123;<span class="string">"name"</span>: <span class="string">"sliver"</span>&#125;)</span></div><div class="line">&#123;</div><div class="line">    "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"),</div><div class="line">    "name" : "sliver",</div><div class="line">    "work" : "student"</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="更新多个文档"><a href="#更新多个文档" class="headerlink" title="更新多个文档"></a>更新多个文档</h5><p>指定 <code>update</code> 的第四个个参数为 <code>true</code> 即可或者使用 <code>updateMany()</code></p><h4 id="查找文档"><a href="#查找文档" class="headerlink" title="查找文档"></a>查找文档</h4><ul><li>找到集合 <code>foo</code> 中的所有文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find()</span></div><div class="line">&#123; "_id" : ObjectId("5a8cf74053f8f9f279979205"), "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125;, "age" : 31, "favorite book" : [ "Learning C++", "C Programing", "Ruby on Rails" ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student" &#125;</div></pre></td></tr></table></figure><ul><li>特定条件查询</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"name"</span>: <span class="string">"jack"</span>&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8cf74053f8f9f279979205"), "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125;, "age" : 31, "favorite book" : [ "Learning C++", "C Programing", "Ruby on Rails" ] &#125;</div></pre></td></tr></table></figure><ul><li>指定需要返回的键值</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;&#125;, &#123;<span class="string">"name"</span>: 1, <span class="string">"_id"</span>: 0, <span class="string">"relationships"</span>: 1&#125;)</span></div><div class="line">&#123; "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125; &#125;</div><div class="line">&#123; "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125; &#125;</div><div class="line">&#123; "name" : "sliver" &#125;</div></pre></td></tr></table></figure><h4 id="包含特定大小关系的查找"><a href="#包含特定大小关系的查找" class="headerlink" title="包含特定大小关系的查找"></a>包含特定大小关系的查找</h4><h5 id="比较关系操作符"><a href="#比较关系操作符" class="headerlink" title="比较关系操作符"></a>比较关系操作符</h5><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">$lte</td><td style="text-align:center">小于等于</td></tr><tr><td style="text-align:center">$lt</td><td style="text-align:center">小于</td></tr><tr><td style="text-align:center">$gte</td><td style="text-align:center">大于等于</td></tr><tr><td style="text-align:center">$gt</td><td style="text-align:center">大于</td></tr><tr><td style="text-align:center">$eq</td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center">$ne</td><td style="text-align:center">不等于</td></tr><tr><td style="text-align:center">$in</td><td style="text-align:center">包含</td></tr><tr><td style="text-align:center">$nin</td><td style="text-align:center">不包含</td></tr></tbody></table><ul><li>查找年龄在 18 ~ 30 直接的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"age"</span>: &#123;<span class="variable">$gte</span>: 18, <span class="variable">$lte</span>:30&#125;&#125;)  // greater than or equel to 18, lower than or equel to 30</span></div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student", "age" : 20, "relationships" : [ &#123; "friends" : 25, "enemies" : 1, "lovers" : 1 &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>查找年龄为 22 或者 职业为 student 的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="variable">$or</span>: [&#123;<span class="string">"age"</span>: 22&#125;, &#123;<span class="string">"work"</span>: <span class="string">"student"</span>&#125;]&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student", "age" : 20, "relationships" : [ &#123; "friends" : 25, "enemies" : 1, "lovers" : 1 &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>查找年龄在 18 ~ 30 之间 并且 职业为 student 的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"age"</span>: &#123;<span class="variable">$gte</span>: 18, <span class="variable">$lte</span>:30&#125;, <span class="string">"work"</span>: <span class="string">"student"</span>&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student", "age" : 20, "relationships" : [ &#123; "friends" : 25, "enemies" : 1, "lovers" : 1 &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>查找 favorite book 中有 Ruby on Rails 和 C Programing 的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"favorite book"</span>: &#123;<span class="variable">$in</span>: [<span class="string">"Ruby on Rails"</span>, <span class="string">"C Programing"</span>]&#125;&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8cf74053f8f9f279979205"), "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125;, "age" : 31, "favorite book" : [ "Learning C++", "C Programing", "Ruby on Rails" ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>查找 favorite book 中没有 Java 的用户</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"favorite book"</span> : &#123;<span class="variable">$nin</span>: [<span class="string">"Java"</span>]&#125;&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a8cf74053f8f9f279979205"), "name" : "jack", "relationships" : &#123; "friends" : 32, "enemies" : 2 &#125;, "age" : 31, "favorite book" : [ "Learning C++", "C Programing", "Ruby on Rails" ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d02d053f8f9f279979206"), "name" : "joe", "relationships" : &#123; "friends" : 25, "enemies" : 5 &#125;, "age" : 22, "work" : "teacher", "favorite book" : [ "C Programing", "Ruby on Rails", "Effective C++", &#123; "book name" : "Effective Python", "language" : "Python", "tag" : "Good" &#125; ] &#125;</div><div class="line">&#123; "_id" : ObjectId("5a8d1e3d2c0bd1e7a6eff789"), "name" : "sliver", "work" : "student", "age" : 20, "relationships" : [ &#123; "friends" : 25, "enemies" : 1, "lovers" : 1 &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>null 会匹配某个键的值为 null 的文档，而且还会匹配不包含这个键的文档，查询时需要加上 <code>exists</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.foo.find(&#123;<span class="string">"z"</span>: &#123;<span class="variable">$in</span>: [null], <span class="variable">$exists</span>: <span class="literal">true</span>&#125;&#125;)</span></div></pre></td></tr></table></figure><h4 id="查找数组"><a href="#查找数组" class="headerlink" title="查找数组"></a>查找数组</h4><p>创建 <code>food</code> 集合：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.insert(&#123;<span class="string">"_id"</span>: 1, <span class="string">"fruit"</span>: [<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"peach"</span>]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.insert(&#123;<span class="string">"_id"</span>: 2, <span class="string">"fruit"</span>: [<span class="string">"apple"</span>, <span class="string">"kumguat"</span>, <span class="string">"orange"</span>]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.insert(&#123;<span class="string">"_id"</span>: 3, <span class="string">"fruit"</span>: [<span class="string">"cherry"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span>]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find()</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana", "peach" ] &#125;</div><div class="line">&#123; "_id" : 2, "fruit" : [ "apple", "kumguat", "orange" ] &#125;</div><div class="line">&#123; "_id" : 3, "fruit" : [ "cherry", "banana", "apple" ] &#125;</div></pre></td></tr></table></figure><ul><li>找到含有 <code>apple</code> 和 <code>banana</code> 数组的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$all</span>: [<span class="string">"apple"</span>, <span class="string">"banana"</span>]&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana", "peach" ] &#125;</div><div class="line">&#123; "_id" : 3, "fruit" : [ "cherry", "banana", "apple" ] &#125;</div></pre></td></tr></table></figure><ul><li>查询数组特定位置的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"fruit.2"</span>: <span class="string">"peach"</span>&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana", "peach" ] &#125;</div></pre></td></tr></table></figure><p>插入一个元素：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.update(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="variable">$addToSet</span>: &#123;<span class="string">"fruit"</span>: <span class="string">"mango"</span>&#125;&#125;)</span></div><div class="line">WriteResult(&#123; "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 &#125;)</div></pre></td></tr></table></figure><ul><li>找到 <code>fruit</code> 数组大小为4的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$size</span>: 4&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana", "peach", "mango" ] &#125;</div></pre></td></tr></table></figure><ul><li>找到 <code>fruit</code> 数组大小为3的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$size</span>: 3&#125;&#125;)</span></div><div class="line">&#123; "_id" : 2, "fruit" : [ "apple", "kumguat", "orange" ] &#125;</div><div class="line">&#123; "_id" : 3, "fruit" : [ "cherry", "banana", "apple" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回 <code>fruit</code> 数组最后两个元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: -2&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "peach", "mango" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回 <code>fruit</code> 数组前面两个元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: 2&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "apple", "banana" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回 <code>fruit</code> 数组索引为2~3的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: [2, 2]&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "peach", "mango" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回 <code>fruit</code> 数组索引为1~2的元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;<span class="string">"_id"</span>: 1&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: [1, 2]&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "banana", "peach" ] &#125;</div></pre></td></tr></table></figure><ul><li>返回所有文档里 <code>fruit</code> 数组的最后两个元素</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.food.find(&#123;&#125;, &#123;<span class="string">"fruit"</span>: &#123;<span class="variable">$slice</span>: -2&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "fruit" : [ "peach", "mango" ] &#125;</div><div class="line">&#123; "_id" : 2, "fruit" : [ "kumguat", "orange" ] &#125;</div><div class="line">&#123; "_id" : 3, "fruit" : [ "banana", "apple" ] &#125;</div></pre></td></tr></table></figure><p>创建 <code>grades</code> 集合：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.insert(&#123;<span class="string">"_id"</span>: 1, <span class="string">"grade"</span>: [90, 80 ,70]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.insert(&#123;<span class="string">"_id"</span>: 2, <span class="string">"grade"</span>: [91, 92 ,89]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.insert(&#123;<span class="string">"_id"</span>: 3, <span class="string">"grade"</span>: [71, 72 ,79]&#125;)</span></div><div class="line">WriteResult(&#123; "nInserted" : 1 &#125;)</div><div class="line"></div><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.find()</span></div><div class="line">&#123; "_id" : 1, "grade" : [ 90, 80, 70 ] &#125;</div><div class="line">&#123; "_id" : 2, "grade" : [ 91, 92, 89 ] &#125;</div><div class="line">&#123; "_id" : 3, "grade" : [ 71, 72, 79 ] &#125;</div></pre></td></tr></table></figure><ul><li>查找 <code>grade</code> 数组包含范围为 (80, 95) 数据的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.find(&#123;<span class="string">"grade"</span>: &#123;<span class="variable">$elemMatch</span>: &#123;<span class="variable">$gt</span>: 80, <span class="variable">$lt</span>: 95&#125;&#125;&#125;)</span></div><div class="line">&#123; "_id" : 1, "grade" : [ 90, 80, 70 ] &#125;</div><div class="line">&#123; "_id" : 2, "grade" : [ 91, 92, 89 ] &#125;</div></pre></td></tr></table></figure><ul><li>查找 <code>grade</code> 数组包含范围为 (70, 75) 数据的文档</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.grades.find(&#123;<span class="string">"grade"</span>: &#123;<span class="variable">$elemMatch</span>: &#123;<span class="variable">$gt</span>: 70, <span class="variable">$lt</span>: 75&#125;&#125;&#125;)</span></div><div class="line">&#123; "_id" : 3, "grade" : [ 71, 72, 79 ] &#125;</div></pre></td></tr></table></figure><p>创建 <code>blog</code> 集合：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.blog.insert(&#123;<span class="string">"content"</span>: <span class="string">"article"</span>, <span class="string">"comments"</span>: [&#123;<span class="string">"author"</span>: <span class="string">"joe"</span>, <span class="string">"score"</span>: 3, <span class="string">"comment"</span>: <span class="string">"nice post"</span>&#125;, &#123;<span class="string">"author"</span>: <span class="string">"mary"</span>, <span class="string">"score"</span>: 6, <span class="string">"comment"</span>: <span class="string">"terrible post"</span>&#125;, &#123;<span class="string">"author"</span>: <span class="string">"joe"</span>, <span class="string">"score"</span>: 5, <span class="string">"comment"</span>: <span class="string">"ok..."</span>&#125;]&#125;)</span></div></pre></td></tr></table></figure><ul><li>查找 <code>comments</code> 数组中作者为 <code>author</code> 或者分数大于等于3的文章 </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> db.blog.find(&#123;<span class="string">"comments"</span>: &#123;<span class="variable">$elemMatch</span>: &#123;<span class="string">"author"</span>: <span class="string">"joe"</span>, <span class="string">"score"</span>: &#123;<span class="variable">$gte</span>: 3&#125;&#125;&#125;&#125;)</span></div><div class="line">&#123; "_id" : ObjectId("5a9aaced52f59c4d6924b177"), "content" : "article", "comments" : [ &#123; "author" : "joe", "score" : 3, "comment" : "nice post" &#125;, &#123; "author" : "mary", "score" : 6, "comment" : "terrible post" &#125;, &#123; "author" : "joe", "score" : 5, "comment" : "ok..." &#125; ] &#125;</div></pre></td></tr></table></figure><ul><li>通过 <code>$where</code> 使用 <code>JavaScript</code> 函数查询文档</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; db.food.find(&#123;<span class="attr">$where</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>._id === <span class="number">1</span>&#125;&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">1</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"peach"</span>, <span class="string">"mango"</span> ] &#125;</div></pre></td></tr></table></figure><h4 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h4><p>创建 <code>collection</code> 集合：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</div><div class="line">... db.collection.insert(&#123;<span class="string">"x"</span>: i&#125;)</div><div class="line">... &#125;</div><div class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</div></pre></td></tr></table></figure><p>创建并使用游标：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="keyword">var</span> cursor = db.collection.find();</div><div class="line">&gt; <span class="keyword">while</span> (cursor.hasNext()) &#123;</div><div class="line">... obj = cursor.next();</div><div class="line">... &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab0b652f59c4d6924b1db"</span>), <span class="string">"x"</span> : <span class="number">99</span> &#125;</div></pre></td></tr></table></figure><p>类似于迭代器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;</span><span class="bash"> cursor.hasNext()</span></div><div class="line">false</div></pre></td></tr></table></figure><h4 id="limit、skip-和-sort"><a href="#limit、skip-和-sort" class="headerlink" title="limit、skip 和 sort"></a><code>limit</code>、<code>skip</code> 和 <code>sort</code></h4><ul><li>按 <code>_id</code> 逆序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.food.find().sort(&#123;<span class="string">"_id"</span>: <span class="number">-1</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">3</span>, <span class="string">"fruit"</span> : [ <span class="string">"cherry"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">2</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"kumguat"</span>, <span class="string">"orange"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">1</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"peach"</span>, <span class="string">"mango"</span> ] &#125;</div></pre></td></tr></table></figure><ul><li>按 <code>_id</code> 正序</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; db.food.find().sort(&#123;<span class="string">"_id"</span>: <span class="number">1</span>&#125;)</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">1</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"peach"</span>, <span class="string">"mango"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">2</span>, <span class="string">"fruit"</span> : [ <span class="string">"apple"</span>, <span class="string">"kumguat"</span>, <span class="string">"orange"</span> ] &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : <span class="number">3</span>, <span class="string">"fruit"</span> : [ <span class="string">"cherry"</span>, <span class="string">"banana"</span>, <span class="string">"apple"</span> ] &#125;</div></pre></td></tr></table></figure><ul><li>跳过前面的数据从80开始到最后</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&gt; db.collection.find().skip(<span class="number">80</span>)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22c"</span>), <span class="string">"x"</span> : <span class="number">80</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22d"</span>), <span class="string">"x"</span> : <span class="number">81</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22e"</span>), <span class="string">"x"</span> : <span class="number">82</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22f"</span>), <span class="string">"x"</span> : <span class="number">83</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b230"</span>), <span class="string">"x"</span> : <span class="number">84</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b231"</span>), <span class="string">"x"</span> : <span class="number">85</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b232"</span>), <span class="string">"x"</span> : <span class="number">86</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b233"</span>), <span class="string">"x"</span> : <span class="number">87</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b234"</span>), <span class="string">"x"</span> : <span class="number">88</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b235"</span>), <span class="string">"x"</span> : <span class="number">89</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b236"</span>), <span class="string">"x"</span> : <span class="number">90</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b237"</span>), <span class="string">"x"</span> : <span class="number">91</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b238"</span>), <span class="string">"x"</span> : <span class="number">92</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b239"</span>), <span class="string">"x"</span> : <span class="number">93</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23a"</span>), <span class="string">"x"</span> : <span class="number">94</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23b"</span>), <span class="string">"x"</span> : <span class="number">95</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23c"</span>), <span class="string">"x"</span> : <span class="number">96</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23d"</span>), <span class="string">"x"</span> : <span class="number">97</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23e"</span>), <span class="string">"x"</span> : <span class="number">98</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b23f"</span>), <span class="string">"x"</span> : <span class="number">99</span> &#125;</div></pre></td></tr></table></figure><ul><li>跳过前面的数据从80开始，但是限制数量为10个</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt; db.collection.find().skip(<span class="number">80</span>).limit(<span class="number">10</span>)</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22c"</span>), <span class="string">"x"</span> : <span class="number">80</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22d"</span>), <span class="string">"x"</span> : <span class="number">81</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22e"</span>), <span class="string">"x"</span> : <span class="number">82</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b22f"</span>), <span class="string">"x"</span> : <span class="number">83</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b230"</span>), <span class="string">"x"</span> : <span class="number">84</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b231"</span>), <span class="string">"x"</span> : <span class="number">85</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b232"</span>), <span class="string">"x"</span> : <span class="number">86</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b233"</span>), <span class="string">"x"</span> : <span class="number">87</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b234"</span>), <span class="string">"x"</span> : <span class="number">88</span> &#125;</div><div class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"5a9ab37352f59c4d6924b235"</span>), <span class="string">"x"</span> : <span class="number">89</span> &#125;</div></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="http://www.mongodb.org.cn/manual/" target="_blank" rel="external">MongoDB 中文手册</a></li><li><a href="https://docs.mongodb.com/manual/reference/operator/update-array/" target="_blank" rel="external">MongoDB 官方文档</a></li><li><a href="https://book.douban.com/subject/25798102/" target="_blank" rel="external">MongoDB 权威指南</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;“It’s mongo, not mango.”&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://home.junyouxiaowu.top/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MongoDB" scheme="http://home.junyouxiaowu.top/tags/MongoDB/"/>
    
      <category term="Notes" scheme="http://home.junyouxiaowu.top/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2常用快捷键</title>
    <link href="http://home.junyouxiaowu.top/2018/03/02/iTerm2%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://home.junyouxiaowu.top/2018/03/02/iTerm2快捷键/</id>
    <published>2018-03-02T04:39:27.000Z</published>
    <updated>2018-03-02T05:46:10.349Z</updated>
    
    <content type="html"><![CDATA[<p>你不能不知道的 iTerm2 技巧。</p><a id="more"></a><p><img src="http://myblog-1256123790.cossh.myqcloud.com/imgiTerm2.jpg" width="600px"></p><h3 id="常用功能快捷键"><a href="#常用功能快捷键" class="headerlink" title="常用功能快捷键"></a>常用功能快捷键</h3><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">快捷键</th></tr></thead><tbody><tr><td style="text-align:center">新建标签</td><td style="text-align:center">command + t</td></tr><tr><td style="text-align:center">关闭标签</td><td style="text-align:center">command + w</td></tr><tr><td style="text-align:center">切换标签</td><td style="text-align:center">command + 数字 / command + 左右方向键</td></tr><tr><td style="text-align:center">切换全屏</td><td style="text-align:center">command + enter</td></tr><tr><td style="text-align:center">查找</td><td style="text-align:center">command + f</td></tr><tr><td style="text-align:center">垂直分屏</td><td style="text-align:center">command + d</td></tr><tr><td style="text-align:center">水平分屏</td><td style="text-align:center">command + shift + d</td></tr><tr><td style="text-align:center">切换屏幕</td><td style="text-align:center">command + option + 左右方向键 / command + [ / command + ]</td></tr><tr><td style="text-align:center">查看历史命令</td><td style="text-align:center">command + ;</td></tr><tr><td style="text-align:center">查看剪贴板历史</td><td style="text-align:center">command + shift + h</td></tr><tr><td style="text-align:center">清除当前行</td><td style="text-align:center">ctrl + u</td></tr><tr><td style="text-align:center">光标到行首</td><td style="text-align:center">ctrl + a</td></tr><tr><td style="text-align:center">光标到行尾</td><td style="text-align:center">ctrl + e</td></tr><tr><td style="text-align:center">光标前进后退</td><td style="text-align:center">ctrl + f/b (相当于左右方向键)</td></tr><tr><td style="text-align:center">上一条命令</td><td style="text-align:center">ctrl + p</td></tr><tr><td style="text-align:center">搜索命令历史</td><td style="text-align:center">ctrl + r</td></tr><tr><td style="text-align:center">删除当前光标的字符</td><td style="text-align:center">ctrl + d</td></tr><tr><td style="text-align:center">删除光标之前的字符</td><td style="text-align:center">ctrl + h</td></tr><tr><td style="text-align:center">删除光标之前的单词</td><td style="text-align:center">ctrl + w</td></tr><tr><td style="text-align:center">删除光标之后的字符</td><td style="text-align:center">ctrl + k</td></tr><tr><td style="text-align:center">交换光标处文本</td><td style="text-align:center">ctrl + t</td></tr><tr><td style="text-align:center">清屏</td><td style="text-align:center">command + r / ctrl + l</td></tr></tbody></table><h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><p>简单配置一些插件，往往能显著提高工作效率。<br>只要在 <code>~/.zshrc</code> 文件的 <code>plugin</code> 下面添加上想要的插件名称就可以了，并且 <code>oh-my-zsh</code> 自带了很多插件，可以通过 <code>ls ~/.oh-my-zsh/plugins</code> 来查看。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(git-extras git mvn svn osx brew brew-cask npm  colored-man colorize copydir history sublime command-not-found zsh-syntax-highlighting Z)</div></pre></td></tr></table></figure><ul><li>git：当你处于一个 git 受控的目录下时，shell 会明确显示 <code>git</code> 和 <code>branch</code>，另外对 git 很多命令进行了简化，例如 <code>gco=’git checkout’</code>、<code>gd=’git diff’</code>、<code>gst=’git status’</code>、<code>g=’git’</code> 等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考 <code>~/.oh-my-zsh/plugins/git/git.plugin.zsh</code>。</li><li>textmate：<code>mr</code> 可以创建 ruby 的框架项目，<code>tm finename</code> 可以用 textmate 打开指定文件。<br>osx：tab 增强，<code>quick-look filename</code> 可以直接预览文件，<code>man-preview grep</code> 可以生成 grep 手册的 pdf 版本等。</li><li>git-extras: Git extras 工具与 zsh 的继承，很方便，在 git 仓库目录下试试 <code>git summary</code> 即可看到整个仓库的汇总信息。</li><li>sublime : 此插件能够在终端下使用命令 <code>stt</code> 在 SublimeText 中打开当前文件夹，使用 <code>subl</code> 或者 <code>st</code> 来编辑某个特定文件，比如 <code>st 1.txt</code>，当然前提你得安装了 SublimeText。</li><li>zsh-syntax-highlighting: 让终端的每一条命令智能显示颜色，就像在 IDE 里面写代码一样，强烈推荐，安装只需要输入 <code>git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting</code> 命令再添加 <code>zsh-syntax-highlighting</code> 插件即可。</li><li>z : Z is awesome ，让你在不同的目录中快速跳转，比如想访问 <code>~/work/code/project/testApp</code>，只要是之前访问过，直接输入 <code>z testApp</code> 按 <code>tab</code> 键直接显示完整目录，按 <code>enter</code> 键直接进入当前目录，即使只输入了 <code>z testa</code> 也能完成同样的工作，大大提升效率。</li><li>ag: 终端里面快速搜索当前目录下所有文件中所匹配的关键字的命令，类似与 <code>awk</code>，但是速度极快，速度极快，速度极快，使用 <code>brew install</code>，其实就是组件 <code>the_silver_searcher</code> ，详细参考地址 GitHub 。</li><li>tree : mac 下的 <code>tree</code> 命令，方便排查问题，直接 <code>brew install tree</code> 即可。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://blog.csdn.net/ws1352864983/article/details/51512904" target="_blank" rel="external">http://blog.csdn.net/ws1352864983/article/details/51512904</a></li><li><a href="https://www.jianshu.com/p/5ec4ba334102" target="_blank" rel="external">https://www.jianshu.com/p/5ec4ba334102</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你不能不知道的 iTerm2 技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="技巧" scheme="http://home.junyouxiaowu.top/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
      <category term="iTerm2" scheme="http://home.junyouxiaowu.top/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>Hexo自定义Markdown渲染</title>
    <link href="http://home.junyouxiaowu.top/2018/02/27/%E8%87%AA%E5%AE%9A%E4%B9%89markdown/"/>
    <id>http://home.junyouxiaowu.top/2018/02/27/自定义markdown/</id>
    <published>2018-02-27T10:09:27.000Z</published>
    <updated>2018-02-28T03:23:31.076Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>看惯俗粉，不如魔改。</p></blockquote><a id="more"></a><p>首先需要修改 <code>Hexo</code> 默认的 <code>Markdown</code> 插件，是在 <code>node_modules/hexo-renderer-marked/lib/</code> 目录下的 <code>renderer.js</code> 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> marked = <span class="built_in">require</span>(<span class="string">'marked'</span>);</div><div class="line"><span class="keyword">var</span> assign = <span class="built_in">require</span>(<span class="string">'object-assign'</span>);</div><div class="line"><span class="keyword">var</span> stripIndent = <span class="built_in">require</span>(<span class="string">'strip-indent'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'hexo-util'</span>);</div><div class="line"><span class="keyword">var</span> highlight = util.highlight;</div><div class="line"><span class="keyword">var</span> stripHTML = util.stripHTML;</div><div class="line"><span class="keyword">var</span> MarkedRenderer = marked.Renderer;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Renderer</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    MarkedRenderer.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>._headingId = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'util'</span>).inherits(Renderer, MarkedRenderer);</div><div class="line"></div><div class="line"><span class="comment">// Add id attribute to headings</span></div><div class="line">Renderer.prototype.heading = <span class="function"><span class="keyword">function</span>(<span class="params">text, level</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> id = anchorId(stripHTML(text));</div><div class="line">    <span class="keyword">var</span> headingId = <span class="keyword">this</span>._headingId;</div><div class="line"></div><div class="line">    <span class="comment">// Add a number after id if repeated</span></div><div class="line">    <span class="keyword">if</span> (headingId[id]) &#123;</div><div class="line">        id += <span class="string">'-'</span> + headingId[id]++;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        headingId[id] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// add headerlink</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'&lt;h'</span> + level + <span class="string">' id="'</span> + id + <span class="string">'"&gt;&lt;a href="#'</span> + id + <span class="string">'" class="headerlink" title="'</span> + stripHTML(text) + <span class="string">'"&gt;&lt;/a&gt;'</span> + text + <span class="string">'&lt;/h'</span> + level + <span class="string">'&gt;'</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">anchorId</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">    <span class="comment">// Add support for Chinese</span></div><div class="line">    <span class="keyword">return</span> <span class="built_in">escape</span>(str</div><div class="line">        .replace(<span class="regexp">/\s+/g</span>, <span class="string">'_'</span>)</div><div class="line">        .replace(<span class="regexp">/\./g</span>, <span class="string">'-'</span>)</div><div class="line">        .replace(<span class="regexp">/-&#123;2,&#125;/g</span>, <span class="string">'-'</span>)).replace(<span class="regexp">/%/g</span>, <span class="string">'_'</span>).replace(<span class="regexp">/^[\-_]+|[\-_]+$/g</span>, <span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">marked.setOptions(&#123;</div><div class="line">    langPrefix: <span class="string">''</span>,</div><div class="line">    highlight: <span class="function"><span class="keyword">function</span>(<span class="params">code, lang</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> highlight(stripIndent(code), &#123;</div><div class="line">            lang: lang,</div><div class="line">            gutter: <span class="literal">false</span>,</div><div class="line">            wrap: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">data, options</span>) </span>&#123;</div><div class="line">    <span class="comment">// return marked(data.text, assign(&#123;</span></div><div class="line">    <span class="comment">//    renderer: new Renderer()</span></div><div class="line">    <span class="comment">//  &#125;, this.config.marked, options));</span></div><div class="line"></div><div class="line">    <span class="keyword">var</span> curRender = <span class="keyword">new</span> Renderer(),</div><div class="line">        markedRenderer = <span class="keyword">this</span>.markedRenderer;</div><div class="line"></div><div class="line">    <span class="comment">// init function</span></div><div class="line">    <span class="keyword">if</span> (markedRenderer &amp;&amp; <span class="keyword">typeof</span>(markedRenderer.init) == <span class="string">'function'</span>) &#123;</div><div class="line">        markedRenderer.init.call(<span class="keyword">this</span>, data, options);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// override marked.Render</span></div><div class="line">    <span class="keyword">if</span> (markedRenderer) &#123;</div><div class="line">        curRender = assign(curRender, markedRenderer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// get html content</span></div><div class="line">    <span class="keyword">var</span> html = marked(data.text, assign(&#123;</div><div class="line">        renderer: curRender</div><div class="line">    &#125;, <span class="keyword">this</span>.config.marked, options));</div><div class="line"></div><div class="line">    <span class="comment">// complete function</span></div><div class="line">    <span class="keyword">if</span> (markedRenderer &amp;&amp; <span class="keyword">typeof</span>(markedRenderer.complete) == <span class="string">'function'</span>) &#123;</div><div class="line">        <span class="keyword">var</span> tmpHtml = markedRenderer.complete.call(<span class="keyword">this</span>, html);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!tmpHtml) &#123;</div><div class="line">            html = tmpHtml;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">return</span> html;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>修改 <code>module.exports = function(data, options)</code> 后的部分即可，这里附上所有代码，如上。</p><p>接下来在所用主题目录 <code>yourtheme/scripts/</code>，创建 <code>marked-renderer.js</code> 并写入:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">hexo.markedRenderer = &#123;</div><div class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// console.log("hexo.markedRenderer init!");</span></div><div class="line">        <span class="comment">// Called before rendering </span></div><div class="line">    &#125;,</div><div class="line">    complete: <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">        <span class="comment">// console.log("hexo.markedRenderer complete!");</span></div><div class="line">        <span class="comment">// Called after rendered</span></div><div class="line">        </div><div class="line">        <span class="comment">// Deal with html here ...</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> html;</div><div class="line">    &#125;,</div><div class="line">    image: <span class="function"><span class="keyword">function</span>(<span class="params">href, title, alt</span>) </span>&#123;</div><div class="line">        <span class="comment">// Default method can be accessed via:</span></div><div class="line">        <span class="comment">// this._super.heading(text, level)</span></div><div class="line">        <span class="keyword">var</span> orimg = <span class="string">'&lt;img data-original="'</span> + href;</div><div class="line">        <span class="keyword">if</span> (title) orimg += <span class="string">'" title="'</span> + title;</div><div class="line">        <span class="keyword">if</span> (alt) orimg += <span class="string">'" alt="'</span> + alt;</div><div class="line">        <span class="keyword">return</span> orimg + <span class="string">'"&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>大功告成。<br>感谢 <code>Github</code> 大佬们：<a href="https://github.com/helinjiang/hexo-renderer-marked-enhanced" target="_blank" rel="external">https://github.com/helinjiang/hexo-renderer-marked-enhanced</a>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;看惯俗粉，不如魔改。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="魔改" scheme="http://home.junyouxiaowu.top/categories/%E9%AD%94%E6%94%B9/"/>
    
    
      <category term="Hexo" scheme="http://home.junyouxiaowu.top/tags/Hexo/"/>
    
      <category term="Markdown" scheme="http://home.junyouxiaowu.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Python小课堂之命名元组、频度统计和排序技巧</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/Python%E5%B0%8F%E8%AF%BE%E5%A0%821/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/Python小课堂1/</id>
    <published>2018-02-25T11:49:27.000Z</published>
    <updated>2018-02-28T03:07:53.777Z</updated>
    
    <content type="html"><![CDATA[<p>写给女朋友的小课堂 One🌟</p><a id="more"></a><h3 id="如何为元组中的每个元素命名，提高程序可读性？"><a href="#如何为元组中的每个元素命名，提高程序可读性？" class="headerlink" title="如何为元组中的每个元素命名，提高程序可读性？"></a>如何为元组中的每个元素命名，提高程序可读性？</h3><p>我们知道，C 语言中存在结构体，如一个链表节点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line">    ElemType data; </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></div><div class="line">&#125; LNode;</div></pre></td></tr></table></figure><p>结构体的引入，使程序的可读性有显著的提高，我们可以使用如 <code>L.data</code> 访问元素。<br>在 Python 中，我们可以使用命名元组来提高程序可读性。</p><p>现在，我们来创建一个 Student 命名元组：</p><p>in[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</div><div class="line"></div><div class="line"><span class="comment"># 第一个变量是元组名称，第二个参数是一个列表，包含了元组里想要包含的元素 </span></div><div class="line">Student = namedtuple(<span class="string">'Student'</span>, [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>, <span class="string">'grade'</span>])</div><div class="line"></div><div class="line">student1 = Student(<span class="string">'Sliver'</span>, <span class="number">20</span>, <span class="string">'male'</span>, <span class="number">99</span>) <span class="comment"># 默认赋值</span></div><div class="line">student2 = Student(name=<span class="string">'Arial'</span>, grade=<span class="number">100</span>, age=<span class="number">18</span>, sex=<span class="string">'female'</span>) <span class="comment"># 通过关键字赋值</span></div><div class="line">print(student1)</div><div class="line">print(student2)</div></pre></td></tr></table></figure><p>out[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Student(name=<span class="string">'Sliver'</span>, age=<span class="number">20</span>, sex=<span class="string">'male'</span>, grade=<span class="number">99</span>)</div><div class="line">Student(name=<span class="string">'Arial'</span>, age=<span class="number">18</span>, sex=<span class="string">'female'</span>, grade=<span class="number">100</span>)</div></pre></td></tr></table></figure><p>现在我们可以直接通过属性来访问数据，其内存占用不高，比普通元组也只是大了一点，在迭代方面与元组等效。</p><p>in[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> s <span class="keyword">in</span> student1:</div><div class="line">    print(s)</div><div class="line">print()</div><div class="line">print(student1.name, student1.age, student1.sex, student1.grade); print()</div></pre></td></tr></table></figure><p>out[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Sliver</div><div class="line"><span class="number">20</span></div><div class="line">male</div><div class="line"><span class="number">99</span></div><div class="line"></div><div class="line">Sliver <span class="number">20</span> male <span class="number">99</span></div></pre></td></tr></table></figure><h3 id="如何统计序列中元素出现的频度？"><a href="#如何统计序列中元素出现的频度？" class="headerlink" title="如何统计序列中元素出现的频度？"></a>如何统计序列中元素出现的频度？</h3><p>我们先创建一个在[0, 20]之间数量为30个的随机列表，这样肯定会有重复的元素：</p><p>in[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"></div><div class="line">l1 = [random.randint(<span class="number">0</span>, <span class="number">20</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">30</span>)] </div><div class="line">print(l1)</div></pre></td></tr></table></figure><p>out[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">2</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">16</span>, <span class="number">5</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">19</span>]</div></pre></td></tr></table></figure><p>我们想知道每个数据出现的次数，比如2出现了5次，3出现了2次等，这样其实很符合字典的构造，因为字典其实就是一个 <code>key-value</code> 形式，如 <code>{2: 5, 3:2}</code> 可以表示2出现了5次，3出现了2次。<br>现在我们来根据这个思路来统计出现次数，也就是频度：</p><p>in[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data = dict.fromkeys(l1, <span class="number">0</span>) </div><div class="line">print(data)</div></pre></td></tr></table></figure><p><code>dict.fromkeys()</code> 是字典对象的一个方法，第一个参数是要取键值的序列，第二个参数是默认让每个键对应的值，这里我们选0进行赋值，因为字典不允许有重复的键，这样我们也就把序列中的唯一元素都取了出来。</p><p><strong>PS: 字典的键的定义是不是和集合很像？所以他们都是用{}表示~</strong></p><p>out[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">2</span>: <span class="number">0</span>, <span class="number">12</span>: <span class="number">0</span>, <span class="number">7</span>: <span class="number">0</span>, <span class="number">11</span>: <span class="number">0</span>, <span class="number">14</span>: <span class="number">0</span>, <span class="number">6</span>: <span class="number">0</span>, <span class="number">16</span>: <span class="number">0</span>, <span class="number">18</span>: <span class="number">0</span>, <span class="number">19</span>: <span class="number">0</span>, <span class="number">5</span>: <span class="number">0</span>, <span class="number">9</span>: <span class="number">0</span>, <span class="number">10</span>: <span class="number">0</span>, <span class="number">20</span>: <span class="number">0</span>, <span class="number">1</span>: <span class="number">0</span>&#125;</div></pre></td></tr></table></figure><p>这个时候我们遍历原来的序列，为之前创建的data字典加1。<br>为什么呢？<br>因为遍历原来的序列，如果碰到相同的就加1，也就相当于计算了这个元素在原来序列中的个数了。</p><p>in[2]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> l1:</div><div class="line">    data[x] += <span class="number">1</span> </div><div class="line">print(data)</div></pre></td></tr></table></figure><p>out[2]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">2</span>: <span class="number">2</span>, <span class="number">12</span>: <span class="number">2</span>, <span class="number">7</span>: <span class="number">4</span>, <span class="number">11</span>: <span class="number">1</span>, <span class="number">14</span>: <span class="number">3</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">16</span>: <span class="number">4</span>, <span class="number">18</span>: <span class="number">1</span>, <span class="number">19</span>: <span class="number">2</span>, <span class="number">5</span>: <span class="number">3</span>, <span class="number">9</span>: <span class="number">4</span>, <span class="number">10</span>: <span class="number">1</span>, <span class="number">20</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure><p>但是如果要找频度最高的元素，就又要重新遍历得到的字典了，数据很大的时候，这样的效率并不高：</p><p>in[3]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> kv <span class="keyword">in</span> sorted(data.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="keyword">True</span>)[<span class="number">0</span>:<span class="number">3</span>]:</div><div class="line">    print(<span class="string">'频度排名前三的键值对：'</span>,kv)</div></pre></td></tr></table></figure><p>out[3]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">频度排名前三的键值对： (<span class="number">7</span>, <span class="number">4</span>)</div><div class="line">频度排名前三的键值对： (<span class="number">16</span>, <span class="number">4</span>)</div><div class="line">频度排名前三的键值对： (<span class="number">9</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure><p>这里介绍一下 <code>sort()</code> 函数：  </p><p>它的第一个参数是一个可迭代的序列，<code>reverse=True</code> 代表的是从高到低排序，默认是从低到高排。<br><code>key</code> 参数接受一个函数，有点像 <code>map</code> 和 <code>filter</code>，都需要给它一个函数，<code>key</code> 是给 <code>sorted</code> 一个排序的参考点，也就是告诉sorted，我们要按照哪个值排序。  </p><p><code>data.items()</code> 返回的是一个类似元组的结果，也就是我们的键值是这样返回来的：<code>(k, v)</code><br>我们要对它排序，是按照 <code>k</code> 的大小排呢？还是按照 <code>v</code> 的大小排呢？  </p><p>如果让 <code>kv = (k, v)</code>, 那么 <code>kv[0]</code> 就代表了 <code>k</code>, <code>kv[1]</code> 代表了 <code>v</code>。 </p><p><code>key=lambda x: x[1]</code> 就是代表我们按照 <code>kv[1]</code> 也就是值的大小进行排序。</p><p>相比前面这么多的代码量，倒是有更加简洁的代码，运行效率不高，却也不失为 <code>Pythonic</code>。</p><p>in[4]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">temp = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> l1&#125;</div><div class="line">d1 = &#123;k: l1.count(k) <span class="keyword">for</span> k <span class="keyword">in</span> temp&#125; <span class="comment"># 可以简洁地得出每个数据的频度</span></div><div class="line">print(d1); print()</div></pre></td></tr></table></figure><p>out[4]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">5</span>: <span class="number">3</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">7</span>: <span class="number">4</span>, <span class="number">9</span>: <span class="number">4</span>, <span class="number">10</span>: <span class="number">1</span>, <span class="number">11</span>: <span class="number">1</span>, <span class="number">12</span>: <span class="number">2</span>, <span class="number">14</span>: <span class="number">3</span>, <span class="number">16</span>: <span class="number">4</span>, <span class="number">18</span>: <span class="number">1</span>, <span class="number">19</span>: <span class="number">2</span>, <span class="number">20</span>: <span class="number">1</span>&#125;</div></pre></td></tr></table></figure><p><strong>不要害怕，还有另一个方法：</strong></p><p>in[5]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</div><div class="line"></div><div class="line"><span class="comment"># Python 内置模块 collections 包含了统计频度的 Counter 对象</span></div><div class="line">c = Counter(l1)</div><div class="line">print(c); print()</div><div class="line">print(type(c))  <span class="comment"># 它是一个Counter对象，但更加直观</span></div></pre></td></tr></table></figure><p>out[5]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Counter(&#123;<span class="number">7</span>: <span class="number">4</span>, <span class="number">16</span>: <span class="number">4</span>, <span class="number">9</span>: <span class="number">4</span>, <span class="number">14</span>: <span class="number">3</span>, <span class="number">5</span>: <span class="number">3</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">12</span>: <span class="number">2</span>, <span class="number">19</span>: <span class="number">2</span>, <span class="number">11</span>: <span class="number">1</span>, <span class="number">6</span>: <span class="number">1</span>, <span class="number">18</span>: <span class="number">1</span>, <span class="number">10</span>: <span class="number">1</span>, <span class="number">20</span>: <span class="number">1</span>, <span class="number">1</span>: <span class="number">1</span>&#125;)</div><div class="line"></div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">collections</span>.<span class="title">Counter</span>'&gt;</span></div></pre></td></tr></table></figure><p><code>Counter</code> 对象的 <code>most_common()</code> 方法可以返回频度排名由高到低的列表，列表里面包含了键值对元组。<br>现在我们来得到频度排名前3的键值对：</p><p>in[6]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">print(c.most_common(<span class="number">3</span>)); print()<span class="comment"># 得到频度排名前5的键值对</span></div><div class="line">print(c.most_common(<span class="number">5</span>))</div></pre></td></tr></table></figure><p>out[6]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[(<span class="number">7</span>, <span class="number">4</span>), (<span class="number">16</span>, <span class="number">4</span>), (<span class="number">9</span>, <span class="number">4</span>)]</div><div class="line"></div><div class="line">[(<span class="number">7</span>, <span class="number">4</span>), (<span class="number">16</span>, <span class="number">4</span>), (<span class="number">9</span>, <span class="number">4</span>), (<span class="number">14</span>, <span class="number">3</span>), (<span class="number">5</span>, <span class="number">3</span>)]</div></pre></td></tr></table></figure><p>我们可以试着随便统计一下一堆字符串中单词的频度了：</p><p>in[7]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">poem = <span class="string">'''</span></div><div class="line"><span class="string">Down by the salley gardens my love and I did meet; </span></div><div class="line"><span class="string">She passed the salley gardens with little snow-white feet.</span></div><div class="line"><span class="string">She bid me take love easy, as the leaves grow on the tree;</span></div><div class="line"><span class="string">But I being young and foolish, with her would not agree.</span></div><div class="line"><span class="string">In a field by the river my love and I did stand,</span></div><div class="line"><span class="string">And on my leaning shoulder she laid her snow-white hand.</span></div><div class="line"><span class="string">She bid me take life easy, as the grass grows on the weirs;</span></div><div class="line"><span class="string">But I was young and foolish, and now i m full of tears.</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="keyword">import</span> re</div><div class="line"></div><div class="line">poem_list = re.split(<span class="string">'\s+'</span>, poem) <span class="comment"># re.split() 方法按照空字符去拆分字符串</span></div><div class="line">print(Counter(poem_list))</div></pre></td></tr></table></figure><p>out[7]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Counter(&#123;<span class="string">'the'</span>: <span class="number">7</span>, <span class="string">'and'</span>: <span class="number">5</span>, <span class="string">'I'</span>: <span class="number">4</span>, <span class="string">'my'</span>: <span class="number">3</span>, <span class="string">'love'</span>: <span class="number">3</span>, <span class="string">'She'</span>: <span class="number">3</span>, <span class="string">'on'</span>: <span class="number">3</span>, <span class="string">''</span>: <span class="number">2</span>, <span class="string">'by'</span>: <span class="number">2</span>, <span class="string">'salley'</span>: <span class="number">2</span>, <span class="string">'gardens'</span>: <span class="number">2</span>, <span class="string">'did'</span>: <span class="number">2</span>, <span class="string">'with'</span>: <span class="number">2</span>, <span class="string">'snow-white'</span>: <span class="number">2</span>, <span class="string">'bid'</span>: <span class="number">2</span>, <span class="string">'me'</span>: <span class="number">2</span>, <span class="string">'take'</span>: <span class="number">2</span>, <span class="string">'easy,'</span>: <span class="number">2</span>, <span class="string">'as'</span>: <span class="number">2</span>, <span class="string">'But'</span>: <span class="number">2</span>, <span class="string">'young'</span>: <span class="number">2</span>, <span class="string">'foolish,'</span>: <span class="number">2</span>, <span class="string">'her'</span>: <span class="number">2</span>, <span class="string">'Down'</span>: <span class="number">1</span>,<span class="string">'meet;'</span>: <span class="number">1</span>, <span class="string">'passed'</span>: <span class="number">1</span>, <span class="string">'little'</span>: <span class="number">1</span>, <span class="string">'feet.'</span>: <span class="number">1</span>, <span class="string">'leaves'</span>: <span class="number">1</span>, <span class="string">'grow'</span>: <span class="number">1</span>, <span class="string">'tree;'</span>: <span class="number">1</span>, <span class="string">'being'</span>: <span class="number">1</span>, <span class="string">'would'</span>: <span class="number">1</span>, <span class="string">'not'</span>: <span class="number">1</span>, <span class="string">'agree.'</span>: <span class="number">1</span>,<span class="string">'In'</span>: <span class="number">1</span>, <span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'field'</span>: <span class="number">1</span>, <span class="string">'river'</span>: <span class="number">1</span>, <span class="string">'stand,'</span>: <span class="number">1</span>, <span class="string">'And'</span>: <span class="number">1</span>, <span class="string">'leaning'</span>: <span class="number">1</span>, <span class="string">'shoulder'</span>: <span class="number">1</span>, <span class="string">'she'</span>: <span class="number">1</span>, <span class="string">'laid'</span>: <span class="number">1</span>, <span class="string">'hand.'</span>: <span class="number">1</span>, <span class="string">'life'</span>: <span class="number">1</span>, <span class="string">'grass'</span>: <span class="number">1</span>, <span class="string">'grows'</span>: <span class="number">1</span>, <span class="string">'weirs;'</span>: <span class="number">1</span>, <span class="string">'was'</span>: <span class="number">1</span>, <span class="string">'now'</span>: <span class="number">1</span>, <span class="string">'i'</span>: <span class="number">1</span>, <span class="string">'m'</span>: <span class="number">1</span>, <span class="string">'full'</span>: <span class="number">1</span>, <span class="string">'of'</span>: <span class="number">1</span>, <span class="string">'tears.'</span>: <span class="number">1</span>&#125;)</div></pre></td></tr></table></figure><h3 id="如何根据字典中值的大小，对数据项进行排序？"><a href="#如何根据字典中值的大小，对数据项进行排序？" class="headerlink" title="如何根据字典中值的大小，对数据项进行排序？"></a>如何根据字典中值的大小，对数据项进行排序？</h3><p>我们可以用sorted()函数先对一个列表进行排序:</p><p>in[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">l1 = [random.randint(<span class="number">0</span>,<span class="number">40</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>)]</div><div class="line">print(sorted(l1)) <span class="comment"># 从小到大输出</span></div><div class="line">print(sorted(l1, reverse=<span class="keyword">True</span>)) <span class="comment"># 从大到小输出</span></div></pre></td></tr></table></figure><p>out[0]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">20</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">26</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>]</div><div class="line">[<span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>, <span class="number">33</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">28</span>, <span class="number">26</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">20</span>, <span class="number">17</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure><p>现在我们创建一个学生成绩字典：</p><p>in[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">d1 = &#123;name: random.randint(<span class="number">40</span>,<span class="number">100</span>) <span class="keyword">for</span> name <span class="keyword">in</span> <span class="string">'ABCDEFGHIJ'</span>&#125; <span class="comment"># 字典生成式</span></div><div class="line">print(d1)</div></pre></td></tr></table></figure><p>out[1]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">'A'</span>: <span class="number">87</span>, <span class="string">'B'</span>: <span class="number">67</span>, <span class="string">'C'</span>: <span class="number">68</span>, <span class="string">'D'</span>: <span class="number">76</span>, <span class="string">'E'</span>: <span class="number">91</span>, <span class="string">'F'</span>: <span class="number">53</span>, <span class="string">'G'</span>: <span class="number">54</span>, <span class="string">'H'</span>: <span class="number">61</span>, <span class="string">'I'</span>: <span class="number">48</span>, <span class="string">'J'</span>: <span class="number">51</span>&#125;</div></pre></td></tr></table></figure><p>试试sorted()进行排序：</p><p>in[2]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(sorted(d1))</div></pre></td></tr></table></figure><p>out[2]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>]</div></pre></td></tr></table></figure><p>默认将键进行了排序，那该怎么让它根据值进行排序呢？</p><p>in[3]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(sorted(d1.items(), key=<span class="keyword">lambda</span> items:items[<span class="number">1</span>]))</div></pre></td></tr></table></figure><p>out[3]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(<span class="string">'I'</span>, <span class="number">48</span>), (<span class="string">'J'</span>, <span class="number">51</span>), (<span class="string">'F'</span>, <span class="number">53</span>), (<span class="string">'G'</span>, <span class="number">54</span>), (<span class="string">'H'</span>, <span class="number">61</span>), (<span class="string">'B'</span>, <span class="number">67</span>), (<span class="string">'C'</span>, <span class="number">68</span>), (<span class="string">'D'</span>, <span class="number">76</span>), (<span class="string">'A'</span>, <span class="number">87</span>), (<span class="string">'E'</span>, <span class="number">91</span>)]</div></pre></td></tr></table></figure><p>给 <code>reverse</code> 参数赋值，进行从大到小排序:</p><p>in[4]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(sorted(d1.items(), key=<span class="keyword">lambda</span> items:items[<span class="number">1</span>] ,reverse=<span class="keyword">True</span>))</div></pre></td></tr></table></figure><p>out[4]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(<span class="string">'E'</span>, <span class="number">91</span>), (<span class="string">'A'</span>, <span class="number">87</span>), (<span class="string">'D'</span>, <span class="number">76</span>), (<span class="string">'C'</span>, <span class="number">68</span>), (<span class="string">'B'</span>, <span class="number">67</span>), (<span class="string">'H'</span>, <span class="number">61</span>), (<span class="string">'G'</span>, <span class="number">54</span>), (<span class="string">'F'</span>, <span class="number">53</span>), (<span class="string">'J'</span>, <span class="number">51</span>), (<span class="string">'I'</span>, <span class="number">48</span>)]</div></pre></td></tr></table></figure><p>试试zip，思考为什么这样就可以排序了？</p><p>in[5]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(sorted(zip(d1.values(), d1.keys()), reverse=<span class="keyword">True</span>))</div></pre></td></tr></table></figure><p>out[5]:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[(<span class="number">91</span>, <span class="string">'E'</span>), (<span class="number">87</span>, <span class="string">'A'</span>), (<span class="number">76</span>, <span class="string">'D'</span>), (<span class="number">68</span>, <span class="string">'C'</span>), (<span class="number">67</span>, <span class="string">'B'</span>), (<span class="number">61</span>, <span class="string">'H'</span>), (<span class="number">54</span>, <span class="string">'G'</span>), (<span class="number">53</span>, <span class="string">'F'</span>), (<span class="number">51</span>, <span class="string">'J'</span>), (<span class="number">48</span>, <span class="string">'I'</span>)]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写给女朋友的小课堂 One🌟&lt;/p&gt;
    
    </summary>
    
      <category term="教程" scheme="http://home.junyouxiaowu.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
      <category term="Tips" scheme="http://home.junyouxiaowu.top/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>Battle Ship</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/BattleShip/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/BattleShip/</id>
    <published>2018-02-25T09:49:27.000Z</published>
    <updated>2018-02-28T08:14:25.449Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>少年，你，想不想成为一个 Captain 呢？</p></blockquote><a id="more"></a><p>标题误导向 hhh。  </p><p>前段时间学习了 <code>JavaScript</code> 这门语言，相比于 <code>Python</code>，它也是有很多优点的。结合之前看的 <code>Head First HTML &amp; CSS</code> 这本书，我写了一个普通的小游戏，仅为娱乐。</p><p><strong>游戏规则：</strong></p><p>有一个 <code>7 * 7</code> 的航海区域，敌方有三艘潜艇潜伏其中，每艘潜艇占据三格长度，它可能是竖着潜伏，也有可能是横着潜伏。我方有很多炮弹鱼雷，但希望在尽量少的发射次数下，击沉敌方三艘潜艇。</p><p><strong>击沉条件：</strong> </p><p>因为潜艇占据三格长度，所以需要将炮弹击打在潜艇的三个部位才能将其击沉，重复击打是无效的。</p><p><strong>温馨提醒：</strong></p><ul><li>请多多注意左上角的提示。</li><li>游戏有彩蛋，懂前端的一定能到找到。</li></ul><p>⚡️<a href="/assets/BattleShip/battleship.html">Battle Start</a>⚡️</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;少年，你，想不想成为一个 Captain 呢？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="娱乐" scheme="http://home.junyouxiaowu.top/categories/%E5%A8%B1%E4%B9%90/"/>
    
    
      <category term="Game" scheme="http://home.junyouxiaowu.top/tags/Game/"/>
    
      <category term="JavaScript" scheme="http://home.junyouxiaowu.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0021 Merge Two Sorted Lists</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0021-Merge-Two-Sorted-Lists/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0021-Merge-Two-Sorted-Lists/</id>
    <published>2018-02-25T09:44:47.000Z</published>
    <updated>2018-02-28T03:17:14.788Z</updated>
    
    <content type="html"><![CDATA[<p><strong>21. Merge Two Sorted Lists</strong></p><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p><a id="more"></a><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</div><div class="line">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</div></pre></td></tr></table></figure><p><strong>Analysis:</strong></p><p>看到这道题有似曾相识的感觉，其实就是当初上数据结构，老师讲了半天的链表合并题，印象很深刻，所以还原了一下他说的算法，代码虽然很丑很长，但是时间效率还是挺高的 <code>O(m+n)</code>。<br>当然，这道题用递归来解决会更加的简便，因为给我们的两个链表是已经排序好的，如果当前l1的节点的值比l2的节点的值大，就将两个节点交换，要注意的是，这样的交换会将节点指向的后续节点也一起交换了，然后递归判断后续节点直到遍历结束，返回结果。</p><p><strong>Answer: 1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode:</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type l1: ListNode</span></div><div class="line"><span class="string">        :type l2: ListNode</span></div><div class="line"><span class="string">        :rtype: ListNode</span></div><div class="line"><span class="string">        """</span></div><div class="line">        output = ListNode(<span class="number">0</span>)</div><div class="line">        temp = output</div><div class="line">        </div><div class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</div><div class="line">            <span class="keyword">if</span> l1.val &gt; l2.val:</div><div class="line">                temp.next = ListNode(<span class="number">0</span>)</div><div class="line">                temp.next.val, l2 = l2.val, l2.next</div><div class="line">                temp = temp.next</div><div class="line">            <span class="keyword">elif</span> l1.val &lt; l2.val:</div><div class="line">                temp.next = ListNode(<span class="number">0</span>)</div><div class="line">                temp.next.val, l1 = l1.val, l1.next</div><div class="line">                temp = temp.next</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                temp.next = ListNode(<span class="number">0</span>)</div><div class="line">                temp.next.next = ListNode(<span class="number">0</span>)</div><div class="line">                temp.next.val, temp.next.next.val= l1.val, l1.val</div><div class="line">                temp, l1, l2 = temp.next.next, l1.next, l2.next</div><div class="line">                </div><div class="line">        <span class="keyword">if</span> l1:</div><div class="line">            temp.next = ListNode(<span class="number">0</span>)</div><div class="line">            temp.next.next = ListNode(<span class="number">0</span>)</div><div class="line">            temp.next.val = l1.val</div><div class="line">            temp.next.next = l1.next</div><div class="line">            </div><div class="line">        <span class="keyword">elif</span> l2:</div><div class="line">            temp.next = ListNode(<span class="number">0</span>)</div><div class="line">            temp.next.next = ListNode(<span class="number">0</span>)</div><div class="line">            temp.next.val = l2.val</div><div class="line">            temp.next.next = l2.next</div><div class="line">            </div><div class="line">        <span class="keyword">return</span> output.next</div></pre></td></tr></table></figure><p><strong>Answer 2:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode:</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type l1: ListNode</span></div><div class="line"><span class="string">        :type l2: ListNode</span></div><div class="line"><span class="string">        :rtype: ListNode</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> l1 <span class="keyword">and</span> l2:</div><div class="line">            <span class="keyword">if</span> l1.val &gt; l2.val:</div><div class="line">                l1, l2 = l2, l1</div><div class="line">            l1.next = self.mergeTwoLists(l1.next, l2)</div><div class="line">        <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;21. Merge Two Sorted Lists&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0020 Valid Parentheses</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0020-Valid-Parentheses/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0020-Valid-Parentheses/</id>
    <published>2018-02-25T09:44:46.000Z</published>
    <updated>2018-02-25T12:43:05.586Z</updated>
    
    <content type="html"><![CDATA[<p><strong>20. Valid Parentheses</strong></p><p>Given a string containing just the characters <code>&#39;(&#39;, &#39;)&#39;, &#39;{&#39;, &#39;}&#39;, &#39;[&#39; and &#39;]&#39;</code>, determine if the input string is valid.</p><a id="more"></a><p>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not.</p><p><strong>Analysis:</strong></p><p>在这里，我们可以把列表当成栈来使用，然后遍历字符串且不断 <code>push</code> 数据到栈中，在插入数据后要判断当前栈顶两个元素能否构成合法的括号表达式，如果可以，就把这两个元素都 <code>pop</code> 出栈，当循环结束后，如果整个字符串是合法的，栈必为空，否则是非法的。<br><code>Answer 1</code> 我是将数据插入列表后再判断是否合法，合法会 <code>pop</code> 两次数据，有点浪费时间和空间，所以 <code>Answer 2</code> 改成插入前就判断数据是否合法，合法就不插入数据，直接 <code>pop</code> 一次数据。<br>当然也看到高人的答案，具体请看 <code>Answer 3</code>。</p><p><strong>Answer 1:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type s: str</span></div><div class="line"><span class="string">        :rtype: bool</span></div><div class="line"><span class="string">        """</span></div><div class="line">        stack = []</div><div class="line">        d = [<span class="string">'()'</span>, <span class="string">'&#123;&#125;'</span>, <span class="string">'[]'</span>]</div><div class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</div><div class="line">            stack.append(char)</div><div class="line">            <span class="keyword">if</span> len(stack) &gt;= <span class="number">2</span> <span class="keyword">and</span> (stack[<span class="number">-2</span>] + stack[<span class="number">-1</span>]) <span class="keyword">in</span> d:</div><div class="line">                stack.pop()</div><div class="line">                stack.pop()</div><div class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</div></pre></td></tr></table></figure><p><strong>Answer 2:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type s: str</span></div><div class="line"><span class="string">        :rtype: bool</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> len(s) % <span class="number">2</span> != <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        d = &#123;<span class="string">')'</span>:<span class="string">'('</span>, <span class="string">'&#125;'</span>:<span class="string">'&#123;'</span>, <span class="string">']'</span>:<span class="string">'['</span>&#125;</div><div class="line">        stack = []</div><div class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> stack <span class="keyword">and</span> (char <span class="keyword">in</span> d <span class="keyword">and</span> stack[<span class="number">-1</span>] == d[char]):</div><div class="line">                stack.pop()</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                stack.append(char)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</div></pre></td></tr></table></figure><p><strong>Answer 3:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type s: str</span></div><div class="line"><span class="string">        :rtype: bool</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">while</span> <span class="string">"()"</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">"&#123;&#125;"</span> <span class="keyword">in</span> s <span class="keyword">or</span> <span class="string">"[]"</span> <span class="keyword">in</span> s:</div><div class="line">            s = s.replace(<span class="string">"()"</span>,<span class="string">""</span>).replace(<span class="string">"&#123;&#125;"</span>,<span class="string">""</span>).replace(<span class="string">"[]"</span>,<span class="string">""</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">not</span> s</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;20. Valid Parentheses&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a string containing just the characters &lt;code&gt;&amp;#39;(&amp;#39;, &amp;#39;)&amp;#39;, &amp;#39;{&amp;#39;, &amp;#39;}&amp;#39;, &amp;#39;[&amp;#39; and &amp;#39;]&amp;#39;&lt;/code&gt;, determine if the input string is valid.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0019 Remove Nth Node From End of List</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0019-Remove-Nth-Node-From-End-of-List/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0019-Remove-Nth-Node-From-End-of-List/</id>
    <published>2018-02-25T09:44:45.000Z</published>
    <updated>2018-02-25T12:42:57.578Z</updated>
    
    <content type="html"><![CDATA[<p><strong>19. Remove Nth Node From End of List</strong></p><p>Given a linked list, remove the nth node from the end of list and return its head.</p><a id="more"></a><p><strong>For example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</div><div class="line"></div><div class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</div></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Given n will always be valid.<br>Try to do this in one pass.</p><p><strong>Analysis:</strong></p><p>思路很简单，直接遍历整个链表得到长度 <code>length</code>，令 <code>flag = length - n</code>，这就是我们需要到达删除的位置的循环次数，如果为0，说明要删除的是头节点，直接返回 <code>head.next</code>即可，不为0时，要循环链表到低要删除的位置的前一个位置，改变指针指向节点即可。</p><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="comment"># class ListNode:</span></div><div class="line"><span class="comment">#     def __init__(self, x):</span></div><div class="line"><span class="comment">#         self.val = x</span></div><div class="line"><span class="comment">#         self.next = None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type head: ListNode</span></div><div class="line"><span class="string">        :type n: int</span></div><div class="line"><span class="string">        :rtype: ListNode</span></div><div class="line"><span class="string">        """</span></div><div class="line">        p, q, length = head, head, <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> p:</div><div class="line">            p = p.next</div><div class="line">            length += <span class="number">1</span></div><div class="line">        flag = length - n</div><div class="line">        <span class="keyword">if</span> flag == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> head.next</div><div class="line">        <span class="keyword">while</span> flag &gt; <span class="number">1</span> :</div><div class="line">            q = q.next</div><div class="line">            flag -= <span class="number">1</span></div><div class="line">        q.next = q.next.next</div><div class="line">        <span class="keyword">return</span> head</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;19. Remove Nth Node From End of List&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a linked list, remove the nth node from the end of list and return its head.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0018 4Sum</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0018-4Sum/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0018-4Sum/</id>
    <published>2018-02-25T09:44:44.000Z</published>
    <updated>2018-02-25T12:42:49.157Z</updated>
    
    <content type="html"><![CDATA[<p><strong>18. 4Sum</strong></p><p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p><a id="more"></a><p><strong>Note:</strong></p><p>The solution set must not contain duplicate quadruplets.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1,  0, 0, 1],</div><div class="line">  [-2, -1, 1, 2],</div><div class="line">  [-2,  0, 0, 2]</div><div class="line">]</div></pre></td></tr></table></figure><p><strong>Analysis:</strong></p><p>本题思路与15题 <code>3Sum</code> 相同，因为多了一个数求和，所以需要多枚举一个数，也就多了一个循环，其余解法同15题，排序后只需要不断移动首尾两个指针，碰到重复的数跳过循环即可。</p><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fourSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type nums: List[int]</span></div><div class="line"><span class="string">        :type target: int</span></div><div class="line"><span class="string">        :rtype: List[List[int]]</span></div><div class="line"><span class="string">        """</span></div><div class="line">        nums.sort()</div><div class="line">        output, length = [], len(nums)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length):</div><div class="line">            <span class="keyword">if</span> i <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, length):</div><div class="line">                <span class="keyword">if</span> j != i + <span class="number">1</span> <span class="keyword">and</span> nums[j] == nums[j - <span class="number">1</span>]:</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                sum = target - nums[i] - nums[j]</div><div class="line">                start, end = j + <span class="number">1</span>, length - <span class="number">1</span></div><div class="line">                <span class="keyword">while</span> start &lt; end:</div><div class="line">                    <span class="keyword">if</span> nums[start] + nums[end] &gt; sum:</div><div class="line">                        end -= <span class="number">1</span></div><div class="line">                    <span class="keyword">elif</span> nums[start] + nums[end] &lt; sum:</div><div class="line">                        start += <span class="number">1</span></div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        output.append([nums[i], nums[j], nums[start], nums[end]])</div><div class="line">                        start, end = start + <span class="number">1</span>, end - <span class="number">1</span></div><div class="line">                        <span class="keyword">while</span> start &lt; end <span class="keyword">and</span> nums[start] == nums[start - <span class="number">1</span>]:</div><div class="line">                            start += <span class="number">1</span></div><div class="line">                        <span class="keyword">while</span> start &lt; end <span class="keyword">and</span> nums[end] == nums[end + <span class="number">1</span>]:</div><div class="line">                            end -= <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> output</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;18. 4Sum&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0017 Letter Combinations of a Phone Number</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0017-Letter-Combinations-of-a-Phone-Number/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0017-Letter-Combinations-of-a-Phone-Number/</id>
    <published>2018-02-25T09:44:43.000Z</published>
    <updated>2018-02-25T12:42:40.984Z</updated>
    
    <content type="html"><![CDATA[<p><strong>17. Letter Combinations of a Phone Number</strong></p><p>Given a digit string, return all possible letter combinations that the number could represent.</p><a id="more"></a><p>A mapping of digit to letters (just like on the telephone buttons) is given below.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="telephone buttons"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input:Digit string &quot;23&quot;</div><div class="line">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</div></pre></td></tr></table></figure><p><strong>Note:</strong></p><p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p><p><strong>Analysis:</strong></p><p>考察的就是映射和排列组合，通过三层循环再不断更新组合列表即可。<br>需要注意的有效数字只有 <code>2~9</code>，构造这个范围内的数字映射即可。</p><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span><span class="params">(self, digits)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type digits: str</span></div><div class="line"><span class="string">        :rtype: List[str]</span></div><div class="line"><span class="string">        """</span></div><div class="line">        map = &#123;<span class="string">'2'</span>: <span class="string">'abc'</span>, <span class="string">'3'</span>: <span class="string">'def'</span>, <span class="string">'4'</span>: <span class="string">'ghi'</span>, <span class="string">'5'</span>: <span class="string">'jkl'</span>, </div><div class="line">               <span class="string">'6'</span>: <span class="string">'mno'</span>, <span class="string">'7'</span>: <span class="string">'pqrs'</span>, <span class="string">'8'</span>: <span class="string">'tuv'</span>, <span class="string">'9'</span>: <span class="string">'wxyz'</span>&#125; </div><div class="line">        combinations = [<span class="string">''</span>] <span class="keyword">if</span> digits <span class="keyword">else</span> []</div><div class="line">        <span class="keyword">for</span> digit <span class="keyword">in</span> digits:</div><div class="line">            new_combinations = []</div><div class="line">            <span class="keyword">for</span> letter <span class="keyword">in</span> map[digit]:</div><div class="line">                <span class="keyword">for</span> combination <span class="keyword">in</span> combinations:</div><div class="line">                    new_combinations.append(combination + letter)</div><div class="line">            combinations = new_combinations</div><div class="line">        <span class="keyword">return</span> combinations</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;17. Letter Combinations of a Phone Number&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a digit string, return all possible letter combinations that the number could represent.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0016 3Sum Closest</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0016-3Sum-Closest/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0016-3Sum-Closest/</id>
    <published>2018-02-25T09:44:42.000Z</published>
    <updated>2018-02-25T12:42:33.389Z</updated>
    
    <content type="html"><![CDATA[<p><strong>16. 3Sum Closest</strong></p><p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">For example, given array S = &#123;-1 2 1 -4&#125;, and target = 1.</div><div class="line"></div><div class="line">The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).</div></pre></td></tr></table></figure><p><strong>Analysis:</strong></p><p>本题类似于15题，所以大部分代码和思路与15题相似，但是因为这次的 <code>target</code> 不是准确值，所以 while 循环内要比较三个数的和与 <code>target</code> 的大小关系，根据大小关系移动 <code>start</code> 和 <code>end</code> 指针，并在循环内根据 <code>abs(sums - target) &lt; abs(output - target)</code> 更新最接近的 <code>target</code> 的和，直到循环结束。</p><p><strong>Answer:</strong></p><pre><code class="Python"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span>    <span class="function"><span class="keyword">def</span> <span class="title">threeSumClosest</span><span class="params">(self, nums, target)</span>:</span>        <span class="string">"""</span><span class="string">        :type nums: List[int]</span><span class="string">        :type target: int</span><span class="string">        :rtype: int</span><span class="string">        """</span>        nums.sort()        length, output= len(nums), <span class="keyword">None</span>        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> nums[i] == nums[i - <span class="number">1</span>]:                <span class="keyword">continue</span>            start, end = i + <span class="number">1</span>, length - <span class="number">1</span>            <span class="keyword">while</span> start &lt; end:                sums = nums[i] + nums[start] + nums[end]                <span class="keyword">if</span> sums &lt;= target:                    start += <span class="number">1</span>                <span class="keyword">else</span>:                    end -= <span class="number">1</span>                <span class="keyword">if</span> output <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> abs(sums - target) &lt; abs(output - target):                    output = sums        <span class="keyword">return</span> output</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;16. 3Sum Closest&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0015 3Sum</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0015-3Sum/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0015-3Sum/</id>
    <published>2018-02-25T09:44:41.000Z</published>
    <updated>2018-02-25T12:42:24.944Z</updated>
    
    <content type="html"><![CDATA[<p><strong>15. 3Sum</strong></p><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><a id="more"></a><p><strong>Note:</strong> </p><p>The solution set must not contain duplicate triplets.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">For example, given array S = [-1, 0, 1, 2, -1, -4],</div><div class="line"></div><div class="line">A solution set is:</div><div class="line">[</div><div class="line">  [-1, 0, 1],</div><div class="line">  [-1, -1, 2]</div><div class="line">]</div></pre></td></tr></table></figure><p><strong>Analysis:</strong></p><p>本道题一开始的思路是将在列表中取出3个数形成一个组合的结果全部列出来，再得到元素和为0的组合，如 <code>Answer 1</code>，不出所料超时了。换种思路，<code>a + b + c = 0</code>，其实也就是 <code>0 - a = b + c</code>，如果先将这个整数列表升序排序，在 for 循环中，令 <code>target = 0 - nums[i]</code>，我们设两个指针 <code>start， end</code>，根据两个指针对应的值的结果来调整指针的位置，也就可以解决问题了。需要注意的是，列表中相邻的两个元素如果相等，要选择跳过，这样会更加省时间。</p><p><strong>Answer 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># Time Limit Exceeded</div><div class="line">class Solution:</div><div class="line">    def threeSum(self, nums):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        from itertools import combinations</div><div class="line">        nums.sort()</div><div class="line">        temp = list(set([x for x in combinations(nums, 3) if sum(x) == 0]))</div><div class="line">        output = [list(x) for x in temp]</div><div class="line">        return(output)</div></pre></td></tr></table></figure><p><strong>Answer 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Solution:</div><div class="line">    def threeSum(self, nums):</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        :type nums: List[int]</div><div class="line">        :rtype: List[List[int]]</div><div class="line">        &quot;&quot;&quot;</div><div class="line">        nums.sort()</div><div class="line">        length, output= len(nums), []</div><div class="line">        for i in range(length):</div><div class="line">            if i &gt; 0 and nums[i] == nums[i - 1]:</div><div class="line">                continue</div><div class="line">            target = 0 - nums[i]</div><div class="line">            start, end = i + 1, length - 1</div><div class="line">            while start &lt; end:</div><div class="line">                if nums[start] + nums[end] &gt; target:</div><div class="line">                    end -= 1</div><div class="line">                elif nums[start] + nums[end] &lt; target:</div><div class="line">                    start += 1</div><div class="line">                else:</div><div class="line">                    output.append([nums[i], nums[start], nums[end]])</div><div class="line">                    start, end = start + 1, end - 1</div><div class="line">                    while start &lt; end and nums[end] == nums[end + 1]:</div><div class="line">                        end -= 1</div><div class="line">                    while start &lt; end and nums[start] == nums[start - 1]:</div><div class="line">                        start += 1    </div><div class="line">        return output</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;15. 3Sum&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0014 Longest Common Prefix</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0014-Longest-Common-Prefix/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0014-Longest-Common-Prefix/</id>
    <published>2018-02-25T09:44:40.000Z</published>
    <updated>2018-02-25T12:42:16.969Z</updated>
    
    <content type="html"><![CDATA[<p><strong>14. Longest Common Prefix</strong></p><p>Write a function to find the longest common prefix string amongst an array of strings.</p><a id="more"></a><p><strong>Description:</strong></p><p>题目给的描述有点不清晰的感觉，这里给出讨论区好心人的例子和描述。<br>总体来说，是求出一组字符串中每个字符串的前缀公共子串，也就是求公共键问题。</p><p>It seems that it is not to check between pair of strings but on all the strings in the array.</p><p><strong>For example:</strong></p><ol><li><p>{“a”,“a”,“b”} should give “” as there is nothing common in all the 3 strings.</p></li><li><p>{“a”, “a”} should give “a” as a is longest common prefix in all the strings.</p></li><li><p>{“abca”, “abc”} as abc</p></li><li><p>{“ac”, “ac”, “a”, “a”} as a.</p></li></ol><p><strong>Logic goes something like this:</strong></p><p>Pick a character at i=0th location and compare it with the character at that location in every string.</p><ol><li><p>If anyone doesn’t have that just return “”</p></li><li><p>Else append that character in to the result.</p></li><li><p>Increment i and do steps 1-3 till the length of that string.</p></li><li><p>return result.</p></li></ol><p><strong>Analysis:</strong></p><p>将 strs 序列解包后再用 zip，我们可以将各个字符串里面的字符一一对应，每个字符串的第一个字符将会构成一个元组，每个字符串的第二个字符也会构成一个元组…<br>因此我们可以根据集合的性质，将每个位置的元组转化为集合，如果集合的长度为1，说明这个位置的字符都是相同的，即可说明这是一个公共字符，不断循环直到遍历完数组或者找到集合长度大于1也就是不存在相同字符的位置，返回结果。</p><p><strong>Answer 1:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type strs: List[str]</span></div><div class="line"><span class="string">        :rtype: str</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> i, group <span class="keyword">in</span> enumerate(zip(*strs)):</div><div class="line">            <span class="keyword">if</span> len(set(group)) &gt; <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> strs[<span class="number">0</span>][:i]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> min(strs)</div></pre></td></tr></table></figure><p>在本题中，公共键其实是包含在最短的字符串中的，我们只需要找到最短的字符串，并让其他字符串的字符与其比较即可。</p><p><strong>Answer 2:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type strs: List[str]</span></div><div class="line"><span class="string">        :rtype: str</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs:</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span></div><div class="line">        shortstr = min(strs, key=len)</div><div class="line">        <span class="keyword">for</span> i, char <span class="keyword">in</span> enumerate(shortstr):</div><div class="line">            <span class="keyword">for</span> otherstr <span class="keyword">in</span> strs:</div><div class="line">                <span class="keyword">if</span> otherstr[i] != char:</div><div class="line">                    <span class="keyword">return</span> shortstr[:i]</div><div class="line">        <span class="keyword">return</span> shortstr</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;14. Longest Common Prefix&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0013 Roman to Integer</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0013-Roman-to-Integer/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0013-Roman-to-Integer/</id>
    <published>2018-02-25T09:44:39.000Z</published>
    <updated>2018-02-25T12:42:08.988Z</updated>
    
    <content type="html"><![CDATA[<p><strong>13. Roman to Integer</strong></p><p>Given a roman numeral, convert it to an integer.</p><a id="more"></a><p>Input is guaranteed to be within the range from 1 to 3999.</p><p><strong>Analysis:</strong></p><p>罗马数字的符号一共只有7个：  </p><ul><li>I - 1</li><li>V - 5</li><li>X - 10</li><li>L - 50</li><li>C - 100</li><li>D - 500</li><li>M - 1000</li></ul><p>运算规则（右加左减）：在一个较大的罗马数字的右边记上一个较小的罗马数字，表示大数字加小数字。在一个较大的数字的左边记上1个较小的罗马数字，表示大数字减小数字。并且，1个罗马数字重复几次，就表示这个数的几倍。</p><p>但是左减不能跨越一个位数。比如，99 不可以用 <code>IC</code> 表示，而是用 <code>XCIX</code> 表示。<br>此外，左减数字不能超过1位，比如8写成 <code>VIII</code>，而非 <code>IIX</code>。并且左键减数字有限制，只能是 <code>I、X、C</code>。同理，右加数字不能超过3位，比如14写成 <code>XIV</code>，而非 <code>XIIII</code>。</p><p><a href="https://www.douban.com/note/335254352/" target="_blank" rel="external">罗马数字规则</a><br><a href="https://wenku.baidu.com/view/bb2b9c655fbfc77da369b16d.html" target="_blank" rel="external">罗马数字1-100对照表</a></p><p>综上所述，给定一个罗马数字，循环时，如果 s[i] &lt;= s[i - 1]，可直接将 s[i] 加到 output 中，如果 s[i] &gt; s[i - 1]，就需要加上 s[i] 再减去两个 s[i - 1]，因为在上一次循环，已经加上了 s[i - 1]。</p><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type s: str</span></div><div class="line"><span class="string">        :rtype: int</span></div><div class="line"><span class="string">        """</span></div><div class="line">        d = &#123;<span class="string">'I'</span>: <span class="number">1</span>,<span class="string">'V'</span>: <span class="number">5</span>,<span class="string">'X'</span>: <span class="number">10</span>,<span class="string">'L'</span>: <span class="number">50</span>,<span class="string">'C'</span>: <span class="number">100</span>,<span class="string">'D'</span>: <span class="number">500</span>,<span class="string">'M'</span>: <span class="number">1000</span>&#125;</div><div class="line">        output = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</div><div class="line">            <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> d[s[i]] &gt; d[s[i - <span class="number">1</span>]]:</div><div class="line">                output += d[s[i]] - <span class="number">2</span> * d[s[i - <span class="number">1</span>]]</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                output += d[s[i]]</div><div class="line">        <span class="keyword">return</span> output</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;13. Roman to Integer&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given a roman numeral, convert it to an integer.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0012 Integer to Roman</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0012-Integer-to-Roman/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0012-Integer-to-Roman/</id>
    <published>2018-02-25T09:44:38.000Z</published>
    <updated>2018-02-25T12:42:00.505Z</updated>
    
    <content type="html"><![CDATA[<p><strong>12. Integer to Roman</strong></p><p>Given an integer, convert it to a roman numeral.</p><a id="more"></a><p>Input is guaranteed to be within the range from 1 to 3999.</p><p><strong>Analysis:</strong></p><p>罗马数字的符号一共只有7个：  </p><ul><li>I - 1</li><li>V - 5</li><li>X - 10</li><li>L - 50</li><li>C - 100</li><li>D - 500</li><li>M - 1000</li></ul><p>运算规则（右加左减）：在一个较大的罗马数字的右边记上一个较小的罗马数字，表示大数字加小数字。在一个较大的数字的左边记上1个较小的罗马数字，表示大数字减小数字。并且，1个罗马数字重复几次，就表示这个数的几倍。</p><p>但是左减不能跨越一个位数。比如，99 不可以用 <code>IC</code> 表示，而是用 <code>XCIX</code> 表示。<br>此外，左减数字不能超过1位，比如8写成 <code>VIII</code>，而非 <code>IIX</code>。并且左键减数字有限制，只能是 <code>I、X、C</code>。同理，右加数字不能超过3位，比如14写成 <code>XIV</code>，而非 <code>XIIII</code>。</p><p><a href="https://www.douban.com/note/335254352/" target="_blank" rel="external">罗马数字规则</a><br><a href="https://wenku.baidu.com/view/bb2b9c655fbfc77da369b16d.html" target="_blank" rel="external">罗马数字1-100对照表</a></p><p>想实现算法时，发现只用上面提到的七个字符来当基准数是有点麻烦的，应该要再增加几个基准数。根据罗马数字运算规则，可以知道减法出现的情况是 <code>IV - 4; IX - 9; XL - 40; XC - 90; CD - 400; CM - 900</code>，我们将这些数字添加到基准数中，实现算法时，就只需考虑加法的情况了。</p><p>考虑到第一个答案要两层 while 循环，想能提高效率，所以第二个答案改成一个 for 循环。</p><p><strong>Answer 1:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type num: int</span></div><div class="line"><span class="string">        :rtype: str</span></div><div class="line"><span class="string">        """</span></div><div class="line">        n = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</div><div class="line">        d = [<span class="string">'M'</span>, <span class="string">'CM'</span>, <span class="string">'D'</span>, <span class="string">'CD'</span>, <span class="string">'C'</span>, <span class="string">'XC'</span>, <span class="string">'L'</span>, <span class="string">'XL'</span>, <span class="string">'X'</span>, <span class="string">'IX'</span>, <span class="string">'V'</span>, <span class="string">'IV'</span>, <span class="string">'I'</span>]</div><div class="line">        output, i, count = <span class="string">''</span>, <span class="number">0</span>, <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> num &gt; <span class="number">0</span>:</div><div class="line">            count, num = divmod(num, n[i]) <span class="comment"># count = num // n[i]; num = num % n[i]</span></div><div class="line">            <span class="keyword">while</span> count &gt; <span class="number">0</span>:</div><div class="line">                output += d[i]</div><div class="line">                count -= <span class="number">1</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> output</div></pre></td></tr></table></figure><p><strong>Answer 2:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type num: int</span></div><div class="line"><span class="string">        :rtype: str</span></div><div class="line"><span class="string">        """</span></div><div class="line">        nums = [<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>]</div><div class="line">        dicts = [<span class="string">'M'</span>, <span class="string">'CM'</span>, <span class="string">'D'</span>, <span class="string">'CD'</span>, <span class="string">'C'</span>, <span class="string">'XC'</span>, <span class="string">'L'</span>, <span class="string">'XL'</span>, <span class="string">'X'</span>, <span class="string">'IX'</span>, <span class="string">'V'</span>, <span class="string">'IV'</span>, <span class="string">'I'</span>]</div><div class="line">        output = <span class="string">""</span></div><div class="line">        <span class="keyword">for</span> n, d <span class="keyword">in</span> zip(nums, dicts):</div><div class="line">            output += d * (num // n)</div><div class="line">            num %= n</div><div class="line">        <span class="keyword">return</span> output</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;12. Integer to Roman&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given an integer, convert it to a roman numeral.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0011 Container With Most Water</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0011-Container-With-Most-Water/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0011-Container-With-Most-Water/</id>
    <published>2018-02-25T09:44:37.000Z</published>
    <updated>2018-02-25T12:41:52.076Z</updated>
    
    <content type="html"><![CDATA[<p><strong>11. Container With Most Water</strong></p><p>Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><a id="more"></a><p><strong>Note:</strong> </p><p>You may not slant the container and n is at least 2.</p><p><strong>Analysis:</strong></p><p><img src="https://leetcode.com/media/original_images/11_Container_Water.gif" alt="Container With Most Water"></p><p>图片来源：<a href="https://www.jianshu.com/p/23e8e3e53abf" target="_blank" rel="external">NapoleonY</a></p><p>本题场景可以模拟成两块木板加上任意调节的板底构成装水的容器，容器高度就像短板原理，与最短的板的高度有关，板底长度与两板之间的距离有关，为了得到装最多水的容器，应使两板的高度尽量大，两板的距离尽量长。所以我们可以设置首尾两个指针，不断向中间扫描，每次都更新最大值，等到结束就可以找到最大值了。</p><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxArea</span><span class="params">(self, height)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type height: List[int]</span></div><div class="line"><span class="string">        :rtype: int</span></div><div class="line"><span class="string">        """</span></div><div class="line">        start, end = <span class="number">0</span>, len(height) - <span class="number">1</span></div><div class="line">        output = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> start &lt; end:</div><div class="line">            <span class="keyword">if</span> height[start] &lt; height[end]:</div><div class="line">                area = height[start] * (end - start)</div><div class="line">                start += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                area = height[end] * (end - start)</div><div class="line">                end -= <span class="number">1</span></div><div class="line">            output = max(output, area) </div><div class="line">        <span class="keyword">return</span> output</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;11. Container With Most Water&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Given n non-negative integers a1, a2, …, an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0010 Regular Expression Matching</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0010-Regular-Expression-Matching/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0010-Regular-Expression-Matching/</id>
    <published>2018-02-25T09:44:36.000Z</published>
    <updated>2018-02-25T12:41:39.593Z</updated>
    
    <content type="html"><![CDATA[<p><strong>10. Regular Expression Matching</strong></p><p>Implement regular expression matching with support for ‘.’ and ‘*’.</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&apos;.&apos; Matches any single character.</div><div class="line">&apos;*&apos; Matches zero or more of the preceding element.</div><div class="line"></div><div class="line">The matching should cover the entire input string (not partial).</div><div class="line"></div><div class="line">The function prototype should be:</div><div class="line">bool isMatch(const char *s, const char *p)</div><div class="line"></div><div class="line">Some examples:</div><div class="line">isMatch(&quot;aa&quot;,&quot;a&quot;) → false</div><div class="line">isMatch(&quot;aa&quot;,&quot;aa&quot;) → true</div><div class="line">isMatch(&quot;aaa&quot;,&quot;aa&quot;) → false</div><div class="line">isMatch(&quot;aa&quot;, &quot;a*&quot;) → true</div><div class="line">isMatch(&quot;aa&quot;, &quot;.*&quot;) → true</div><div class="line">isMatch(&quot;ab&quot;, &quot;.*&quot;) → true</div><div class="line">isMatch(&quot;aab&quot;, &quot;c*a*b&quot;) → true</div></pre></td></tr></table></figure><p><strong>Analysis:</strong></p><p>贯彻不重复造轮子的思想，这道题直接运用 re 模块再加上一些 if 语句是可以直接秒杀的。</p><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isMatch</span><span class="params">(self, s, p)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type s: str</span></div><div class="line"><span class="string">        :type p: str</span></div><div class="line"><span class="string">        :rtype: bool</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">import</span> re</div><div class="line">        result = re.match(p, s)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span> <span class="keyword">if</span> result.group() == s <span class="keyword">else</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;10. Regular Expression Matching&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implement regular expression matching with support for ‘.’ and ‘*’.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0009 Palindrome Number</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0009-Palindrome-Number/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0009-Palindrome-Number/</id>
    <published>2018-02-25T09:44:35.000Z</published>
    <updated>2018-02-25T12:41:21.641Z</updated>
    
    <content type="html"><![CDATA[<p><strong>9. Palindrome Number</strong></p><p>Determine whether an integer is a palindrome. Do this without extra space.</p><a id="more"></a><p><strong>Some hints:</strong></p><p>Could negative integers be palindromes? (ie, -1)</p><p>If you are thinking of converting the integer to string, note the restriction of using extra space.</p><p>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p><p>There is a more generic way of solving this problem.</p><p><strong>Analysis:</strong></p><p>秒杀题，其实将数字转化为字符串再判断回文更快，不过题目要求不能额外申请空间，所以可以先计算翻转后的整数，如果翻转后的整数等于原来的数，就可以判断是回文数。AC 后看了一下 LeetCode 的推荐技巧是只将后面的一半数字回文，然后让前面一半与后面一半进行比较。这个方法很巧妙，于是改写得到新的代码。<br>留意的是负数和末尾有多个0的数肯定不是回文数，所以可以直接排除。</p><p><strong>Answer 1:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type x: int</span></div><div class="line"><span class="string">        :rtype: bool</span></div><div class="line"><span class="string">        """</span></div><div class="line">        num, compare, x = x, <span class="number">0</span>, abs(x)</div><div class="line">        <span class="keyword">while</span> x:</div><div class="line">            compare = compare * <span class="number">10</span> + x % <span class="number">10</span></div><div class="line">            x //= <span class="number">10</span></div><div class="line">        <span class="keyword">return</span> compare == num</div></pre></td></tr></table></figure><p><strong>Answer 2:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type x: int</span></div><div class="line"><span class="string">        :rtype: bool</span></div><div class="line"><span class="string">        """</span></div><div class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x != <span class="number">0</span> <span class="keyword">and</span> x % <span class="number">10</span> == <span class="number">0</span>):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        half = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> x &gt; half:</div><div class="line">            half = half * <span class="number">10</span> + x % <span class="number">10</span></div><div class="line">            x //= <span class="number">10</span></div><div class="line">        <span class="keyword">return</span> x == half <span class="keyword">or</span> half // <span class="number">10</span> == x</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;9. Palindrome Number&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Determine whether an integer is a palindrome. Do this without extra space.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 0008 String to Integer (atoi)</title>
    <link href="http://home.junyouxiaowu.top/2018/02/25/0008-String-to-Integer/"/>
    <id>http://home.junyouxiaowu.top/2018/02/25/0008-String-to-Integer/</id>
    <published>2018-02-25T09:44:34.000Z</published>
    <updated>2018-02-25T12:41:13.242Z</updated>
    
    <content type="html"><![CDATA[<p><strong>8. String to Integer (atoi)</strong></p><p>Implement atoi to convert a string to an integer.</p><a id="more"></a><p><strong>Hint:</strong></p><p>Carefully consider all possible input cases. If you want a challenge, please do not see below and ask yourself what are the possible input cases.</p><p><strong>Notes:</strong></p><p>It is intended for this problem to be specified vaguely (ie, no given input specs). You are responsible to gather all the input requirements up front.</p><p><strong>Requirements for atoi:</strong></p><p>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.</p><p>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.</p><p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.</p><p>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p><p><strong>Analysis:</strong></p><p>本题虽然简单，但还是有很多坑的…<br>atoi 函数是 C 中标准库的一个函数，题目要求需要防止数据溢出，且经过测试或者查询 API 可知道，无效的转换都要返回 0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">int atoi（con​​st char * str）;</div><div class="line"></div><div class="line">将字符串转换为整数</div><div class="line">解析 C 字符串 str，将其内容解释为一个整数，该整数作为类型的值返回 int。</div><div class="line"></div><div class="line">该函数首先丢弃尽可能多的空白字符，直到找到第一个非空白字符。然后，从这个字符开始，选择一个可选的初始正号或负号，后面跟随尽可能多的基数为 10 的数字，并将它们解释为数字值。</div><div class="line"></div><div class="line">该字符串可以在形成整数的那些字符之后包含额外的字符，这些字符被忽略并且对该函数的行为没有影响。</div><div class="line"></div><div class="line">如果 str 中的第一个非空白字符序列不是有效整数，或者如果由于 str 为空或仅包含空格字符而不存在此类序列，则不执行转换并返回零。</div></pre></td></tr></table></figure><p><strong>Answer:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, s)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line"><span class="string">        :type s: str</span></div><div class="line"><span class="string">        :rtype: int</span></div><div class="line"><span class="string">        """</span></div><div class="line">        s = s.strip()</div><div class="line">        flag = <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> s[<span class="number">0</span>] <span class="keyword">in</span> [<span class="string">'+'</span>, <span class="string">'-'</span>]:</div><div class="line">            flag = <span class="number">-1</span> <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'-'</span> <span class="keyword">else</span> <span class="number">1</span></div><div class="line">            s = s[<span class="number">1</span>:]</div><div class="line">        output = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> char.isdigit():</div><div class="line">                output = output * <span class="number">10</span> + int(char)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        output *= flag</div><div class="line">        <span class="keyword">if</span> output &lt; <span class="number">-2147483648</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">-2147483648</span></div><div class="line">        <span class="keyword">elif</span> output &gt; <span class="number">2147483647</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">2147483647</span></div><div class="line">        <span class="keyword">return</span> output</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;8. String to Integer (atoi)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Implement atoi to convert a string to an integer.&lt;/p&gt;
    
    </summary>
    
      <category term="刷题" scheme="http://home.junyouxiaowu.top/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="http://home.junyouxiaowu.top/tags/LeetCode/"/>
    
      <category term="Study" scheme="http://home.junyouxiaowu.top/tags/Study/"/>
    
      <category term="Python" scheme="http://home.junyouxiaowu.top/tags/Python/"/>
    
  </entry>
  
</feed>
